%!PS-Adobe-2.0
%%Creator: dvips(k) 5.991 Copyright 2011 Radical Eye Software
%%Title: sig-alternate.dvi
%%CreationDate: Fri Mar 07 23:49:09 2014
%%Pages: 11
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: Helvetica-Bold CMSY9 Helvetica Times-Bold CMR9 CMBX9
%%+ CMTI9 Times-Roman Times-Italic CMR6 CMMI9 CMTT9 CMMI6 CMR5 CMMI5
%%+ CMCSC10 CMSY6 CMEX9 MSBM10 LASY6
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips.exe sig-alternate.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2014.03.07:2349
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: LASY6
%!PS-AdobeFont-1.0: LASY6 003.002
%%Title: LASY6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name LASY6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/LASY6 known{/LASY6 findfont dup/UniqueID known{dup
/UniqueID get 5011945 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /LASY6 def
/FontBBox {-25 -214 1157 702 }readonly def
/UniqueID 5011945 def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name LASY6.) readonly def
/FullName (LASY6) readonly def
/FamilyName (LaTeX) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /a58 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335E3E122810537E98C2459DEC
6D2BFE86742F99E414A7906603BF4A66DA5243C1BD05BDD1E0F1E249D4C9F8FC
686252B22F189F9A1ED14100A0EAEF4FD5F207C4B5593DA91BAEE8FC8B5952C5
A8481E938082027E3C86EB6AB5D56771500A64E0884DE9BF4607F9D3C0CCE4EB
7168F50375EFBDCCA9B46029E5B1EE288DB6CD0F21C785EF4C5A16B768A92359
A8567C83AB054E99B30BCC14B3CFD783D2549AE8B17754658ACC8FE76035A716
5F6E98B4917AE9BA41564ECCB28F313781CE2A3485B757B6BAF8323573D4C53E
5AABEEDBEF541717770247ED7D3391D7C0B4F8DF6B0AB7664BBB732CEA883316
0012E0C61E6D8210DDDAB15EAA20F33E59DD5D5C67887ED90800B07286326D2C
D3CA75088B9087F0D89A6F177D63B0EB20AE0B1B6648BC1E0F2A43961ADAEC84
4A5419BC5A9BFC205D271DB4F61EAB07CC7DAF328B8E8B59E4A5886075C99E4C
F9CFF3A63F0CF4F38C9A54B2881B611D45343A722F6D5BF2406A309AE5429D34
ED97430262C070CBCC0E484CE340F9F60772A6CEEA62E317BC3AF673B9D861A4
A7EDD38D92DE3CF5662669DE893ACB4D4E80BACC6D518A6AEB34852C1009D381
D8E17A55B3B529D82C8F1CC1C011249BDC3149627B79B82BAFFF87185D26ECDE
43B62C185D966DE2DE50341B8AECA58768D44C2704447FFAC20C4077E8BBE02E
CFF7D979725FEEA28D1A485FB46E96DDE3343AC52C2D1797466E86718DFC4499
03330F31F781E58306ABFA595B51CC4E1AD0EBD8FEA1FFE8EECCA1393D55532E
0E17E8BC6722DE45E6C67C09E4B660FBD8BAF9809930D70DF54D203C2C9BB702
006F7C8E31E70FF75FC4E1FDD22A371B02BC8FA4B0F0B851410934A76654DD7A
D69277E1AB44332069F3CFF23326F101BDFC2C6B96E9ED756FCA8617DC87B4B8
35C7DE472E783CF2984113491C64C5F440FA0948BCAA1EC1A0897CCBE723A1A0
B95A309A5436BA9282755A2F158C262183B4EBB91A061BDEA3AA5702757AB740
2A7E4EDAF9D0253905BA84431E43BC5D408117A8197699638173A4543C6DDE86
B918A0416F00A93703CE3801309BAA306A1FA561C8B849B7E1B686A4B4634098
FD08EBD7E24BECCFBF23299B80AC93ABE4BE92A1E69273DBA4101D9650DD078D
B48BA0DEAC599840DF113D7EB5424E8C9943A669B6BFC3B2447C7E669F961F64
434CAE98418E00EB59E2A20EB50895CD9F07F17A22AB45AE1ED11AEC9808DD90
E065D98CB017D86D2A17055C959C31054441DEA003EBD9D4781AEF0192BC86CB
EB0E86565DBA992938463B26034043849C2B93CB5B7EF0BD1EA156796B4DFD7B
5C2751133B8AD7ED8540E1FF01E6A9B5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/UniqueID 5031982 def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 36 /subsetornotdbleql put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DF02700
A120424E0512AE5AA12DD1F4946429B350770BA66DEA37E34F7E94EBBD40C3C7
701E97A57C400F062F952B0A5F80A39279C5FA5DB51A58CB2D094D0B4149A5E0
991BC0EC1757543978CCBCF4A3CB8802499AA5B89BAC5BCC79CB06520983CC67
41DE803E5B6EB1E7F5517A860704FA0598477BF73995AA4C37BD8D5AC97935DE
4D8E429AF9B1DC692F852BB697E9DE42E2782FED493AB33413FB84F35B3C0016
089A6C4D67EA0050A5358F8B109526FF86F3C80A3608FEBD0A9B6A9925AA306A
89B60E01C8D8AA2B2A13F17B8EB838C38483FCA0C342E95FB053CBDAB825988E
F44CA9EB434133FBDF35BA06E80AA6BE0A001415F381236D5875FCB1ACF80687
D6383CA578157328AA019A4616E1CB280CC4D3BAC121A303710BEF67DB74F9F8
02B57CA4E6BF8420AA157D2569CF91936714A6AEE5697501FE55BDCBC829C038
EEF4F07B14F01B02C1A4E8BE81DD4C001A3FC4C5D21126A66592F51AB6DEC1CD
3393BF911611DCD994247B50DE3698F050DC3435E1294132AB9CA02B5877B537
47D33126D4E427FD7ABAFE5A74AFB29222D619822D08CF5ACC9DDC68D89F32A2
ECD191B63E2E8A943C94C5D0112CC26B45288E707897BEDEF8F92AFC1924FF85
BF0BD5547FBF0ACD890470A9AD1BA87D1EB408C340D047061DBBDE1BF5AD5D03
8A2A5668D9FB215FAAFFCD09DEC9B740E2A860554862961563EEBC9D9886DBE5
024CDAC61A3A8E149EFB5E42948CA2E878BEA4BC99CED5B296F1916C4EFAAC65
1B40B31029A8782D21FC23266EAA8DFEB21B2A38AE04E0E543E16D028E46BDA9
BAB2618CAEA3A6093176FD0AC78C389CE68CBF1557B048F8C9E46F213B789C32
4AB57D15D6C78153E9C5533E181B368CA08340FA1294660CFD380BE8DA45A7FD
3452FC17F10A319F4657C3415855EAFBEF4701909913270E0060FE23E1DD26DC
1BCC1BC10458CA6C4395659B0DB6B612C15154487E8131E6FCA51EA4FEC2A4EA
AEEEB2E1C9A5B98D553233F7EB95A02F86E9BC231EE5FC58FDC990C3DFB5EF5E
5E1F853052970408E1B96714C7B1D4F806F88D2DC3CF7B6CA10E80597C6D46D9
7550C614A3CF464ED668F20AC79B6145C924520DC0BDE78AFE39B3C92ADE213B
812D318CA5B73E42806472E799644A90738264B68E84AB3FCC5AEF37DB709AF0
88DF32159090A31E0B593129AEC60243662D6BA88DACA0475A655E6E528840E8
C30572AD06D6EF7B0ED471DB941811EB43EA0977CE655B4BF53F63A48C8349CA
BB921B41102D0C3E82EE59E93ACCC933BDB4F5EDE7433EFE95B6168BA9480DE4
6427EC1A7802D3DFB5DE07F3BF4F9198842472A7DDA8AF528F81EFFDCB8521E9
D114C4A9D51E784A4FAF123A6D1405F4A6F584A8AB51006217BBD46824036E69
FCFE8479FA6944B6924412687D8BE906C35805E0DCC77060646DC1F2DBFD9365
C6C39186556BAB42C2D0BF873CCB5F7ED91C778E79662274A1CE68CF2E4B5259
8CBEF1CE58420DA78111F0180F47241EDB5FEA61E956A76F3259898B5624C765
79779E0EE15E86F232CA2DA6D593A4BC2A154B397C09DC09F597168484641C07
C53CFF74C25DD11E4545F64E3E171130851E5F822CFD7F295F67EFB330F4E2BD
F0A1F94D31D2ABA0E1B0883842A71D611E5472AC73BF1AEC9AA479DE836EF4B2
35A25B2327968E3ADE7F7AD631AA817EE87C48314545A2060B9F7BFBAC8D2375
79A59FF0DD2B920F0628E2AE510419744DD444FCED62379B76839B436DD0C5C5
7ED1D8DEDE96FAE277FA823C75DBE42C2C50F7B26C2C94ECEDB22CCB33AA0DA4
69BE06F075E3A6E29BBFA45CB31E211BD1A7DB329D9685D9FFC945CAD45B0F3A
F59E4DA6F43324D6C68765CCD0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMEX9
%!PS-AdobeFont-1.0: CMEX9 003.002
%%Title: CMEX9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMEX9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMEX9 known{/CMEX9 findfont dup/UniqueID known{dup
/UniqueID get 5092765 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMEX9 def
/FontBBox {-25 -2958 1495 772 }readonly def
/UniqueID 5092765 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMEX9.) readonly def
/FullName (CMEX9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 80 /summationtext put
dup 83 /uniontext put
dup 84 /intersectiontext put
dup 91 /uniondisplay put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB69434BD2F5E56C8FF46EC332DB0
76984939803A4D2E4F7065326BC983B6DC4219499435B304C1AE83C8A14C4085
131D1CB66E24EF3AECA881EB3CAFBD7CC6E70F905DF2FF583BF11F2E5A674AF9
11C625E782E1503243619CCD6B1222599F709EC8E7657B1053FEE4D83E29B295
494CE2255E9D555D71DACD865C95E1A3ACC8D19A468D316142A854F452DE76EC
B45C35C92BCCA844FD24BF5D5A43BED6C829FAC12BEC9C216414BA7783DB2747
0B114774A6508C9D617C38A99EB5DCC26758D9D55A563F8240143878C5C49256
AD489CE0A01657DE0051A2E845EFA4EB61043270B4A8E5E0676E90149CAB94D5
AAA65B9198DF0EC8439A194D5CC14FB65FF3BC2D67707BAA7B23484DA100F9DA
DB0610AF3AD273DB18B69EC987D6D9A0BF699BBBEA34A0AF1AE401429DA0C85B
AE89B1AB922D16074CE2208BA2C3F88AE84F7BD87F4F23EE64789BB62814BFD3
946734BDD1586BBD77254160BDA350FCC2C30B7F6B6AE44B928191DD564693B1
29D840BF729843DA6A707EA375F7541D398527AA15017B3B625000ADAE91FCD5
B749C01D15B2A8C60E3E4D97D5C454974BFB02CC706122041709F96659FA31D7
C27D613F0B45ED42ECEA2090986FD97A3AD736C9310B7FBBB8B6FDF7052B9941
A609E7F7EBC0B652B6FAC06337ACC5A1D1260454F16F5EC6C967D5B7402600FB
546B55667896C188F50BDDA2E195EC55C0A7B48D6A025845BCBB4B567BB19946
69191A766E28660A8DC4A15C8022948207DDE6E7451DDDED8376E52631E4F0D6
B947E227F99E03605688E5E28EDFF6E8033E25FBE8F6A86D5A26B2937FF48C14
BD9AC06DEB234FD1669C8F3EE9B8BF3E17139E08C308A3BB0ED0AAC81291D8E4
2C1134A3314BCC0D93D513E3EC0D91C45C05ACD19994AB285B896334721B8C42
420BF74A5CFE7CBD243D3DDB163362132A0285C280277B4C60D9BFC3D40944A3
943697BD335C27F16ED870DABE54DDDA4BB5C3868DA4CC1C0DDCB50826700ED9
9DF963A75151C5BCDEEDCAF2576E0E21288D194E540B422BC03B62CFD137E732
D0660236BEA09052A292CDC218E48181DEE1BEC6548C828AF0FBCCF10BDCD4F8
B71AAD95C5CF688815B9BF856FCDBBF769FD395885A88F4A13FC7B9440BDE7D1
90324ECFF82AD30375BF19834A5CDCE28FFEC0FEFE45ABF372FA5C6F03D972C7
AB3BC52C7E1C1783D6F80155B3A5BD54F19E6B3FF7155A6DD083438D0EA7AE2F
F5BD3F1C0A13438F4C42B3379D2868D688C14DF6202B5006BE89F09FEBC4EE0A
CCC50B10D3F9E56CE282FBA763D6F46CD62A860CA0744267D336833173C93951
87995BAD6E789CBABD53DBAD179F29DBFE73E9E28FB75ABC0C3014A72D9C3CE0
A80412E418D69741397C867907C795A20D45306EDCF032DA7A4A248C8FFA0189
2552A041D06D13826860886B2FFC1361EEADCD6BE3710CD640E881B2811E81A7
45BE7BF836AFDBC85E5AE36274D19BB1A12083A35BC231D6C1D98F8470ECDF8D
8AFF93893D5C0557152DB776FA755663D4E1A7659DD7D7206305378297175CE0
444B24650996FFAAEF4A23052AA4E77553F992DF1D6819C195B0B962F5571346
7CC036EE1D527B68965DC2EED66818821AD02BDB5A27B3129C43986C3928E391
BA170B1B161818BB2E2529024B721839DB116A174DCE89F92FAF4DC83033434F
C96D97A6202D48E7FADD753825159E50FD051D7D268C5807225D52D161569EE7
F94A99E78DB76DF5860227F5B6ECB1FA255E162C3D2AF6D96099CF3286E96DE5
31D324EB92FBDCE0FAFC586FECDA5D9376D40C9B1A43BF1D52D3D54BA06745AB
58E755921509C3335F72DBB2366726C4CB688000C1D6BCE706A3DE168DD0D5B7
45BF139E205273B248F5C4E3844D4CD211E6208A2BBDBCD88AA8DABCE4FD0594
151AAB58FAF716298DDFFA7A97C02AC060A114FDB3A0FA6EF7B8F1CD8606BE46
8B7DAC1E72788C555BF9B5701865B263725AF314DB471239363AA8437EF51206
2181B31E56C30103126582F77EFC23CD8F37DE389C16333F6C4F78699D187746
EF94B8A9BF312AC2ECE4F23F9A7AA0487D09CBA71C11241155AFDA73BC914425
4943E10468A243ECDBC5E70A06A00529EC2DF656F21EC7522BF41EF0F8BF7D35
E0E76D6589E77900943C06AE933DBE3668099BA91C38C19E945BDDBFA4FA5C49
ECDC4F183CB9189609F753DBE5D5B1AD7FA8BB9E28E3BF72DE2C604D88F43552
ED0C3D02277BEDAB0DB5B7A9CCABC8932006E8D44300E748C149C08D41F86608
F980E68813988906B7A4C5436CA1C10E54EF608945632E82B22021193A51342F
5530D708792FCE9BEEB224D03DEA481107BAFAFEA271D16C3E8B89A481933D27
03A044FB481748F2C7CCDD0562AC53F9AC2A9423FB0C7DDDE764022EEC181FC1
1EEED102ED0F29A61D17004FACE1A1CBDB8994E2AC2F88DA74B173C45362EBBA
597EA55D327886FCAB9221CE187D9589BB795BAA03F931CBF86DE3E8668CE8E0
F8FD3B098CFE2ABA2099BFF8DA83E54E9996D2DC42E7D9416DC2D7FCBA3A0DDC
B8CF9B37F7EB7AAAA6AD85297B042900688BEDB470E6E38CE0929AD5176A6C7F
059174C1123F3AFB6FE77E4CBA0394C9A305FBC8FC817BFA6F97D530C77AFBEA
29CA42B9551906D7187398AFDABD2EE9B06243E95BB467EC8E0D895474C9C455
1CEE93868A6412C4BEFF0BD0272BA95DDCC0369AF8160EC2FE1C60F5E535D25F
B0632C01BF40867E507E7BDD03BCC3BC21337FA3B974244E5D4591437FDFB185
78F0176F5DEA5803EAE72E013AA7FFE07C40EB971DD7937DFE111BBC33F4F8D4
5504AA54C414D94A9FA908B7B5356B913CA1AC0E71BD21E3CE550226FC5ED00A
86C05BAB4571AF93066C4F4612CC3C51BEA3F241EAE68A79284DB837F5B1904E
B642AA64A984EFB35F870912ED178F53DBAEA4A0E6E116256930BF507C01DE54
8BB70AE4F99C5639BE4F065C51C95D3C97512E6C7E2E796E90CC540B09DF02A5
CCD2694E35C075BA264B1C1C83CBDAFCA48807A008B1873273AA1028923AABF6
6660CE500CF174183CB593014D8A272EBCF3A09133603CFFEF43A6FF059BCE52
5BF232A5E067BADBAE7D90A56392F6B5922443B8A14DE64434A0018E21C1CC89
CD5D85A03022B4D80FC1C3C8740140DD6793C65319FC3E906C7CB714DB22068C
A66714E765A17F446CBDC8DBEFFD8A8E284DBAA179C9DD9BD9FD0A1DCEE171D9
D5E47F8246FBBBDEEA159301B189724C21E5318D1B73BADDEBD21FCB6E8DBCBA
4872FB568BEEFFC852FC84255B5014DB80589DC29AF1EDA5A57309FA19167514
967F9F9D5DE56CA3E66A3D937C041E83C29AC39C357667715A824ABC7A39F398
60C43B9ABB86F0CB56F9CDC50B6CADBA7938D020CDD81D1B59430611632E2368
E7483D596A272D1D99B5CDF4BA2B66C9F50625ACFF60905652C251B724FF8C68
D45C0174D12B87E95E7D480DADA7EF001F12A1B3528ADEFC3052E7CBAE406533
32CE0D5F96B7A2DF24ED4B5C6FB220E751257161A0F095017D90E95F1DCB6B5B
BF0413399B722A309C1155A0A9F2903CBB7F192149DB130BC24E5C41056FC750
1E83C4E6EE02EA45465598DCF7C4892D00F14A954A4AA6C2E616D39F09BDEA3D
27F0BABE6CC9D417A17D3EB2C138A842F1E53B30F58F05C9C77F3A0CD8B3ED6E
5F67D05F551E95D9D1133D33C9F8CF57839C998E204A1FD39F24EAA20FB6B3D4
9FF31D4D1826745AD4D3E95EEF71DD2D4E6300C42BA9316F1560E2D9A094007E
79C04433D225BFDFDEA8F2E6D42C456B722F80EF4223ABB38991344ED1C78CBD
830400A52BD0F2253E20A30122A842971BE77794DA8CC6290EAFEC44E3273E10
54A6A2AE4E8F8072FF4A37265CC0C1FC4F773190B439DC006D769F3089928C4B
DFD6A6012A39A0C8E997599EA3F4A73FF32C011819711BC6FBC4B6260A02DC29
7348188F3B7EF0BDEBB8EAFF7347A3023C478F446CE904FC25AA2DDA51D976DB
584A2ACD393B9E9C601AF9DA9629DE5C003F742AFE6D414A9BF1377D823B465C
CCCD4A7D7D108A9D639C6BBC15844D9CF1AB8B8B2260AE601E7E9F7394E212B2
693B47C8AB94612A779255A9FD9685585B0D1A7FB8B7E586197426517B122055
CF9A5207EEF696E1B881E64754AFDF0C60838783E6BD49D470FD0553649DB0FF
7B8CC86CF80D05B0701580E75D874515C4C8A7823CE924E9E7ADF1C97085A6CE
24EE43E7969701EE5D3E5F07F59492A9A946F300DD83F9FBA4B8CDE73C12C563
0691D30B57F253DB008E4595AE2D472376E88E30246642031DFF3132F971D172
19F4B6C6F87303ABE5E1B4CF1AE504D1E4B5BF5C86E232B42304840A9BB34E73
BA98A3186A01B72D98C92032180DCBD3A8715016557108B939293E23697D81C3
FEBC37582B7F7AA541C220DD5D93E555AC54D7D277AD6DE29158CE8B89E29C67
A305FD1F200B5ED02588CC1E0CCC93F9C8CED113066C401E1FCB4EDFB49C9224
0FDD03519559B710C046DF2FD60DFE4029FD9505867321D98507F0523E93739A
81A9E72430D30D0585977DD323CE222D408E4E2DDA7FBFD91A1EE1F75B530C6C
A5F6ABA3BB9B6CF94C29837A4186EA933C7BA60AEA9CF1F7F632F5F561A4CB79
CA533B32069D8A8D2DBD8089F295FB7E0631ACF087B7E777BF77EC394DEE5BE3
B69A27B122339829F3593ED92F42FF2721840133DD96450BD9DBBCF984B3383B
DF60B5C6603EA17DD5A3D0BBA5C61E1A7737E5F7719E2CAF59EEB87293BBC72C
0BE5F5A97CF28FD8CE19177B37E8C223549F926B6A979F89C06FEBFE86178B82
44F429C3C3C1F6506CED46DE0774ED12D7BF94756D38A8B1801B086CE71FBD37
8C17A639A05280033FB5A7B8770A953C0CCB14B386D336C1CAE1CAFEEECCAA1C
936164553CFA7ADC9E540353BC77C57AF8F96CD0FB7C41D5265011C86FD66BA7
993FE45C8BD006B9BF0CFCD721A80368A1C4DD30EE15EE526D6F511DD5B42A75
9C53639E5CD73845FCA08B21A3EF803C0DD4DC61598CC3446AE68FD548B9F5E3
94B6A56EF1D7BDDAED84F8213EB7DCC84E699BD985ED8E5CFF2C729C02A925D8
B7906366BD4520AF1B56A6D16D5B8D1A9B9AA1EDD2CCD597BF963F42611D48E8
D2B4F733DAF0336890511388ADFC1A8801D25944E95BB859DC761B72B9E99A53
584DB945DEB895BE8B6CD42F39D9568CCE9F89781614437088584A57EF884C63
12FBD3E7874C42F97E8E2DEE2130ABF60DD60A3D84224AF5F6BC06F1DE598843
C9016FCA08B9A343FC5638A5F849C84B248C3BD487895F602268D3E6F5EE8AFD
0016BEAFE2901B570E75465A86AA357D15EF02EE39D18AA90D784DD117CC911D
47BCCD7B6221F4A0741BDCF8BF30EBA66596F2164C5C9B9BB1E013C9F92D0E26
A8C82CE7E6EEB0870BB2A6D09BF336CC2AC4B35D740403A60C31984F11B0D4E9
8A8B95DCF96A7BC07C1FF7510EA6B709A2FAF612CDF75B71C1E471ECF2650192
4643D9FCCDB1FDEC4FD158AE04768C099C7CC1FA1F693F884E04522E179C9E63
778D704419A3EA4217A85AD8E70B6BF53F87430E511C3FBDEC1909CB52912EFC
3E645F84680F4750762BC29CDEE4D355E3F2DA698F474D585E4068CE0BA9C253
89E76F438987B389480A7CB39CBD601D9A2A5640EE3894A345548F18269D275B
D43F757712E746E7EA971055FC27159818DB2E464628E362EEA21A9C5250AD98
58DB14F128F2C1394D38F5D12417141DF703A471BE813269CDB23E3F8AAE820C
65A72B14E8663ED16AE4BB7B979545FA7A3EA413E6435E0BAC5F16EDA64F5AC4
5B3B4188BACE769342E1B5405A3D87A3E8D337E8C6BB74C0FBAE053BFBC86746
3ACA563C0B70FE33B38C5F5C0D704B90D8A081F5A21ECDFE0C800CCFE29086AC
1AFD3E9F3A37C62656182F8FA82BDC9B6D818FBC9377271CB5F4F60E2AA1422B
4A52A35434D55740380F28026DFC190C9FB8F2D60A87E9D6C2FB65E3B745EBED
917DCC5CD77BEEA69D2C9698A0A2BB3FDCA2C338B1D4FD47B06FE48A1B643DCB
AEFEE774A7636F7D29FDB77B8DFC56FB7769521857ACE49C2A46A19EE83FA941
F1F79A39384D9C0C69F3AB2E22B142FAD9F6EC6F4D9FDE36E12BD766206EDAD7
91BBC76CC9F6EBD6668BB435501709CBE1CF23C32C5C2A877B57445EB3B879D2
FC850D78BCB7E116C1155981F8B1B7225FB495E0927B42DE27F16AA7DF593762
67A6AD250B378667E70198B04B040132AEB3747E89F9F2A213AC9D008558D32A
23DA61B5AB7D18DF90C68BF29FF638630D5E69872C3B7D905182BA65661CF042
EBD958B8648F5B650425B86336F3F57ADC4C3A02CAAC08E87DB5EBF6DE8C6E40
CEE8B7138105873B76925E5F08EB999C4A24E1F3EBEFD79B17D31BC0E2D12C4C
52708F03EA1F6859B3F91B885F76E6EE97D3A813F2635231F9C93D642EBBF666
EDE5B814BC413C5B85E31DB99EC2A1D6861801C7ADA21BFE167441B26E1E2BDC
6BBE9A438B41B5E3A7006637708163CF0E95AA0C47C15DDA87893AC37C3130E4
81F084FA674E69515E490C819676C2E4FB666A4125C7677FEB8C32299E6751AE
0ED2F1CB6AEDC00E0F8D8EEDC6C735A5CB813F1DCC95BD568030E63AD7DC317C
6F61B99A39C65B93D0828817A1079F40909A01A2F11A01FA256D2C57F7A28BFF
82D4E3E4CE220F270536A6424468A2A55C567AF75363C7BBE849BA0547D3867F
34A50839A7061287272464F0C5CA47C965A265E044A366CA620896AD19EE956A
8049A30C2B93FA109424AD69F8C369379C5B6DC1C695DB16E43912308DE3E3F3
18F592F0C2559951F9B1ED4D9B66D0F691BE22D45361D74A216C4D91B72AC393
28A28481B8377D8A20E2DCBB87FEAAA6C47861D12AB22FE1DE62CC65798D5614
58AFBBDE546B5712A69F199C1D84CC20281C24246CFBE9B2DAF3A9DCDBA4E5D1
BA82CB7082E3F560522D4947B51182431BBC02250648D7D2B771FFE8B272F269
14D4A76B275B1DB785C374A227624FC944DD8E80A0316EFAC25B7CB975195EC8
B248452D9D09C2B304FB2F5D416BB6387C2B0EB06223AD089BB9BF21B6079B1F
22DFF38A0E248B9733CF97D23214A30167C32E63803515168556062D710FE258
C6E3AD9D3DCB888950940F7E91F5B5D25C03B5A25AD033C8443DA01914A20EA8
F2E6CAFA15F6E10D5645DB2EEF7D627BB5DA85DA1DD2009CBFF9D2DD159FF95C
211360B517EFA263CFD0D2368C13381D3BBF877CA98DC6ACCA103B099DC2F3FA
B7A6C1A01CEA32F205716B83CCCFD20C8ED17A3D778B36C1F28C88B7151637D8
ACA1CD904829034DE2B388CCBE8789A647604825949FAB2921C78C670DD741AE
E988968EF346E13CE3021D1A0DABB13746EE4D782630708F40346358D1E71DCE
A3889ADAED210ACA14904C4F06EF1F86542C5ABF455201647355CD7AE4106036
F1B7EE78A25934E8D077D323F961A71FA3CCCDF5A2C468B48D08BE2763346935
0AE028DB5DC32E84F6D20CDCC34837AE20D6FBE559C10A65DD5ACF4BD1AF9BD0
2D5280D6763618A3803F4777CB8D89F7F96B93EC116373B47C98A95D9C332C38
4DD9CBC706C928A414FA1FCC656C3D91023125015202411418DBAEAE0472AE86
C7CEF889388A03B9BADC361256A312AC34F3A4D860D8913EC169F62D3F454A67
DCD2AA7A2527B1C5D97A19D310FA025E0E1674E62BB9F6072FBA1DC272AC3659
168B46641211EDED6F24CFC1AC71F260602E6855AD57589781C84C4380B31E01
9DF2196E80DB6F4197A39E769DF23C1D073490DBDA30CD80F6B6A8688635FDCA
A0A18BF682E0DC78F5A66E48ABB617606AFBF7BDBBA51F5CA35B7FF7B611EE13
7EA94536B512C4A4564C89221A6A9624A166BEEA9EC2DC06EFE56053DF6A7310
F5DD0262F0FFF6EC50F19C552458BA9E7C304D5DE53CCEE7724B750F1AF20C65
E927D0D2344A92426B91B1430AA8A9FE429066B82411E939E4AAD096ECFD6D06
B9A5AF079831E4CC1FA0374EE09C61CC708D31C75B2D8E1FF3F01B7712D75D2A
B5D020F3C800E5A15C9E0ABD9B4A18A54D0FC7EF8A65C7FDA62709B2A04C7982
BE17A216C662466C6A0A3F18F7189835B71BFB26DCB625B6A081233E180F8570
667F2EBA21EEBD11091B75D23CA7B3352F39A17CD65AA53D6253DA02C92DFD57
F36C42EBD3125131FC7A9E974878E12E70FF031D7E4FB22F56549C3BB1BA1DEF
5340A4F7BE7C66E2E575C959472A0C8D7620536D5863F186E1DCF0329A69168A
A370A8AAA1DC8AA2A0438AAF34301C2E8390D1E2CEBE38305B52ADB1FDB225B3
FE72EA4315B9BC0F360CE3634B206013EEE1F769002A1BBF14EBD408E973B630
501F55D5DC7B03DE3451B9FC67292E4B342E459B84DB080973F8250A1ADE0CE2
56070B7DD1712F070E12C00FD146547A90BC5A2B4330E51F411285E4117C34C3
1C4E97CA7FEE59B3E1390A6C25E509794CC132883C34B42F50D746FE32096D48
997843FBD92CA1844D49205E3928EB7B163F001EFB760AFFCF46C617E0611854
4283541CC356CAE83239994BD4238153A7F2C2B862F6C082EF33138778570CE3
7F7B8464B6EB9470741EBFBFBC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMCSC10
%!PS-AdobeFont-1.0: CMCSC10 003.002
%%Title: CMCSC10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMCSC10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMCSC10 known{/CMCSC10 findfont dup/UniqueID known{dup
/UniqueID get 5087402 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMCSC10 def
/FontBBox {14 -250 1077 750 }readonly def
/UniqueID 5087402 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMCSC10.) readonly def
/FullName (CMCSC10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 76 /L put
dup 80 /P put
dup 97 /a put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BB89566A9BDEC70EB4F2
048A6EB631F05C014D372103E37FC3FA317EBC9973565A638403DA02E48B7D31
CFF6C241DC5CDB470561002FF46437C06EF93BC99352DF04393C661FFFBF4BA2
0723ABD9B3E9CA9E63BA57EFDBAE684655CBBDBA15ADAE43E1A2C98A3CF060A3
D16AF8FE3A49B50A24C20EEED716E49AF6013D4D38CD9CC41A91C17E4D04D79D
567E1EF49110AA9C34464E95D81A730ECEB2C9AF38FBA6B45E253288438B4CB3
DC75B3A906D4357293BA41E59C35223A6C9CBD6FF5FC90C2D07CBB376C7320FF
435A6251822BFCBB612CE630EDF826C37E95F541C21B93FCE127591D5E38165E
2B58A34AAE37712BC58B63FFD70AB80F4F24612CFD2F1466BAAF3CA2BCB45148
D0DEA0E9B8FBA4C4FF5B8B3CB02E461355051842BD1C94F41066B9B909DB83B1
DCDCBEF7CD00A43E4C0B8191A29600CA197F0BA227FB8309BB539D2A620BAC70
8A1AB2DFA51ADC9873B8E5582DCD3ED154E5D727D1665F99BD89883D69E6CC2F
DB3A57AEB612171A88E22F038461DE03FC357F771675E34E90D4D19B4B36891C
9D2333960400E97494F4FC4DBCE6A73C34A0409E433BBDC0AAAEBA7D3555066E
1CFBB4515C8B573C9B9DD12ED5B6ECEBE35AD0DDEA9DB004FC6CB540B5117B49
59CABE5FD74C6F5B6482B42C20B5FF0467D1DBD7CED2CC651CA57852B6FBB402
A6764DB342889132C911CAA713A7F2FDD8A5E849345D6C81025E02F5B8B682BA
90CC9B467FBC37362436EA6BF8EB62D784B01D5430147945BC09D1F49EE89F2E
3E2B8E6D439248A56F82F2E03EA5C7A922F2813BE6538A3A423BEBC55B345AFB
3B3C125306749E137C647D78028AE1FBF3E1A82C260132832A9668F454D39C41
736717DED0A99F6B11F005F0E1D07FE84713AAB4C042FDC166AA146D7B5E9198
E4F485BE5B135EA281FF1C1E616B5AAF02771F58C5840CB5A427FF9794F93E94
17FD799C78AED1DC4810BCEF4C6C51D3C1504EA2C6F2B29805B7ECF97B5F637D
FE92E168CB9029E90404CB54FB312FC7AA8A9F2F524C03E61F03B1E31D4F061E
1677B39D5D30C9FD4673E1723F4AE3CCF38593AD6D7F61E9DF3C010E51F25085
35D51105E1464BA146A78D7297D4D310AD91342A0BB942034A3EC0696B467367
3E39D202D637E6B14D0EBCA6AD3CF22B07D4CA69C0FCBB6C93782B2F0DFC5AC1
5D8A16CB5EDB671A0C1BA9D10F63CEAFCD0E06E42C730C8EF769CCFD57937245
658F486036D37E8BDDE5670A212FB488A8753322A5B170C9662750AA958C0BBD
8E97D8239D2A08B30416504DEEC4E506013E037C91785C674F8A6A44E23FEE6F
CCC00CC5E4D355B0871FDB8ECD64F70EE32449BB5D6F84F8C8AA2D5B1A489BA9
D7FF2DBAA8D0B84054E93D64D3E77850A3724824914A0F821EEC3D605DD851A7
606936B8B9E24D6E932E16C448140FE94DD96C75AECB73850035ED9C04A1D93C
64B21E7D4657E030483EC5C3554AEF8BE4D0FE5B9743B875340B09E01273DAE8
F256C50A1A8F2E0417440A8BB0173F59E11523E1CEF2593A4AC5AF2167627B00
C5EA97D125EB8A4BD4C372877ABF10F5B7B149D73787E0834BFB3084E9508DF7
072DD71637019599252059738D4D6BC57A9358E4B14F6AF9C4B31DB8E25C29B3
7A15F9953BD73ACDE5F0445A5DC406BB4635FAE51C1D8202AE31730E6F355317
1DC197DB0B6177307C60E5D38F4487363EE051B2E609A52BC4D45B14B6558B6B
5E1618748794B8340752CDBE7756C068975B559615D4CD5A97CE30BAA7B2B1A3
2FEF2E055232B24FD8A21BECDE1B6A479A28EC80AE2CD16DB50B30B4A6CFCF06
491C7CD5AC29FB964D4846415233947522676DEABDA0D9535F8507D33693930C
B4E4240A02B0CE7EA288516B8A6EF908D7F8BAF9012D052C6AC96D9F8F6ADB07
8984F3559C5E7E3022A957982155FC9CD599C74E18328D3AB46F9DD15D1C4C3F
9B93ADB4489BA02CFCF57DE6270F3AD2F8597BE71786510EF08142F430EE5568
4F9DDB792B7C46B6135E341DBBF062FBC50FABA80CD4A384157BAE57CBEA9781
AA4416323265168AC097DE7E30A0D4750143A4FCE70A863A31876A8FA5327C3E
36E89589E363AA2B1A6E8B09F5AEB8FFFD0396067173465B6503383DE517A6EA
88C0FC08578398C2A721E5AEB29F4AC9BC990A50CD87BD35A11F9E81F68E7B85
5E5B95A4F9A5D30379EF90D78E1E466DEF867BAEFC4F5ED2C762BFF099C1C2B3
5E0DA1C2FB33BE1379413CDDB1EE6BB3A495331F72F2FAEB8152E8AD5FD334A8
AAB0082A71D5574B618EA8D487B8FAF1B445F3395B1E21224F5492A0E06F5152
7726835C900E2E52BE3B7B654183AEDEC68053DD0AF19EF6DBC10B6FC08EC7D0
CC0E2C8FAF8C9A4C21FB7C34E074BBA4EE64226BEC8C928A784C1BEE35B72EC8
E9295240B29DDC2539CD118BAC38DB3917D14CD33AB45FE47E827F2A2B193AFF
53C5396C52CEA4F43F06AC2D08C74CC85D608CBA267175EC31311EE25AB48DD9
FE811B411AE426C9FC0B6044D1EBF130231623F1566CEA4D1C06D8032FD9808A
94479C842BC41B675CF6B90113BD681F8D43F51D5016D80EDC11D7640FB950D4
E709A46184406ED90D0892A4CD9062938A8205697A200DBE1F38EB166EFEA0EC
4FCB45CDAF82EA103DD6FDD03D146F3E42EDA6496064DB3F4FC1C5280C9E604B
D5EBCA08BF2AAC90156C11EF68137DC76502EBF216F3AF3EE30DD2676D218428
F41C655093F8B530FCA378B5769F262A6FDB4B66B83F18F050E77227E28D71F4
5F4425CB8D51B3DAE872CD86D7804F870BC564A6DA1CA13EDB00D131CE4F6460
7021661B99612629DCC20C85CF155EDC5111E015A77B0B82A8FC1EBB374B7EF2
361419BA93B857D5C9944BB5B4AEDD86ABCC261542077FE09701C96370168579
5F89D5AAA08D700E2643E88C2FB8D1D56D37AAA9744872E7C050B4CE046B47A7
83F224FA9FD311C955EFBF173042C8FC66524135F579B1397828870D5C9DC71F
8615FADE2A1CFAEA90F732B6C266E2F3048FC43EDA7A6B6D98E9DB793CF457B3
F5877E7A055C92B0246FEA8C72B3B3456F93BF36E2651D32CD614C3AECC0B4BC
F824C8363E593A6458D37408FC5B09883B280005DD24123E2D4B1B85F4113327
EEDD9186A4AF2CD6439B46C5C168C125CA80F9EE9E68906620EE126CFBF26E15
B269838A54224EDCFE2A373EB750D4829BFA410DE5F1541E428BB1E024AF496D
F5F1C151F5A645C8622F2EF9088D57A2811868A8A8BFCDBFCE3ACB8463AC35B4
8B6F44E1C1232805842F56FA468F81FF37D5D55B81CA56058558544C142EB3BE
07CFB1F75DECB1E48C14D6AFDD455989AA6FFE8B8DC54F462B3C20E31D270BCE
8E68E2B43A6625AC7E9792704FAAD6CE8BBE0B341DA7189EBB3E9D5375B27FD4
12506D5BCA50AEDC6955E6C3C7BAA84BACAF7ABDF3A270C7734EC3C6EC22793B
E67B0E288F99699D38DA8B79F2D21DD97945FBDDD132A8F0BF947950D3C0B4AA
EB7B2C435AFE54489E1930610311D718AC610C21A644F34CB2D1959B3066F39B
EADEAB5CFC6AF4D191D86B02402B00D1C5262707861C5308730579795EB53207
A291A27A8B5C4DAE0A87A0C6A260026CA3CB620E1002E066A515D7990F3DEA29
0FAC962E0B82B7A6C86B1EDC54007822BAECED673FAAEF88C8109777EB79A53F
AF3C58546974F2F56E70E9B5CB59ACB5C27CB01895557B2D82134D7F02029B24
3331621F38E68717F5CB68A8892D0B9C0A8ED4F8BB56E80505170D44C6856128
2DED0254ADA4875CF56B4D97372AAE730D4C77A2940DC8C178274DF88A9EE037
215C6FE7B9D481EE4DE809B124C0270782411ACCCF89906A8B143D0BA8B2CEDE
E9B90465C3E57A4FD9AD2702323450256ABD09A1F8C26F08480317C08B75B720
70A161C99715A35A94DD5C9647ED0F8A5337B774C8E54F9653AC859485A1FED5
37B725A7E4BA58711CBCDA6054E34CBD8E9F9460179DA7DBD243D81A1531FDDE
BF2BD425BD9DBE75EAA333B1F5793669A215549A774597E6ADA16D323FE5601A
EDA41092730009A99BF5B5AAE281844A6BF3292D4D4EDE36B4FD8BCAEB6EB72F
AC5D3CD53D0D621CA9EA8D254FDCB2B5161EE9E80B266563F669805A3A15271A
0753983004A1ECC7FBADF62AFEA4DAB49A178C231759857DB910668BDB07CB3F
7E8EC24901863088B3231EE3FA563924032C91CA9D68DB398F9BD9AC0C651EC8
9051C9F709CD784F3FF5951DECD7E869ACC34B83AECDB011E6594347855EE7F5
28811F744A4BD70D4E9077EA7EC19FFCF612689F12B34332857AE41F13E6D16A
962DB9B6AAAC167B9FBDF0068EA13412F318384134B29F3F0C399F1973A3564E
F9C3C39B5BDD4C98D81A6CB476E565860B50704BD65ABD630A5F1372F2D826F3
3AD47C08B8AD3176A170C369EF3CEEB190134006D6135C5B8CCDBE1C11FFF1EC
3F6D8C46E15C4F5EB9ED9F31A129594D542D40DC3815CD075A0DBB648D868AF5
15A05C4BDB28BF23653A3AD96CF6AFC065DCCCB23D5D9A945F8CBB539DD3BFA8
DB8F1FBF9B6F25B41EB4309995CA3D5D6ABD70CBB4A2F0C6364E5439AD1045FF
72F6B45A30BD3A548CFAADDCC6C15D46F6D783D3E520215751DC98335A4ED512
D7D19235CDF911CC69F3CF4365B678EBF3E87C456A4E77339C74930083445588
462529C22A96A28C5CE87AFA0C981F26CAED5A1C8DBCDDA612624DBE0373F026
465185A4D8C73CCD8D71EE97116F8F7D341B87FD78F9CCB9FBDA2A7799711607
6BBA855AE9D5C505870DC85FDFAAA130A351D56AADBFBD6A7D52055E3200F8B7
8AE9A00092B55DEA8BDE224B4BA7FD4A191CB1FFC4CB995FEE1AC2883AB69E1A
AFFC09AB5B9AE311A030A5BA05E2213F9BBF016C8FA80689C069314D91274B20
53FCC65C7D7B3A7504887525BFFA060304931672A078BCD7F269595686310E34
E1ECA868899BC402D17EC36CE40D5041D7CEDA77F7764C9D98793F5334F574DF
E93CB10A5E8ADAE95CE63D2339557091B4B4911A4987CF21B7F1DBADBC2DD605
8EB72473C1F2EABCC44E0D0339EECB55DA74085606C3F89D57ACFBF5755A5395
CA8D4BD47E4EE8D8B882D3AB31A1F0C62E74654C7E041E4FF2693A38A9796064
46526B0A37E6B5BF8E48E80EDEF81E34DA8F6CC9025936A4D0E6D709D61B7B5C
AB550397117F3F9D2F5A542A64DEA8E1178F7337124D6B56BA92F659AAD694D7
391028731E01284BFEA635314A8DA8DF7A34EA3B6B2F8803BE6DCB423A9E8015
55EBD90EBAE8A00298B3B6B1C02BA516AF528122C1F2B07EF69F5466C2C36643
0D665D6561705509B7582D8301AF3C32E2F3B9433E3E04D62117C7E8A368BDE1
0D4DAA1C415B2A6573116D2A169AFEF700A83F55D88813585E89C94C07802BA8
3AE8F9BC3CDBFD9C2E35D062B1FD6E79E1EF104FC70B0AB09D12CA027F33F85A
22F0ECBB4AD55FE8C616B82C46CE69A600E4F767BD7A9C5F9B37A3196B038384
5DEF76A8884425FE598A63AEB19FA698C2AF7CAA4983CEC789268E22BA051EE0
20A40633D22D8F707626ED30E8273EAAD1C065F0B2E1718B5AC853ABE09330C3
B0082A71D557169BC1559B6D285A3499D41C4CCF1F74884EC3917EB9C574371E
AFE8578DDCA459B8D22C0188A8D150437B05FB92022C95EB6FBCC954216B5FED
CBC7C90B9A1F061376A9840FB64390A6BA99CFC8279A86A730C6DBFD14C53C4B
7277D676BD42203677E9ABEEC8C97E13DAA626474513B06F8734DD784F2FBBB9
B3B448B8E8221E380AB4A86D3A683B86A54129519D50DD4FE63B30954D805CED
A9A5D9A39C58B65B08E1C19555E927C6DBF7FD07252B2B57F62B905D6B488201
213D106A41033B26FFBAC2E616DA6ADA6D560BADF10E68872806CFD6F6E19D7B
57CF1F7A030A7BAD374F16A977E0ECB8742D034ADAF9C247DA19C8AEA74EF6CE
DAFD6B1DC562FD3B77E4D008BDE4D8C7FCA9895DA1AC9EAA01C32A0DA712B082
9438E77230D38FC4153E1711417B918BA6CC03203A5FF082AF880F48518D8271
C1121E4F1386B30A7F1BC6F10EA98443F8A65C867A109336B808BC9A8E2A75AC
F950835AA84B56F59DA4C8A18859C3B68F6B6DE09A6675F639EA9107BDB67B0F
54EBC564BC2D781B61C14363A54956BA78A2BB89C9F966C94EEFC29EE9F4E23E
C0BF750144DC289F0DEE1F8A25BB52E54F656FAFEE4BD2DA57E1306BBE648051
1D0CFD6A23A3DF082E3CF13197BF1B7FB22B2CD427BB78F455C9634DF989DC90
7BB2AE247B1C99AB2062855B2948341B0F857ACD750B59E370A6698C6A1F5287
72A4A9628A592E313956C242DF8277EDD2F1FDFB07CDC104275FFBF796D7518A
DF49FF3CDEC3BDFF1D290C382F244DF18005ECDABF0C5C2C64EEC4383E2E07DC
5C82587C071E59B46B7BEF31D268F39D9B12D534344FBA515E9DE8F166FAD1E2
7D1558967AAAD3829D3F7EC6938D20E5379F414532976ABA844D97A5E9078901
EAE4D0ED1F4C7EE7A2D80D891A5013D6409A38ACFA497F5A169EB7F9F4890DC4
62FA6A89EA48267331F086992B9CA9305E16611E6AEE67DCDD588A25D37F45B1
0DE75C802EE021E574B64B3969DE2E5061ED9364B646C38D4BBA86802CA6338A
94E135D2256920EBFB1AA22D9E90C7D16853F0DF9F2D942748EE540E4FCE63C6
5380D7AB4ADD6CB00FE8F7867E4862D8DB432F28331428CC350CDF7F447A65ED
D7683ECA35A22ADD06E9FE6BAF060913AEEE7B2B8EE4798E437698CC9EB2428E
74CE73F84D0D2292DE709D71FFF8901C3505370E6F1D4E28E6B7372492C65A88
159371B1D60D77CEC93B272B6C5394EE1D2EF9969DB2838B8E128553879A1BA5
2884B0A596E8FC3D1E648B7E26A4AC57DF09B9CE09B2F91D8CA618CA52AB3DBD
D005A56A420366069B73146A6F58E88BA49671A1AB7C2070C3D42AA770285143
40AE7D7868C0E1993506B07C086AD7D4F28CE2D15853FC5FBCBF9425D8012B9E
DB6E1E5002517659C8DA69DCEACA94F368537668843D281FC11782F1C5F71977
CA215349EE6F20565DE3D8D8212A40E1227A4B22965FA64A0B02C62BFDE97E6F
C3C54FED4057EF9D258C42D7440C78C5E0CC58A40DD74ECED4152F70A93CE71A
1B3A57C46F74A6D27BF98C97CCD31A8EA487260F224A3E40F52C65490AB4098A
7B9EEB54A5A415C8C88568F7D9EFE74BBB785FA18AA27D9201F28BBC477A20A5
D1307AA78EB8C7CAD409AB64B29E4115E45F5FADDCC80CA74B296C4265A40614
37F2ACD8386AC0202D6FDB6711E8CB06442F209D781E940ADDD6D881D4F8E874
357C533115923B90138FFE31D3577C6AAE60D768970FAAB682CD0DCA3E9A9A68
6393E4B772691C1013ADFFC90C508D51B02D2518ADCC7E79F7DE5DF9D18B8435
6129064DD1A3995E5A6F45D78287CC10A0EAFBF47223494C5EA934B1BC2F7C53
686C5880303F9E3ADC8B100D441D944686E1FD811C646C6DD0224F6CF55FA87F
D132EF50450879A25242A18683BD6D0266F8F333F3768D1952B0F32AA75106D8
EC0AB703F287E847CB91FFB88CD9DA174B49171822BDE34621CF41EA772230A6
3088F8D19CF2364A329162D39E166AC728B267758341630B00398D64538FCC4D
E3E6CF103794C29AEF7F7E56970F6B1ABA87DC8D23E280EDC77556593D02DFF3
154883CFE4EF04E07E7539A4750FA1CF1A994E99B656E728D140C83AE1F196AD
9F049188A4184C84556C0476BE46DDA8ED86888DDA3065C5091D99EEEAC43092
40B97ECF9E6EC8F51ACB40869E5A6E08A0BAB6B7892A232A3A1E688B81077DDB
844137AB35E862CECB9761D4FD3514C707D6C00DF5F2109C43785B93336E939E
B40A8E211CA36120572EEE2EA522F9BB1A60FCCF768D4D6E62F4F6521A7490A0
7CE1F14CD451B5A1D6149A6AE7D0F27B7E0E31F556E2E06F41340ADE94AF27C9
C8C0CEB284B103EF6D31C8DB0FE731362CB594A3D6D3F6FB52DA232DCFB65F66
B2FF61B4380D93ACBB9EEFD298C721836FAA01D50CBB9BB1893DF18058C3E806
6F38A5A43D246318AB662082852738821A8489436ADF0A8E8DB81897A0F984F4
40B9BBB3098151F57E2B00F69EAA6B079B0964706C97E65FF25A6BE176934B60
63AC35E81BCFCC2F1656A3CD8FDD30D635702D55069A4912F08F7C0DEE1DC288
DEBDCDC98A2AADE487FFE6FCBBFADDE0787EBC433F9B2CA0DF3DB5931C7628E0
3957ECB6FF8D8C3177A7CAEF8D06FF6A73AEC37849D624C32AA407ECF1BD24B4
42988AE5D9409FB381D71265DBE5375B06FFCD490B11631704A069B9A52A92AE
C75AC0AADD0C1120CAF8D24E5D467AE411905FA5E26B1125F282CBC367FE5707
BA6044AC6378A24BE69FE23AF2D5DCE46DEFB5C1F10F5CC4E832B925E7B28C44
8BA606E716995E46A7DBCD302988D5643ACDB4EFD760D0B2389145FB9D857FC2
272060104439D08EE93C424875646C0D84C8F105CE3C36B840D95F0C13A8A047
D254E458BFA999AB393D639CD3DC58144ED58B59117A4E7B7BAC1C377C500793
DDC3A6100BA306C16057B88B0393EE69355541810FEA870F3749FF44A1C13F92
6EA8E01E94BFACA608B735C47FC3F97A4DA5C3BB2DEA9CA6490560FB316BE5FF
1A6C37A78A12E3D1D517B6491626E2DC94E1F5E75EC3CCADDFC18C83B35DA750
A7D5672C6020001CC55288EFBA0B7D79B7329A7F6AB7DD3E93BE60C3B0C8CDDF
E294BDE7E3790B4688F425FAE54F9BE7FE57C59ED52DF91D30DC4598B09E728B
91132286A884478E9C4526831CD12C031D5ED5A7949B6C35BB7FE5CA77358F6C
4108760A316D664591E6927F0A0651581DD0D4CED6E665C6B2DD59AEE3D38B42
E654554C304F4DA159D145BE86B587DD2DF753D002F338AC6FE2CFB88FD002A6
0931B990663715EDEE1CE300675C11D10499B63B6DF42A7B750E59E6CC257CB5
6219FCC07727DF063EA9BD22F7326DB26E5343D25B5F180EF5F4F7BD88EE05C5
3CBDF56DEABEDC2A474196D643AD88F4A413B85004C6EFDCDE9F86E3433163D0
361BDFAC6528B379924A427C2D9C47B2D497C5A421BFB22F09606426E58914D9
B0AD2AC8C56005A3EF34A6CC3EEAAAF71DBE68644B0832CCC68C5F01B5E07645
3C49F9AB554F64D7ADE125DAB49FB32AA42A5CE72E9280A1110FE1C2904672C6
C19BC3D5DD6A791071EBC06C6461FB85916215A1C542A883C4FA2F610C645B22
EE14B8A78A79CF61E7B6A08F4C8AD8DA0DE69DD97F806A0C2DF113FFBB30E5E9
CF714E3E64C547AAAE6841E494184BFEF3CC885A9674BD52884CE77CC4FE96D5
9C1AA7FD590C41814934E6E6B31F84D81D7D048EC8E891437ED09B735C1F48A8
838DC2584A10917F0879F8960A8CE0A60E90EB92BD9E6808BD63A7353E11FAFD
BF44494BD64293F59A00592D1C26F1887F81F6B802BE5DED52719B47A6E7747C
D418376DD513CFDF8F683DCB0143BA0AF3E9794AA7B4DDFE213B16C48A664D4A
DEDF7B745C54169A3C0E2A99C5AC8B612410D814A0944A1F0500A3A9ECBA297D
6F0F945B8C47F97FC7802D5922C0EC44031FEE8E475BDAD7D660A5B352DB6C74
0E1BD74ECA0E979A40870B8D1676EC4C3EE65D55250BBB2BAE2816B722CAF80D
BE3DC501DE70D4D35D60B799B9E2DCD6F9DB0D3A26A083131000F12A86145ED0
FBCFA4A70A54F46A9E1B1A2B01CF5880C893D04F714DD33E12F27648A3139FFC
3FBF73154BA78A58EA02A8FF3F16D2492B59D83B1ADB9AE34B802664E63144FE
5422E8F199C72A07DF8D9B0020ECC2D33D65DD5F2E70127945A65B262DBF1555
1ABC5EE11BB76CEA219CB772A04AF1F1629F48BBB2C9ADED0E7E0717B5EB43F8
9B6D6EBE2D4852B74D85634942870DEA27EB4250CE4232B88855A535C3B78948
E113C90350D3621CDEEDAB353DAD46B7A15CEBC40D76471EC166337633AAC32A
3A01FEC464CF81689CA39659C996FB8435ED02349884DE2EE47A501D7E52D6A4
2E5C01A1376E57DCD91DBA44A53A62C0E293FB702938C23AC7B97C1E04C5850B
DA9C1EC2E05B733F90CFA8DACCECC46A2B1A499F5BFEDA5052E580213CCCBA75
A04B6D7E659D20E09E7C2E6F0303B4DACD1D310F474E0B39589D5CBE8FF6F4E2
1EA0AA091057D68E8A37B599E1ECB099B06BD75F11EEE1A98C04C6EF1045C354
E0DF0AB193CED887D5B3BC1ECF170FBEB0BE92BC65D5019939F7F7B45B932360
D9001C9C424C5470207FF11ED36C7699A2D96EBEAD3F34BDA367323689CDFCE8
AD9D1DACB90AB83676BCD7F09D61827F62854E802FE1A6D4ACA51C29477C1D5C
BB3A4F47906AB49CA43E3BED83C42E774EB6AC82B19CB1BBBE266A2367413CD5
469B9A86AAE9D60612DA9BFB606108A0AFE5CB590A2E747721C838A4D046A59C
E21660032F2D1B770C6E7C6FC84B1F404ED7B72171392DB090EEE1E4F4AFD3D3
59CF665DD3DF32FB224236CA0D8413E3C7D05A1DA9E428E80F8E87A0E810CACD
E1CC1094D7B0EF46C97EB54F69009D3D7095C72FB43EB06DE28E66EA8AC24B02
C7CA759481F8CE7034A282CDC4E5AB5C22250A57E4D52190E85015B14964FCF6
BB659A2D28832DD1109DCF5E62D10FD35AA7A2CA4B55C40EADE5160332BFA595
8368C15B2526D5EFC9A41F6133FDB456F19C25F90A62A400F6CC04D5728DFAF1
2472619E93EC1E10F7C81CA762B0E3AFB1ED4BD0EFE1A1769F6A09675F9289A0
1613B435CC04B502C224E702916068436D731293B50EE27729251AECF25D5FC0
800761A6A97459C94A915FEABBFA9D7CDF9CA8548212DDBD6C22153CCDC9E392
FBA1FC859AB720ED35B7188BF04FFF2501D3B1DDF2758D6E8F0BD0A88270B7EC
80853D76E9A1DC4AD610E4B3944812616FC78627BE42116767265B07CD1E04B7
748FBE2CDEF193828801856AD201E11CD663D04D124004F9BEED1F8FD456914D
CEB5D1E88D9693232D0F57E629E989018F7CAC7367991D153529F1B991FC7178
69B7EDB6649D2BC53BFB496FAE8698930F67FB8298FA7C6F8AF175D5560C62BB
617C819E744C25EB3EFD39E672EECBF1D7A918012021083B676E09DFA90AF7E4
A2FEF671650BBA878289F8E720B387D6DD8C0A31288F1F8BEDCB0A1CBDA8DA37
ED67A630BA49EC81B78F52B41F118B13B641C72F3987A3CFF95CAB899275EB07
4B0CB6A2B221CF6D2135A2EB478B9314894FE09BAD28E2F525BBDC3B1AB8FA8F
FEF426D3FB985627F046760A4896A9614FB96D86C3B7D451C8131E39C57C9375
4EACB517F226E3373813F2D3BAD9414A4017BD465D5BB72E9501C724174BE061
6B55B1147525E3A117177C7A67910E11B284C6227C699393ACDE94BC7F9567DA
A0436C92BE9565BE63280F44CFC4A423BCE1E4C35503A4F2C06D85068FE3C462
01377C499D48048234321D404ECDBECB4BE65DF9C4F627CCC93A783F584FEF78
562F691B5E33F6F72C708AE64C4BFA34D66F68A400D1401CEE9A679A9F12137A
4EDCD3AC4597230CC071A7B79E092C8DDD876B72E9873D920EA7E973205309A4
E15749FB2A5B613BD7A0E8F8D33493C8AB2A19852BD063156F76E1C0BDB2B617
3A2D4E154162FEC11CCE2B440F4A706A4E57F1F0D930D9999C1C95CA2E756867
31382196CC557501892951473151E40245EB98D88287F2D649D0E7D1BDB32382
EC0D519BE3D308763AD47BD9F2F9238AF1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI5
%!PS-AdobeFont-1.0: CMMI5 003.002
%%Title: CMMI5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI5 known{/CMMI5 findfont dup/UniqueID known{dup
/UniqueID get 5087380 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI5 def
/FontBBox {37 -250 1349 750 }readonly def
/UniqueID 5087380 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI5.) readonly def
/FullName (CMMI5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 99 /c put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 109 /m put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB9CDB3B91E19AA95
B6070999687CD39CE05B0501BC0F19F4FCE5E19BCAB1989C541A47F00C4947E1
FD7D566D95445A20A22834570ECFD7F17970BBB274C172956BD6458D36A306AA
51AA40FA84AB99AB3D1C47256A2DC605467A7F2C77963B2D31C2CD1971FF9627
23D5B9CE163D84AD3071314F555A564CC82CFB80B05E31708542DAC587837E6A
8708B83AA4527ED523623419123FB743F544A691FF62C172E6FC42F1EA9D96F2
023DE87858FDA38BF3FD9E2AAC5F05FEBD28A5DE1E97FB1B03F6D7BCF64ACBD5
20083E062A50A1B86CD28E5DA789361A19511275636562527DA0CB8A62C0CF8D
8A46EA3505E7C597428C86B3B05FFFCDA0492897AC6C6F689ECDF468F49463DC
F193DE83E34D73E48D23ED37CC1BAC6D1CF6BFF1C6A0165B21B844326B418575
18E1D044C1864B27AF65AB4A031C767FB91D2CFAA1729386A7C1621D859572FC
B604B35455D870D5A757DB7BF44D9D079F4F70FC669A96A0A1080F3297B6353C
6161E0E815C054EB6709752A8C104D177FDB4962B988270E9538E944E2FF6717
6389DBFE95B71E95EC57335EEF4F3E8E7B041690F54039D546937028BD0E8740
A9F8719E08AD387878420EBF7D8D1807B6A594E98E27BE8C6314BACE9CEC94C7
D57CB34AA7DFD06477D62C981D9D686255817A22E3F49DDD47B28FE7CEBCDA0B
30515EE8EC56542A3E3E68B990E5BE8FD65B953A0EEE2B066FEA586C75E4978F
0A0357C0C37397AA22B9EC8D9081B44C71CDE7991903DD5E071B87D081A57064
A143042086EEBF8640F36E61D8A0052C726C25F1B3CCCC6A58868E00C30D5CD2
034835FBF999CCCCE1CA0ADCE3A4EE4A36475FF6D00E1D7A8ED65CB0213FCC76
AB7DA81B9A97FEF3A51754A48C76E80198A2475DB6047623FCBF2CDC827229A5
C1DD7E79197C29CFF591EAE9547A1B21D381FA04D80E87F41C9A00A71B5424CC
D7550DFE38CC7BF2B11B810FF09DDC48046BEAF8EDE7CBF8847DA0BD5FAC93DE
09EA6AE97B193E9A31F1174C337C72F4CE28CD59ACDE969712C57701EF3C48E1
38C650DA766470DBA252DD9FA657F7738D31A864E26A89C0618EB611B36B321D
C48CD0F10C4157E210657C6CEA4BE0DA047F414C16F18B8A49E4E783164A83F5
E59040752152EC549ABC2F840ED955F90188E8F91E4F4533CB5F42478029B90D
76A996EB3D99BDF9E1B3019AFC030536449C04275DD78343702CC302461DDAE0
9CE2AAB36414A34066ED793CA7313767AA897AFFF6676E1AD5D4E3CB3C3A66B8
C5E91C170C41B7233D544D8EC3FB6E7E6EBF4E1CFBE49E3F00732256EB2495AA
9D206A20E902CFC57ECA3CD1DF324C834C75DE927C473650E4FFB299509557C5
9313ED07F343B6B4FD9F3DBDA9B3242756575AF54DEAA7C6DB9F1B9E1128989B
312A505411EE636BEBE0823610CFCC7D347185E09CC8A1A78CAF7F20C9668C91
0DAC60D889D17BFF3B7AD694F587ADCBD4E48F36DFA34FE98CB2E8A17929A683
0B66E005FAC311AAFA9814DC9CB2DE3059E0966106CFDDB18035EB255906F843
C8473B5E66E8FB4582FB72BDA4F4EE7A8F3A178F02EF1264C0692D7CBA2B1906
DC27331F86B6D88D3233FD74CA88D7041B4A2025A7024F467B64222ACAA24DBE
112C83886821994044EE5800F1F81F7F58ACEB07D15E22D38EBEA6F5C4F7896C
BA2EC301F8FD150832966A0C46EB35ED3EFD0192351AFD1FB9C394454BB1FB79
2BB86FFF5B846F412C1D28C560C00B1FE876684EC864EA6F88E7B095CBAB2B26
29EB6928961BC58633B7D5A5746996C3DAA6FCBBD2D42D59C1273B786511AF00
B60B0E04C7365E4AAC4AC20288ABDBF0A704B6F7CA2D9FC65CE4AF36A5CC463F
F97844B79F772F1E0C6F4A6DCD7AAEEF16A4ED9CAB55E692586C5C9DE8701A3B
111D15F99AD44A3F375E7C4A531020E9AD5CD77212BAF0F9516B7E865F5F5042
50524EE6502209FA562C94AEA4555F868C9FF68368EC6C2E52253E0C882132CD
DDBB83AF15DF29B2DCF516A004DB97AA9487EC2CB1B772E8C84DB1B82841CE64
D4D10FDAB7E162E079FCBB9D4670AB4D2F9128E48183A3884EB8C74DEF7F0E70
A587A300CE834A739244A237936A78D31617E4F8D298EEF7A783BC573BF464E2
9FD1F0592DBA4400AC25327DEC2F28F8EE0CBD17F012E9E15FFA98CF1F1F9265
C2E4B8F3ACEC102196B4F9F973D747979E38DA36558D6CEFF3538CA7E1427352
CFCFA0DDE3C02A42FA39CEA5DEEEC5F3F7FE7C1B1AD98D51446772195F08FBBC
D8CF46DFAF7D78A43B70F9B660406BC43FBD32374C022C3A58CB24CC43ADBD80
4E7AD6C418FE43DE31176B9128496C331085DBF6FA883042168C0FAFAA9DC403
7ABBACC2B18922C4458B49FCF241C0399E969937A2779184DEC8AD5AC3266E40
3E81D9B9AC5A06F9DE81785668B2CCB9BAA20F89120C9EB9A5F4CDADE6F67C61
C5E89C6014F4772FC208723146587687F8E14F4E63F2FC952D2F9143275F168D
B51AE0A66333D957C9D5D7253A2362C30A0219219BCBC770D9FCBAF0F7F45FBF
E85CAFD899BBC1EDDC416ACD9A7F83711BDEE28A683900E672453F4527F44816
1F284A4C488DE221333EC9249D1C70C3FA41F37924B813A3C54BE3206349D955
8FBC6AA9115F9061C9674958D40EA2426CBCA704E0AB35190F473C72086A2B2E
DCD7E6C1CA9BD9D7C0C2879E414EA6C61923A60FDDB53957680DD30951CD3B0A
6B743B1E7952601F61D4413C3A7BDA4CC1C65DA9D453704A1333512560B2EF09
C2D6D34B5AD4AFECB4A07A7DE5122ECEAF0CACFCF48E78F440071570E3F171D9
96E2C6169DDC77A3B9A61D5188428B035F8128BA909C26B448B6C95FEB52707F
AE0687C3987F75F1BF90A7F61D0C492C49457B59271BCE48F3FEE78E12D3271A
F5A91389DF2ED566990BEA84AB699B3651B2E81975620CEB607E2882F7D29ED3
A4279439107AF9AEBEE47CE85DE5CE9595A96A118ACF1EB1E935E2251E0E7F1E
D675E5D89D501C9CC98EB274B6B00B718D3EC50EFA7E170F2DEA2A2D2C8B5760
E85A1AD504660A93140BBAC19A48B456B3FA48E05776CE9DC05426520692922C
4AE3FBFBBBA2C4EA2B92663E8D316B9D5E733E0F2FA092F24AFC98B5D69063E9
8AC28D6EF97D3674C04176197050E49709D7558F7A32843A2278160DFAF9CEA3
9A0A8907B19379083365EF866E2272A9ED2B662614C57F81DDB145E9D460A572
C573296761CF028B0CC562B5C73B1933F0F78935DB0771D1780C698A874290CF
4F3D2D0C000B9A4077156A0B15F6FA23CF70586D3E341796ED8BD13BE5CE69DA
D169579BE16C6BB5D74224F380490855229FA64A762AC6BBD0D06ECC13E57E56
FCE574D51744431CBC8A369698B3F9BE35B7C1BFC59FCF08C04E3554703230F1
2ED2DC4459A256FCA63A759407CFC0B4D8950852BD11D9D631DD0B1EA09178EC
B5C85FE885F3E048355859AE345B73EA0C9FF89DDC31A7839C86CE36FB7C9C65
33257339FE7DE8F9826AAD599B41B8AF40F47BEA4399B65B7E114FAF14B9347E
4627B501AE9905A4EF4483551D8D5B5F291CCC25506E38A5DA92E127FECFAFBB
F6BE02A63DC1B5090A11CE8700402A53B9DB788ABD4910DCB8F1D0C9FAD68668
0045C5EF2F0F5205F4A4CC2DCF43479DF053E2DCBAD3AD3EE779129E7CF4DE95
34D03F05FBC72CC02C5E1BF394AC39530D93C70739799B7E2FC84D99EF7E636B
900185158DA3427B30E7EBA29CE9657D3103060934EB58A514F6CC06CA0EF378
2447416AD37A066B63F2BBD53B06BAC2C915AD28CAD86AB1725BDCBC12D0368B
0F0DB1885ADA0B4214F59DFD86F15210763091E3E5E7925A39F7C58DEA801563
198D8146DCEEB18EDE7EFEBC5610208CDF7D42B23E15AA911BDE63C0EBB78D9A
DA13B882064E1861DA9B4688A242559ABB1BA404A516A4C7357D18E4C7AC7D41
878E2D8682B032DCAC20FC72BC0D18F9783E9094F59D3A35A977CAE583B5E517
4E8A8C991E5311533BFD4FD0B9B7DC8F129705509D194DA9F18135E7B87DDADD
D06929F6D65C8AB18895447C4E542CAC2FA8DA064681418E49807CE61DB77720
4D7538917F5D113CFABEB51A0E633DA5ADE4D3A09462D2E4C11125A31C3ABCB8
D2905C09E4E91D11B92F405696A4F1996282F44F34A19748121C0E86C3DB2CF9
30073205E35702C191BCC6005822AFAE9EB440CC7739C51D391807AA5FC768E3
928AE0860D52535397395FC31BAD93D8887146E6BAC26891DF852FC5E277C3CC
45A9784386BE5A1926AF84E7F3BF380A5ADF32D73CA695FF1B78215F2D2349D2
B1C3AEB04DB8B11A611682E7F4FEDF08716A801D84D47FCBB5FD4E9AF027635A
74E8C12F7AC159840DD60728DF43615BBCDF8EF80B1D761D34ACCD561F5AA2B3
15BC21A4856032E4F9005F93F7FB3CA7613C32E67D74796C5C819457378FD94B
89E45341CC2B774F16C035079A741B0D2D54B43FDCF69DBC30DE45BB3695AEB9
CDA1C7EDEDBDEAE0079C5FF03BC855E5F5235CDD99A915CFC78373A4604E8E66
3426FE7AD92B8FA0FB0CFCD773434B5C624CF3DA9F77315F0C58D42CE9180BB5
2D2B7DA554300CD38C592CE35966B1EA45638CF064AAB4CCDB2CF3ACE7A816B8
360F2F5D7EF9A36DFF363B87541744CF36ACA31F9B17872C96B8214740C7C0F0
0E251B4B3306C443487F71ED324B4896231B91F909CF28AEB3409DE1094E6483
E851326B4CE4E56DF03A929913926A8D4C52C7DF7A6F7EA62BD9343AAABE9BA5
403678ADBD2C125B5DAA08EC695F6448373355FF5B91A4FF16596A5D172BB3FF
7CF9AF0B6A744A2451C7399E969E6E5A9784B9195A497B43304111165973EE28
3EDA3949E5D891E1EA363F8A8EF4ACDC82CD14BB931480409A5EBEED54CF8284
55FD70C98822BD9A31523A3C6A6F26B0216C07B6D63D3CFFAD15A1B83BE55D9B
4008654433D80F11754E4B4B09FB22569164A8DE5669629E07ED1ECBFE365287
690C6F21274ED9DE2156D06AEA66A323450B29E4AA42CCC9C9261DD499FD33E4
A974570C690D2C0A1367A7487D57427C01203D2939E89A1F18A4ADE84313A2DA
B12EE671E3B42F44F6B32E12F4F2E51479FA3420A3A13087D9BA76BB1756AFBE
C4654792600D79BF52A32EC8E02587753351AE7F192D08B7EA9314FE4CEA31BD
8646E59F96765073ED1E3788C8DC7C0AA2892CA25E5641B338F5F207D37B2757
C7FE8E52649C38062566E420F8F0A6B83043F758DE906CF91413718028C9675F
5E0F7D09633361EE152116C675BC3A90D807D3A19B848DD34BE3BEF950287C7F
021E231262ED6A134208AE2FCB90B7436614D8BD33226D8D519F8F3F494ACBCE
32527307BA114CF02BC765387DF54BC1E231CE3F51D09F7A9178FE80A62D8371
533508ACF5C454CC72400B444D177A36B9A096489CA2761F1CF1F7C788A9F7BD
334A5C24AE6A648EDC740E36B28D6752EEDB64ACAD640CDD66CB98448C7CE7B9
8EA7CEF9E2A80EB270A22ECE1EAD0FA85EF5E0C83AF23F0B4E4669AB41A6B427
3928CA4421E216A4346FDCAE5D1349809C97D059A2CB6BEBED01CE0BA1754863
100D49634FB84A06CEE283104046A90396245601756BC39A63460C2660F54589
5A690DDE53BFEEEB398355E0FCBCFE9CFC664195CFE5BC9C4905700FB9FECB7C
6E644861E81E0C0581130D253D861801958F04A543EF20C99B52E246139B8D7F
B7C78E1E658701FFDAE6ACD2A7E79FD434B1CE834DC7F98D16048A2964EBCEF4
BDACEA4E6FB6EAB3A270FDA758BE633995D1A39EE148ADF8A169173F877089E9
1A560D068ED72051FE7FE1D6C3BAC81EF265950598475B84AF1486CFC55D5903
3BE1479996B48A6E9ED904C66700DF63029ECD9BF1794BA67A7C0A005B00DF52
8A6A0374F4E65CEBC1CFDDFCE3EE53B57D78203D72A0FD5F9699277126B4A5E0
70B9CF50FB9A46D0685B563CDAA61EE9903F0079B22ECC56F0BDA3F1930FC6E4
637DF29BA68C83DE60EC2AAADF31CB46F337126706EEFFA0E8DDC29E5488C2C3
E89CE98157CF908EB04C55ADC7FE853E152E0D963915F5104834A9F73E0EFFF0
BA20972EDA0F691CBFFF3B0D379B0FC55B77E4891B7B8372F5F79662E610AC3A
7A02E99A18D5E87E519C45CB8CA3AFB38A74AC99214C1A182437C15F57963CA1
60709AE4D7A9527518FC6EB1ACB5220932C53F8C1A0DEA53B1716A105922A90F
10E116FDEBCB7491DA52872EA22B8280595120AF86B49759E5D61FF3B39D310A
68685F464915FD4B9A19F7F797BE424748C94F4636B2AA06C07C4A4CBC634CF3
04E5B400E7E4F0419B112DDFAA0C4758560F83D80A525C09B67B5906D65FAF7F
6E5D42E5D0AA0EAB4C189E34CD1AF532F27AFF45FB1B954B3DCBCF75EE60A9F5
018F023784C394FFB581FBCFF4DAD820EC8C64F08360B26A89657FD7F50AFDEE
FE8179573A3CF350FB4D216AD4BBF496AD7A9191941040560854A5A22F2DD997
0B6DD21DD3EA8EB09C49CBEC6CDCEEB0BBB1B88271093BDE64DDA024D67F098D
6C1998506DDFF7907AF00E4A13A0E7C93046411CF6B38DB4AC2A8A0B67A027E7
96725D60A0A50B983A1541C18EC1999A99D7AEE5688407D62BAD5B13725AD3CD
0243D3EF4FDD9E409795D8022D4063BA844909C67ACF82AA9CED304D5F84A9BD
1EA3C7F5D2A7BF70766158BFA2BF63B3078593F3EEEDD0B6083B6858AB0E3925
8588CCB7BBA9438DBD430AD29F127063AF4B9F05EE48507ED3CA9D232187D3F3
ECF6B44F723CA243C91BFA6CBAC2D055A7DE56C0038114145FAA7D6D35070A07
5B65B916EBDF3A8A76849653DFAE3CAF9561D85CCEC1974DCDECC6592040CC64
5745DFBA8D9BADBD4EE85AE9662F32185133FF9A7E44D66410BDE8B1BB1873F5
DEC1D8341D039537358F7EC07365A462A58013C7072979A427CDC52AFFFCE7E5
4D922702976973206C0EE5806C33706C59C7361AD626D6CE7D73B3F566F01F27
AA275388FCE7FD284B031E6E262C2511B3FB2D6B93E53332C2ECF4BF165C03C3
1E16D2FD363B562B17AF600E4EFFAE42CACA979C6CBD4B624732090878288562
D28DA255FF658D7B2BF12E71C704E590188B62B57234540987FAAA373A4E6266
1D72C99948D78EE0BA5F56079E2B75EF5612495DB6ECBE036E13DCC1B79D14C9
5F085D1CBCF29D52C7CCB0AAE0CBC720E909CF719DE6804AB3A2164CC5D2621F
DED2AD5EDC14F9CCECA26EFB9D9803197435588CB476680F7FAE7B8634DB18F3
061C5289F14D2E2136783C42F2AB2ED12973BC60AFBA29150C76C118E72CB788
E61E561574114577F8D14ABC37C23445297753EB71A3C330F984885006154BA3
E1A07EAA256B8E5F5EB5139762EB0F4A641B648B0D781DB48A55B5D15489BAE4
7835562F4B0158AA1C2FD39A76A40238DAC16668DEC357DA709888966E72E933
1F68EA16A3221BE420EBD5CD48F491BEAEFC0E9A77A1670363452518416CB3FF
BAD590D0A3E461EAD5BEBE6EE7B2A42697CFFEB22C6BF46BBD3EA9155A30AA89
7FD1F319335E45B9E6977E4D6AE67993F7BD617356C8476B612AC5F8103603CE
A940D6978F7FB59FF1123D8C3C49A4D94B1EBA8D4CFE205EB0352BD1CB601CDC
9581B8ED3B44B090C731EBB86157498AC7037239F9FFA8261CA99CBF3D382D49
F0117EBF3D9A4DEFC8E6FF39C3F4022F8E1AE5C8B8A9DDBC74642AB0267EBB3B
DACC6B7C00AB6BC3EFF9588CAAD1E91DE71B0B7CC7787D549409481AC250F039
9CCEB878D275E2E346171058EC303E62B84EA810FCEBB2916BE110C37AE06BE7
70561CD930E8AE76E353293F9F839797A135916197A48D453611484DA293AAA3
39402546DB208EFC3CE2DA145B6B40DA1DF5E911DD91EC9F234AE3452CEB3D20
4B6D79703CA2EA91AC3B5951B557D62C7728D6E3F13BE05939C2A6F9F170560C
0AB39BFD238A0859BA570499CAAA419F561C1C0BCB99679553C2535B4FDDE702
D31E2527083154CA648611692A2D022AA1E2C6D5FA580B6E77C2EEB26C6A643E
7C1D168DF865B4775BE5F71D4603C1BAB86B4BBE77B855707A6B4A6C3D5C74C5
2D718A2D86B0C9E91D82C2AEB7166DDE523F70B48D37C52368A01241FCE8B63A
EDEEC917A3C5481118EBD4082FF15FD4D2BE60F57D29418B6B3C5F03D5EA9470
34BF163C67D62FE7359ED7D6632610F0C415EF01B721C7EA2AA27257ED5A6F7F
D2B04DB5CFA9203230F7993823679207090C3050E146E67410144A520FFFB43D
E95ADEB994D805D6DE0CEC2A8C9FF511E8DE1A26F0476F12703FBCD087E332A6
051EBF82E01EF3F3E5804E35C682BBD20144CA69D45C94AF8FBC1EF724462897
4E6E5F4838DE4C814800527B30C5BABB4DAF4E9C3CBFF9C75DFE06A8F91F98B5
DD66BF81F43487388953F27C964E7FE98CED1DCC9BD0EC88884B6E8FA7FB743D
78A325C0B58B9ABB22AA5670A368395290A1CF5031E44B743D98E1AE274206DC
7F2D2104059C70BB402AB53FD2211253E80C4CE69AE76D820AA579095F73F938
05AAEFCD592477319BEA0A4CC9B4451DFADF84FE3F8B09799A4A4418806714D0
C9039401B3A8A0844349485EE774DDEBA485FDF417CED799FBABA02B9D5EEB94
20CFEDD863C5BF88094847F86FB13E1D613D0B85AEE076F83DE9B50966086056
A877AC2B9C75A185A2016E34F06294E090DEEA37CAAB42A90CFCE6399F583780
845F05FD39C9731CEC3B23B1935165572CA4E96D7B5739F048E9B21ED0F35C46
9B63D990100853C3673C3B8EC5E35D607DBB5666065C2AD3602995A0F84CC8FA
4CF369323D4C232EF293F7F31A8D3C70E8BC610160DAA7747DAB3DFCB7224898
4AD4659F6EB2B4A4DD65B972A90A7F6730F6EEFC0E6620FD59D972A66AB69246
C5F69AABC2F4CA3FB9EA5D90587D13E7C7DF6184199119A4C6580F88D6A0BECD
34560C726A4B121532B42A3D640B92948EEF95C118FA37F3605930297A4163CB
7992C7C5D050449081BA85678B6E0B9F882BAA2CD7B219A956D350248CC64C0E
AD80BBA7A007FFC8F4CCC4339A5C347A032554C039EE167A1D75ADFA299D018B
75CFAEFF46ED5C94B97A004C508D8F30DCB5C0F37C786576C5CDFED2DBEE3EC4
7D2D9199A94F13D574E5107D5722B07E2DC94FE05ACFF8DFBB285BE2E395780B
FDFB1DF4C5EF209760E723EF4367B4C98DEBD96517B3A7620EF64DA62389026B
13804A3FD5D44A51DE6F95E524940E3D52EA918E9A1BBFE76423492EA8C2F285
F9BD614A00DED362288F78FCF77ECC4FE2C1402395B44911D692D4C34EA7C9F1
3014FF2F93F76B2FF30B14455A96ACFFA8C9554D3EF679F7837387933DE0B952
7864138D7115B74EF6D11ED69B1E7D22B895BF21787CC68DEFE810CC6FCB506C
06DDFC2F8ED2708A1AA5BE5F811037B1790C311E99CB14D7EECFCA8CD09F0459
D3C9F99CD2416A74D190BFD455528EA4B4D3AC71E24E29E2B7AC9B0450152444
0958E68029DA8F1E3A6A4A39CB74BB00D85F75BF5F32B3AC46377B00C91D41DC
06597F5FD328C16E399453E6B2D74A0EA9A4597A062142571C71FB10C8E30009
4A01AB380DC054D85686EA5B5D998FB1849ED454C21502E0FBD085CD40FD7C0E
F258DD7481D787736BF00CDF2808C0500F4015650C70D9B9CDD731C4AD739399
72AB27B886BD68D0C2D0971846A6628328BB571089B35F9C401F14730FC3D1A9
B882895EA3B05F044C61825EE767D893C5734BFE52AC79CC601815753EE71EBC
2E3EB8FA538B121FBB2DABC169C237647F3AB9A60F324304770BF2B43B150138
E0144F542B4B0D89F68083C3BE7732CC07D3B52C88DD45E735EC775D12FEFD4C
73B3A3C797DAA719C78E4C624A7CAC319CBDFCDD968CE18DAA5269D89D638882
9FCF732268BFD0E0785D5C3B0BF5110B5E85349426082C83F130B3C43F46AFD2
17ADBF47F0AB65A2DC7EA491480BB41096485B74DB78F4AC4B780E65EB8912D4
67DDE93EDE16701B92C4851372599A9346F35C20A5EF5F850DBA310E7AEE41A2
C1061C5AFAE280C4F8B4834BEC0ADF20840B8A85AC95A543121F4005C5B80B90
EDDC064272F9979A432D74987AF0BC39690E638374BF0A09CD00441126ABAE88
2791DABFC4286D888CD957E4A1F8D3916CFF398F1214593776690FCABD8EDDFC
443CF9D3BCC9058CEC51B33A0C95FF3F6BCE12047FAF58E7BBC49B2DCF22B161
A49A887DD57E030F4471F909386F9E384148A61E9008830AADDD96132BC7729F
44222F4B6CB5DCEA79ED9A47EE9C2488B5559B19D80AE78E22C6C10E7BF74163
A9EE5B0AC9AE54E3B898B6A838C65F83D0983FFD4B91EA1BAF9B1518A0DF1B80
011FB695F223E3343C72DA48D9614BF5C69BABC505C3E5C117F202713BB4ECA3
F546831840EDDBC2709B48B763EB24374E381D87F1A1A855533524E5171451DE
03F85FCC8C623E603AB2DF019A00D6A0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR5
%!PS-AdobeFont-1.0: CMR5 003.002
%%Title: CMR5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR5 known{/CMR5 findfont dup/UniqueID known{dup
/UniqueID get 5000788 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR5 def
/FontBBox {-10 -250 1304 750 }readonly def
/UniqueID 5000788 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR5.) readonly def
/FullName (CMR5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE26BF1F487876AD1
16184ABCA7446A2352AB37C36E9C9BB67CEE105C612D36566FB459D6ACFB1DC3
7A59448A06EBA21F8824266BDD0ACF9E356251A897A920C39F1AB236EE06C039
8C4C0AE55FCED464E19AFAF548D454FCF73F6087102630AEA03E622AF2596870
1353925801642BBDC11F09963F4ADF037671B73D48CD9C209DB4D5BE7F4CB381
94887E8365D25C45D1F87EFFAE360104ABD3235E4D2F4BA163408448E814D49A
3E7C171B8F1275D49937C3255326069007B302844EBF2BC1990DDFF1A34C2770
A262ACCE874DA1E0002188D6A713C79D5E9226178EED27D6F4E4DC24ED2669B2
3873F42A48E5C1365AAFC83FAD8B849E5D7E52BFBB01B281005A9EBEB4EA2F35
B691489305BCFE5516DEFBA092F66ABCA2D739A9277AC69F74F786045E63B0F8
66D545B12B0581AEB579D5E1E2A412DB8F66276E05F131EC3B9F543E11F40FBA
8CC47071DB04A5D38A707C9F825527521CA1FC412FB54DBD72E912BA4EC8F747
306A65040671237C8FE84AB6D6157D96EDE13B3A8FBF7140F1A9DA55B666953B
C7FA638353F278D07066AB8DDF0DFFC832F7025DF1AF9F894D52E9FA95EBBEF5
9D6B97768FEC26E845B87C6ACF5395C75B894B5A1F50B248BA33943C5AD6CC2A
8D9AC65C08B3206E7F5E5913CD0D54C9FF741A4D92B628F85E43F52082397891
66E6F922E0BFA2E45F0072217011D4B8EB40893F151E4E2E92ECE5862C467D4E
3833311B08340AE1C0C692095AFB739E9B9A4F56BFA0F0B2AB8455A7470C22C2
0C2EC285026195CB73EE2A713ABBDE4945AFEB92630BF852DD4845FB4C9A8C8A
0C8C971F29440B4A786108D0DA1AEFDBE03568B6B2F3953B4D07A5B7D6FF564F
6CC0D8C08CA459D556154A45133BD7AF70C7D8F474DE66E64FA112D776478A83
B282EA4E941CE2FD6D8F7B68D129CE0093AAF7C1D345C3D65BE74EE9391C9B89
2D4D31764F1BA81CB12CE46D15A6BF941C9F0EACB4A2DECC8F2F6B85FFF490D4
ED7BB6C7CDED10F03F68282B2ED20809F95840A904020C98299E17C46243D9EF
05B5B8173BB2E8CBAB3AA9B8207A9EFE6366C91A7674DBCD9FAF12A2EF4B5117
5687F3DF1244F5439ECD8AB0587F492E990DD7B516C664AFAB76CE71084FDD70
E7F5A38BD46926615659488D3548C5066C06E443016DD40275CFF3105573117E
369C8C34E48BEE832D93F0ADA7674FC6F5A64183DB2B70FF166E02E044B7063A
41D2F396A9158A26D3953F12982ACD1D7593F474DB98ECFD00EAF57FAAF17C7E
C1E4775B37FCBCD6DB1B5BC6209162E57E21A6AF427043562D9854B430A0BAED
20D31A9AC334C87875E53E0B956D33111955459DCD98D54E1BCC61BA58CDB41E
03009979C0A541FA9F69B55D3F3750515E5F268A7B55254B8A44CA732F2B9242
18F34C029665B31EB68331B0147607645983340D15E322E3D0532E6376D40FA2
1041F7988EB9F56D83946757786737D8BB4A996EA7933E79BE61B4EA1115AA4C
286B7AAFE80AB7C619329AD5FA772A6279FE85FA6B623138FAE1C6AE3FA45AB0
95D8020D2EE2979E8A87D7E7C5DA2E6B701FEB4923F401F892D83A4928807152
96CB664018AF24E829E582FA8B4F0E07387BAC53530AB3AADF74404EB2F311E6
C6A70F960FA962E52A30CCC6E15097F9B7BF011626DAD38EDF78745B60C0818B
34663683577D897B1B6AEB240F3A2AA29F1F1800FE0A5C205B35C6A6438259FF
CCEC942AD2D7C3CFE01F956B795C0349DD5380D0140D3BB54FD99EEE5171DAF5
4FA360A740589A1F8AB4FBC275CC06FF89A8350F4982F87E747501A74B7C81A0
0F40FBA9D2875022DC3D417FD623D89FB6A0C0F1B930ACC2117C6CE94AAE5844
0B5C9DAD579B7DDB73F2B26B05E1AAE30AF69937722E8360987AC0BDBE305B5B
DDBEF5A6C03BE1743C518E6B7B58A85AC961B8755BF37688E37DE0632BBE06E0
53FAFAFBE52EAF276365A0484A1A682C9B9486CDCFBFBC4F4A1D6BF71378F014
56DDF9B15A5AE0276827ACBD9AB04D685F52A62BD3DA33BDC2A262B756B58C26
4F3B552841B81CA60C951F400551166C72B8D357D8122685FE97D14AC22AB6FD
2EE4CC429D580AD7B8D12A9C601FEE5D25C98BCBCF96C87FCFBF28419BEEFFA8
7A4FC7B6E5FD377EBD5E743C3FDBB7554A1FB9663B648B15C4119CA952A8263B
278E5845AB929942E1A0FC4CC413F36134884EAF3704865C1478D6988880EB54
C5C5C1BDD7CB0548342B9C7B6F94DD6341C5744A9A3C4A866F620BB70575EABD
AAA42E3B6E23AA029080B299294AF2E9388520367E964A3A66A84628D75F1BEB
C7A58C92EF7335F30BD0A26D072A986635318E0473CE3CD5B4F1BBFF6E781938
EE4E3C11AC27A1BE0C3B55586A4565E4B967ED2EE4674121A46DA1C32C5D278A
44BEB43CCA246B730D337918AAA394728814C726DA4F9C40AC6EE877365976EE
A53276A818CF25E995CAA34039339C55DDDE74B3C11742786C1E9FA5C432EAC4
E184F35560EA31D687D005843B02F9252C2A16F9E4C31C18D0D45B7D5F63D589
3C1FE3D33C912B9CD79DBCCF9FD8223FDC18D55762F0DB2DB241625B91DB17F6
206120D6300D317E82F3DDE6D2D0825547C08BE7E6FF8FB54D4DFEF2F4E475F7
F3838B4ADBE49F8C41409D85085DB5A030858AAEEA5AB9CD2D1172C8D0EE31AE
507D8048E123AEAB05979C872ADBA4833D36626166BBB2A2CEF2F3E641DB429C
AB15C97D7180E8E6AC0D871E20678516ABAA4D616B51C132F41E5661858B8C2C
ECEE4A65A2B0FF310DFB531B213196D2E2AB015963246F44E22E603E741BBFF0
16DBFC284906983A8C15278A36F5379F46C152304DADC8D90C313961E5F58180
EEEC5A15131E5C48AD27F80B77EB0370482D528735FBA3E6C0548BB66CC222F7
CCE87194F565B9EF7F32E656E6964501CE32462FFA6B87087EBAF45D454CFBA9
ACA808C4397F3852158F1C0AE44772253ABEF6D278F726A03A9CBC4330EC80D0
117F9131C5974445B81093C1D6E093C669CD285D1BFE864D53E5F140D40BE4CC
2689C42C50C4137DE564374B2130609785D8F519E0083DD24A44DE24A68E4071
4A2122AB8AB9649660D1C96DC58F37F88623528078BFDA3BA3085D527ED4CAF6
25BA663A61AEC4938CA78C49623FE0EED33DA2D08CC78F86A807E791BC9CFCFE
8FBFA55EC2259B64C31F6EBC45D2DF9B47EE09AA54011D40F55B6F12F49F2266
EDDB09D44C521EC9568CA7E62283C483A436417B65B4FCBC7EA32AC6EB4E7B30
080816F29F06D6B09E5506D3149C5D758BA85D820357D4955B0C1FFB383E10DA
4D61774D3B23C84A339C7348ECA6078080FF8B436B2261091DBBDC02583E366A
622ED9F95D2A85BDBA48DCE8BE45628A4ADFD5A48869800D9B54F530F43A8F53
F765F5D5C44A9399FC1B9CEFA343966118DD11CB102423D46BA0F096795AF0D1
BA33F089AD80A104DE7FDF8A6E7D935E6713963FE3C57CC673BCDD423DF3DCE0
C57EADCA2AE4DBB30166C2CF1F7113DF96A27D4BBB23ABECC5A4795F1290F4F5
5293B5870F892C9A32C776AAD06D78D0514F047373879CFC5AF9D624DCE5BC8F
7CEA5055064050AAB2F24A1C792B2609FFDADC6AB8D0F31A12403CF3436A1E1E
E24BA5F92587925C4D6795A3FB163245FBF054BB1B0FF01FD63DBF7C192D0F31
33A17E7764699B669A3ACCF7C36849EEDA395E7F55174023A79904A766F21D58
3DDB7B4C2808DE7FFB8717658084E70DBE046A13BBF1F9BB97B3AB527D68DE8E
924DE65486C3B883CD65A95901B0DE57821CB6C6AE37644E02F5CB0163617113
C91D2C649A0BA10736F3709BD504F22DA8831A09BD0B2D6790A498F2FBC2F642
7845796E606ECAB2356238AAF40323D71B236CBD1E3E43BD5443F304D52F3CC0
28DB5D33A732695AA09C0449C53C656704D820217AC035DF45F59AE445946481
E5BFBE5D4EC0A42B5662FBEB9FF6ECFFB5E8517312F56C91A01824E401E7203E
258C3BA073C1B2532B8312F5AE29E37F5EA71C52F171593B1370D4ED5D7341CD
567390ED5B75D612D5873BAC518587525A591164E8D36D2BD89F792BD9EE6ACE
99FB72B23CB2445F12B8A6A0876EE711166C9E34897D370174C17A2495D58B4D
3DA19DBB1AF2E09C72FA42AA3D8047D05AC4F6A27F3EBF32ADD2AD2FF26EAE05
A9AB34C9287EE00E8EC29C6603036D365AE08E00D1C7C410EA2551696954EC92
92080C8FA5C9E67698BD7B895C82ED29391E015F83E0DA145384E223319CBA74
19494F070649E03CE9FF905619C6CB40F562DA49C1EDD2CA221DD7D3DAFA8279
AB50DE1C059CB8D5C9FA8137DA711B9D30F236526AA389B2F79F3D5BA6ED9534
8852BF4448DC1B72E361A6A2B94CF865BC9C3401D995529E2A36DE755EE001FE
C67B184AE8241D08AF88D626BD2D8AA12EE791AC4253D4761A21917C7F2F5AEC
795CD14B33F59DD7080C7654DEFFFA669F50FB1AC8C0F2E60201673A78D03DFD
DE0CB142F0F616C4051772BDB837CB4CE87A0C8D61E0FC7F90517EA0F5F6B1B4
D57143CC0AE7CA9521C1536962867D6318DF1C9CE6476CEB9ADB21655D379B26
7A0EAEC2D28430C14D38764C493BA4C06EF4BE6780131F2FEC066C4866E0B258
51C48BEF77011A0B5763CB3D69A50BDD50C2D7EFBBF18BF42544B1AC196377FB
4826BACB3C16DB805D38C34F9E92AA9AB5F9A9B317D8BF32AF8A758017269914
DE3B748625D319E571187E1BFED9CCBE11ABC18C0C6123D24D2C7303DE998847
0F6F644748ED225135CC3B957EDE8567AF3EE47F5E942EA9293F7BF74260D1D5
A6F5E56705E12C8379DED158E66DF54349F0504EF584C6D05C44CDD8B720809E
3DC36FF60BF55FDF1CA8C968E68346CF43C568E0B3175CB7D55343DE21CF9730
C9DF918360036E4204CD024A67E764D3CC7677E5B229C1B909ECD1B9042134BB
DD8E47FDBF63F212D401A797EF60011F52EAAFB88E3E70E007BF19826E40FE4A
73B57D52FAB33A737B1341381EB2ED307E0B83B45D6911E04BE623DA82DD6BDB
2DA096827E6A498A8D503668E45926525789D43D1BD5B896B487C0CE04FC9DAA
CD9078D0C8A0639E27F0DCD82C552A7FABA42BFFEAD66CEBBD4D2E4B4A1B40A7
B6FD119D37FA26C14C29A70E2EDB3253A1AAAC2650009CA3B97B430B1A05F2C6
F2120C8981683D0976BC42FE98AB2D33014B983CE1E2F1E1AC4A524249C3CF13
4B36652F96FCBD3660ACFC2F9778B729AFE2CE1BCF473DC5A846FCC3ACBE455E
2C37853F5204085ABF3BEE50C28D99312A078CE2F6F4C1D2D3017F0E5BB5B614
102BE45CAF8108407EA970111B5A97CA8C7A64C70D52D28D2EDCD27879B1003A
6D168CD054E87C063744CDE097887CDF268D89180AF8BB4F170804AE5DA779B2
1941775FC32FA189038D6050EC0E400BBED364E0CCD8DA571E902DAD812988E2
4BF761F472EBEB411388FEB6F901777D090400F695D823C758882CC008D889E1
02678FF81B252C33C89E3B04157C889D4F0F86D432F0B3DD7811BCF01C2FC041
0D4B1DD9CB6F2433F9B34E7E8ED8BB1FA4F9F7CEB5354A8305C372C2EDEAFE5B
4AE23CEF34AC457961B15CEA084E31B3741CF2EC317DF484736EDD688737C380
6D868BDC02D1E63A52D21C8E7C1FD1BD8717612FC247293CC91E0EEA08D5F805
70217761CFCA0F9C13996DE0F045F28DB67378221722416236E4DC00194E9C45
A3839F4BB53E226919C2CD13A44E4F67334454DB7E133B2D308925CC2E275293
F81AFEC4DCF49230F22EFA19F48CAB7E09FA727CC2E11E5A5CCF57307506D5E7
6DD1D26BFD3DF97E73C2DC019B0A75B9D6386469ACF1A00A5AAB55F99BA1DE49
9883DC4FB0E8AD9421B105E050519976705F7BC889FB3B6C2921D2E198FEA294
E192DB3738EBEBF6485075728A0E16ABD53A25BB0795A21B65AFB6ABD7EAA3F7
1DAE1BA012651B4BA0ABE02F3CCCEB9E92979F17A3338A376C57A1F13E3C90C7
9DE8ADE421329A57369CCC2BA622840B79C0DF098EA42B810C596DE85F51EB9E
C8F6FAA598C73F359FD7CB1D337E3B083833389846A99C87885A7537D35772DC
A7EE51E8EEECF4E4F38AA04C3F4C447080386A41F1461599739D73C58CD02D65
0899177F7D707AE793B4C915C590AFD6E6810700BC0C3D14B67E03129A4215E4
953B88C7A9FF1AF4B6DA293E1DF2EF5667D408AD3F2DFDBA46EF95A1D8E1CA29
FBFA01A4B965D1101CA6C0C2BF4670E94776753FF52C2751AE41872EBE3DC66D
EE58BFD3BF8F543802C7614F64E7A9CC4474DAB5F4C59F8085FD523C91F0FCE2
0CAEE1B9613064F9C9CE9556C841563A43660E0E71EE761F0448C41589AD0312
958167F62FB166655800150F9E81A558949071F01BB11C9ACFB2ACA4F332D2AC
598AD5ABD3D5EB17AFA97456C0DE4D3D872750F548C357FF34919A3EDCFF9658
F3DBF53BB3D0A204E84702DF6FCF5022E753CA92323ABEDC81071ED44C306A7B
C10D15F905672783BFCDF28D97EE156E293046C09595159C735A266ADAACB887
7026C404951C27B88CC3EC1A6F15F016D55AE6B5DD739914DBD6861098977064
762AE2867697967117DD7E3CDFC24D046F1D83856D49224191CBAE95C2E7B9DA
4DC5ACB06B9F637312C1378941EF6B9D966E84DA69E66C43EDC0564D4A9B201E
5CCD830900AC4D4EEDBBA4AD14ACBADA20179AE138CF35D6F830801D7F9D1F3A
B48B6C2EA3B77E7EE42DC0A26C7FDA6EB64DF4136FC3AE0FADAB84CD30392E44
49DD3F7DFAB77AC2E3A8D16C9BC002AA17A9C1E9166A21648AE2AD7F9DB250DD
2F3F480844C93059796E89238B0DD470329C2AEC9F178B83D421063BCC18CC35
2C562DAE86EBE6529D19066FAB70C8E73B260C71924B0B3DD652AE37DC2ADCD7
A3E3E1936FDD259A3F32D669B6CD82D73436212D6CCBE436578139AE07BA8C5F
07A8D2158C8F21007FC0B96E2B3588466A6FAB4F70363E994AC4FDC2CAB3A478
9C98DE079DF219648A6219EC7040A8FA91BE9D9451BEA89906677866F50B6FAB
E8FC00E826B115CD65FAF738492A919CCB657186BA12260C2816C44A632285CC
25CA1D797DB0D901EECA675FFA1182AD6D48A8A96402D07A288CCC02F8A7CE0A
39084DA379C5FD08743060851BD02A3C9CC298FFA0AEAC5F5E1928C46A6EBB42
7D2AF9D32BD0117A8CD7B453C66FF39163092568B5A26F210900D466EA5CE01F
14BC1F57BB0D3186BEE9BA1A5648887CAC06E23057199A31781C4C37B1A07C32
B8AE8A40F5C481C8D2854AE5C2C3C746C4A2B48189A373A438F512642A55F2B2
3CCD2D5A06A1859B50C1C3352B1B5B56E652F00EE79060842A33A8CBD002E777
3CF6C051A6D5F02E35480569E9D00493C494F9FB977E665AAE4468E6DBBCC950
33876A21B75095CF391E09E814D7A03EAA19BA0D7A560610CC36EC3A9CA39CD1
4A359FBC14B07975379B68949C9FC2DFAF037C56C13802A7F66C809549EF2FC5
25EF3F517F06F90EEDFA6F8A3E5F1F3531A5415F3191B8FA7B0F28950A20A1E0
6E354480D09729E3A2D6796DB81825DADFA4580FDC7813B7989B18020C3AB1A2
87E948890C25563CB26A068ABABD94F3D42213218F2ACBB2F5B317311474B222
BE1844548554B37C97284940D5B7AF9E4CBD884D4994A76CC1ABF8E6AB0676A4
0A8130F05B0ABAC088FE4F9FB536924A55451C8772B29087B8E5E649DA3B449B
4A055214DF69D0218549440B3665E4D20C5A8660B3E0C3ABBA3426E7820E1A94
5D273A6ACA180B8A4832B68D11C794B5DE97F8E087E31A187756642E71C9A742
D5779CD52C76A7DA3F652FD48729981B74F06477176A737119F6BF954D1E7C03
4C59FB4E7CDF93E5FF73E788384CB86104E932B2535AB6496EEF3D46A13FF5C2
7989F99B217C828DC72755D8226739B01906B78E47AAB2F14A63FE37D921F901
9671B7AB9EC5424EA70D88F8B38E742C99C0143688AA6F1DAA4F35B53856A3D5
8A0B27D05467C4CEDCD48CE216C74D604D0AA75E2064BF532A227512C930B144
34763B8BD519CD1A8C4538BFF0C4E3449C3F537E76F039CB3B9DFB593185A61E
CD1C60D7BFC4EB87A8FFAC45FD2F982B521988050DA0E2E8E5180020CC795EA6
D50613126305B8993087046AC7F42B0E8726993D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTT9
%!PS-AdobeFont-1.0: CMTT9 003.002
%%Title: CMTT9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT9 known{/CMTT9 findfont dup/UniqueID known{dup
/UniqueID get 5000831 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT9 def
/FontBBox {-6 -233 542 698 }readonly def
/UniqueID 5000831 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT9.) readonly def
/FullName (CMTT9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 49 /one put
dup 50 /two put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 77 /M put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 123 /braceleft put
dup 125 /braceright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E6BABDA4215500A0
42D1A3D0D02C0C98BB1D6ED0B7791274C38B038FC7921FF1FB8FAE7258C09259
4B8E1BD9EDCEDE9ADAD9BD9598EEA9691589649A9A21539161E374075BEE3457
689F308A4A7AC9F2FE4B301A6C36B0442FB92E3B002623493DC087800B5A0521
0DB96A23175AC584DE166F59142779F26FEE9783E28DE49FC3A8D6583EE63FBA
610DA773CA18ACE6F64A4867A1A7817120ABF9DE4D17782866E6CB6B65A9F6D8
3667C8D3E61E5356E35343FDD4C6436DF73934470916CB5F0ECEA6BFF092E735
C7C355B56189D1DD5715EC97E50145FFC17BB1497315A9585D713A7A6DFC7933
995468EFD0F59E3C15865B87925A3F2930E20D5A35970E2C44F1629FA16E00EE
EE21EFC50D49F5BC02300D0A7BB85E649CB4E2E828C8B1C5469463013E71D723
2CB11BCBAC191AC751A2AF7FC228395CE9472DC1809052012AEC2CD66695DAF0
4CA04234F0187F4116C93F59A7F1F8123DE87F111853B785A20CA8B49B3B0CEC
B11AD345E1A11578D2EFEB0536D125237086CC8CD9F34A5137AC5DDFD8746014
D74AAE8239B81ACF65F379CF2153B06A238A2D767F294CAE0D79228F0B7D45CE
510AC9657A1776202FEF42F96D476E7DF407786AEA12DEA0013D3B4C5D0640F5
BC5BB72C34066270399CE595827175B23B25072723BD24E07F6BCD9EF0175DEF
93714BAA53960F81103CFB731CED4A267B53727BCA3C97B0BA5004055D4EF0EC
F725658E53AC86E4061B489AD4154915C3981B3B703E1E2A8D390CCECCA99385
45EBE35441B062D7D12DAB2B31569387187D74A4043FD71F1C6D352EAE0F6757
4345FBFB6DB15CAE47CAC4BAE47AECAE5FF5EC19057DCEFA1B23F47364ABDF47
088A7C6A2AE26B10459B6D41CB69182FD1472F326CE3A15B59255D1DE3B616D8
9D1F12561038839781E657C896B8C58A32DF5AEA23732A0966D96C68C988ED7A
09B7E2C8F9F3D0D56879764781566299A4EDD3588BDF70E3D924D25074F30988
E35BDD827AE4D0B4A06F55A9976BF0DB3C0B1D09CD08E8CB168B50617691638C
0EC1A791C228177D4FFB021EC3DF5082CA3487AD2EFC8DE9466A690ADDB4C52A
FE2A6DB4CC275CD33D9136E735279FBB2008D59E667905EBB04326EC33C98B2C
94744B7F540D86E90DED64572ECF1EAD3A58EC101642B245A9C7232DC8FB8741
03F97883BB32FB955C22F878FA0FD114451A3B3859B0B5537AFAB73AEC7DB2BF
409E1FB41D473714F6BEA73CB085139879FA31710E01915C2938C37BAD6D7D71
45B897E00857D3931A489EAC7B42BCE4E65F73F67FE027CE482DC47598ABCB95
39E98DA8ECA3E23F0799D5963ABA6E2984DEACBE7B46B40ADC6213E0F4D08971
58F68C946C748E4B4217CBA2391BE2086C9758F4E32C9B6413E48D84D33A6E85
84747029C0A9C9B92841D217A902BA8EB333999D62FDA9F82BFC8ED11F67988A
0CAE42182E414A9766AFFF4B046A09D476F8E3F15A8C7829BEE982D8350BDF5F
F215F2BBBF68D4B567BAB798B9604C79306C475926E9FEC0F07A99F43473C6FD
B15AC29C3D07FEBAD1BAFF75AAF2FBE94F104F1DBF838044FAD94B661B06AECD
D9AEBD02B60CA4546DD6B5B5C1A3833ED07845671CEFCA8955CE0DE5DB8FC93B
3306683CBFB8E5B79A863DE78D455DE9D592043C2686F88A43140F8B9F3B553B
7047420E93E753829F8D47AC7621CFE3626F271E31F0019CC02D0B57F67BB47D
8CFB63E902EA3231C00EC66EEC0D30FE8394558BD3535C888C4CEFC6EB72E737
712ADC6300162D5D79BEE0CA1F6E4127A0BC90656C01692F6D82C85550AFC97E
C2693E379160FDB9636FA41AE9C75B7F6643B05971C6D67CE30971D590FC07B3
E0B36B4D1C7F25110B5DA2130D574FA292B47322975A2BADBDB39AAE69BDDBDA
A880F9AAB580117708C79204DFFDC08BF4A48919B5C22228845CE8C3109E93AC
2479E523B8A1C12A6E541118F121DC6B4EAED83491A03192D5C3A2A45D1A2467
757E7B377C635CF5CAE11A7CB49D49F3A1BB2286090B5F0E4F89869D1771D50C
54B5C5E091E3048A2C194F0ED00DD64FB95BAC6FA9D61ECD093ED416DA3A4981
DB07CFF17C4F55C62DF628EBFF06FAC3F3D3F91C30EBB34052BE1A08F5EDA4B9
08977197950A282B84E21D43C64BE3AE4BCE22C70E7D392DE09D89B7F23351AD
6AD37225C12BA79EC9951F5DA1E505DB26200190ADE0E549305B7530CB86EFD2
A896F13A97E51754F70B609CB4511CEFC38BA579C071E9510A49982389980DC5
336D6C4A2DB100DFEC4055C7AA9C55880F94FBEA9EB280BEF66CB8E1E38A359D
E5AFB12B540CD599085ADDA7FC2C72E7C873015773FFEECA2C596B75BC39A3EB
3C43FA2E53C0D7993042F3D652BCC483E48B7F6C94C3FF6D38E276086A6AE67A
E5A571B9C72E0D7824E0BC2ADF51A393B9E334649F786EC1923C854382B89627
1B9E701AE5A6C42E672B2C6A33C8BBCA8F69B9061E787D6B92183F20CF4C3903
FF5417427B84798C82BE28D2C81624E3920CA61EC9EADB364B5A6E50E49A1A72
A9A090A1FCD84814B8B2708AD787D2B5015DA1305874F58C5EB62F843685FCB6
465FCA80176CAB2B2FE65E0A270BCE1E3DB97564BEDFAE5CA44395A8DF4505C0
3E103CC3B914359B2870DA6CD30382EAE8949131CFE31E9E75C3E47A3834BB32
CF183D4A8B9001710D0A11390C9DAD116196568591D38C2AF4ADD852F31494EF
573462759A35415900360882739789D6B89ACEFA251C5ED90ED704DD7C3C80CA
9F6CDED69537D201D520C99E69EEAD5D3C0EB84C166660B3C190166D93EDFE6D
15BCB6DC5CDCA825E48D33845CC2FB15291AAB823F25CF8BB0A1EAED8BEC524D
D9CA016027141FAC9D35B64FB9C224552F29EF6B32497254E319090E698FD8A5
15491CDFE1B988C79A0E3B9D01E12FF084E9FA86CCAE02A3EE6F2917B61A2CC1
64B8CAF309D1AB48A34227A7729DFF99CB6EC282E3FAEDD2673779AA7E4C1789
D93FDC37FE95F087C5F88F53D30A2DA9C913BF205FC6BDD060A40184F4AAEB3C
D080D63B89CA3DEFF310D09EF0A83F3914BD5B7932980ECE139EF0313C20B4C8
576EE0FE3F28FAF4D3CE7CD0890BC824A85B8EF4636BDF1EF1BB519F93D36540
ED09FAF93FD71992CA2CE2E83F5355162ECEB32AD218092F45D5A61A44E67135
EF0453589CECDC6962D0E8DA7E7567603BAF50B2C8F1CA65EA5320984E7D69AC
9A7D3D7F92565D79E8C9DD2D92CCA7DE9CD058545E9F98AA47904D70E1897099
3C4C852B3BA131DDD348433C336BDF5FBDFB62120DDEAEB3255E3207B0C84A0A
1ECF9EC869DB9BFA3693B03FCB27C5A5D3CDD62630DEDE91B4DD5B9784BF0BDD
FC6EEC3FA7ACA9E15FAE47CDD9B7FCD2BF0EFA10716F08C0AF25FF67CB6F9598
C607D2FCA452417D2C69DC808A9441A66492394C3450BD30632AE739EAD654BA
4343459CA36B6D5B2C12C39495952F2EF93D82C73E33236785A79609E260C4E0
CF3A3C950DE71DDC3939D42DB1CB1CA917CEAD56979A70F8F3B207C805319FA7
3C000AE2B21D711A6D78C7BFB901334DC06F59EAB6D94B507734C27971F8458D
D00193645AB92FB8FE163D5C51AE4F40BDB4F2C51691E76EE0636F071F37AAA9
BA78BD12459CA499210EB0CE2F8BD317387797C33F5933AE7A6264DA06B4A6A6
1188326147A16B205D1F965872DED7D8EDB3294FAD2FCDF0D423329E9CCF879D
4E0B966D509F45527F7609DD09694D286F6FF7535EF8971B7DFBAF608A19D442
C133207EB1152ABBD11C455D0977F66A9B73E51381D1CA4B66E87C0C7175A63D
80C699A052F00C41DAEF42E7A40E07B1B14107AB0787E24E17C1462960E3C54C
AE73BE4924464FB177EC62F116B2822842541543EFF7ABDDEE197D6BD8F8D4E6
59175D8C5957550B70BE775AD52FFF6E7C00DA7CDC16E1DF7446BB5D8FD82647
3E9F87D5EA365C82A2D991321ECB14A9E3AEADC5A56665DF7072D6DAE402BCB6
14D92B17F9E063E4E9D8D239C91F5C7C0BCD2FBD936C9D4A0B57659420343B59
B395BBD1AB5B6003F653699D57E7581F9813CC98D4F072FB78899D6DECC42D34
F2787EDEA64058B46C4BFAA2BB96E9BE5CACE8D91E4C080ADFC0FA0D4A29C6B8
54FEA9E11DBCF53D9CA40A21AE5076451EDAB3593E56B6D453DC8EAB8C78B588
34D4C4F36861B5649BC1E9F3091E704BDA7613ED45C911DFECA74EEA05165191
825F95A947CAF382FBAF01F3B8B041ACCDF39718D7DC5BA6CA12BB20EEE96439
BF2E2628AA3BD2C91998E6247A690FCB0CC95F286F427345CC4F1115BA3A6E54
4743355F2CC991CBDFF5725902C1F5A6DEFDC8638A26EA456C33C27773D6214F
66536CD2E44FD253531732D5A8C44B336B1BB47B0477350EB8CF74889B93402E
2356A9CAAFCA562315D8E0B3F42F08932CB87BA2499A875AFA08D11DA73B38AF
F46D03B7F639A8D7BF88CF07FFF4E91716DCCE6E2CCAB60A64D5E40EFD8B336A
1BFCC4CB04F49DE1FBDE7AA5B2092A6EDBD913D161A3271AB6411622D0E14416
37F81E0102F5B0F2F9A2B27819E4BACD7C50E29D6291AE5B0973C657761545A6
741729620EF2BF1046B3913399C10982EE5F4142CF461EA31042E432CC79A1A1
39C607D22E45A6DEC008CB4BF6007CDE9DD5802B49A62C8E02A6D448B64177CC
887AD71D171B99E7ABE2085B37D90B3BD8513995D9A57F53184DA474F6DB5E49
B73E04CC214EA5398DF7D7541F94E623E8687B511640457A48A68E9D9D6584CD
15B57CC044D8091C771D175F2EEDD411099BC8F7B4317DC503BB5E405AEEB526
5E6E1B1F2705275D274E012A98F66075CEB90AFC648B964DDC0E9C4AE7B24CE1
80B051022E5781A533A21DCFB97893847D685137EAD85BA708A7E118C72FA839
A9E460B5D17365A0AF1F53A98319FB64A5819B087F554BC056C4BE44113A5404
BEF759F890C1CA5E7AE156F4F8106FDB4F8DFCCC640976983EADB30976344048
2A86D7B2AF4A01CA736B98D52ACE392AD4BECE7E61C710B08B66F01857CA460B
B8376E257113E10F6DEDF14CE2A4E6A99ECBCD302C36CADB713D849EAE9EB598
F29DC98531D793B79F83091F9B136809E006F34E423D528CC4309AFFB3EEB47B
9A9DE4D5B25CE953345C326BCBE2B4912641780637783084D3D12693F8135483
CBB0AC4EE0B5610D7CEB7DF205830BDB9BB404DC1B28FB0824CC187B26C19A91
DA0025EC739BF3993700101D042DED86D67F5FB87912CFC51AA7DF53F2162D62
6314A2CE13810D0B8D81F45771391A236422CFA0F35F7A0CDF14ACB2724AA57B
7C2C28D53029B1146558610E0CFBBF72A85AB9BA308F846228F299F13F68E8F7
D963B2EE9EF7D4C21690632B640BDDAD0556EFA4EFBF035F13377ABB5CBC280B
9E0C12AACB153C93351E5BA95A7D149010E204950A59C7FC6581D9703468C1E9
EFAE37E7E6ACB892B3F8D1248D9A4A72F642FECC5E0B25C15EEB921EDDE84D12
0E524FE6133C4921FF4921242392C12FBE69744D53739F7E849C1B96C4020AB2
1FF10DEA608F111749E2FBD8DBCB17F353DCB3075B4F4B8186963EFE95A76A10
85AA5BB6DB4095291974221829A8E436680F4860E01C3843BE5BB3101D0869C0
EFCE08D187BC04F58C7A450A59093680A0F09E8E3F12DF5223E7EAFEFA01978F
D8354753A68022CC92C71F2CA732DADAA8A466D4AAE5999B0DC077715671F518
E6277741F44AE798EE50DF44CCF71FCF8BC71F76374005FEBC4883C6EDA854B0
88C0C2B476709AA809ECE41AE786DB1A32B3FBBCC14921673578D3514C8CA842
E1FF90BE33F7B93ADF6BFB8B1AFBBD080783BEF056A6BFAEF676F7BF9F2DFCC8
01D255A9F0391951210D60D4D4DCA93AA858B38C0D7B8FD740D5FC6F277C2A68
54CC2DE1F40B6347201FCA2A0A91822708D820CE645C3E4E5A09FE25721AB33A
97871ED448F38FC5A349D81F402B34461D840D5768BFC6849439AB6115104F78
B87115B1DAE12542EA898F86ACE247709817850B067F537E6137196101D46DD2
D842EA03EF4501E34074E8458E638ACC4EB349A7430AB035BEF2DD4CE00554F9
18F9FE32A55AC1E7E50D64AAFDA278D77A7149C59DC5B1E3064A4B281A54C9CE
A5EA94ABEAE4C6D5674C208ABC72563976487136AF2E21F835BEFD232D7F0D13
1D19932367F51D5379934DA7F1635AC51EE5CEBFA63D4D32F018DEF13624EE62
31DAE68A08DBE3B4FDAAFC75291C8C6CC7A657E3C7453C7D1461A36E88E633D5
408253B673AD87A9FB2D0F56DF1305916D14D5DD62051E27BCE09CEE9A1F14AF
1D7164BA5FB6E6EC8D38750F7E28BE330909F303ECDEE692E347DE13C8C2F82E
29C8BE6EFD76546F362A12A1C2DC12389EA95ACB4DCBE95620F0C193EAD91B33
BAAC5801AE827B9AB3FCE5D11D1D7854F8FA8A31670119CC0CA98628F801838B
AAC7EF90AC5466BE69CE3E3CD9951A5EB9AC08014285422F6DA6F6E221BB30F8
0042A11F2E4B765BB0D142AD52F4D85785EA71B2E1CE20728B9E9306CE93268D
99B822A5AB5232EC7E26EE1160850AD3905864A01357F22722B6A54D4EBE58CE
480EAD9FBF068EE965AC4B5FD2FA8CCB91ECFC6E90B9C49268CA0B0FDAD23ADC
D5A74B41149BB08454054C451AD0DA4CCF8B60F2EBD061AA03A011D548B6B481
FAB00AF9225BB5463F27FD67333FB51F8664536267E95CFAA0BE3BC1B8F889CB
587A3A4FA2B45864F07E11372C9507A625C0030EF7030A0B4D931BCC48F6DD51
A4D1F63FDC4B59C1CB18E6242E9F4B4B8AD9755B870FE60D640181FB7EB8120C
C56F51DC8C47FCC6318C2145EDCBEFA7BC4253315BA67FD2B3D4AF6A9F3F229C
AB75B592EADE15B1FB5FDBA1C0F786BD21A51506B7A2E42C2D086BA6F84D1B3D
AC7531545F0B01346831FF36A52CAC1E390F99AEDC265B44B0FC9C581BBA6BE4
48B723811EBCAEA5FEFAEA7E5B987F2C7B3E9A65D2D14A7B74F099401C57E367
385352D0776D2A908F7A5A2E4D4160946C5591397877025C8C387CA413EFED56
8B142E8341E349DB4DBA422A4FEE56A573972A0C66590175158E48850A9F7F38
4B95726787B8F969FDBC97491CC81CABC976CD00A27D1DFCA7CF467A956C1C6C
839817AEF8794B6151FAE9261119DD5DB787DC9D3B420FD325ED6599FACADE0C
320D54C2E0D296537E22C1783670A9D9BECAEC63853EC2F05A990260DC189D63
7CCC0BDDF2CF7585071ABAC14630666737041194D0777EA4292AE60BD7F7100E
DB568C90F0D899EA006CA423CFFD6EC70A5D3D8AC43C747DBAD3B02219E47D8D
DE030631F4678C357A58ECC52782B31B50CFD44EC33F41585E51B27E3997D33F
461BEF897220AEC80007F13C5A1EE3A0430CA899047DF944831F8B010A7DE74A
BFD26001472DC00CDC9F17CC435F61ADAD4E9AE062ED477FC621FDDF9242C449
1BB3F77FDD1519A251B663A693D84B42BF0962F537757F38CE5C5D56B98AB10A
3B70C8AE8D52DCAFCEC22E7B09D3C4EFDA1841C74CA975E4F8294F7BDC796500
0ABE197ED3737A65F7BAE601C91DB3983EAE11DA3EA18ABBBA3650DC361C2E77
EF9F97618B0C337A906FF39926D2B0B7883ABBA650816C4C6B34EEA836994EEA
AFEDDE56E0099D0E09EB88EB093544B9BF4871200746A0409C475FC4232A38D8
F3105B0FF44E4F132378DD12D9E796412FD0F9478322215E9F59E69396C35AC4
097C4995B60BF4D8B3AFD0A002B3A6E4FA114131410D5658999B86DFDD3005F3
AED1FA8F077AD1F27EA249221585703F20FB70E37A26C6C3F2E101693C94612B
65BF89F37AA3C10A40EE8E49915F1A1B95D2193D8003DECEF9D76FDAA33B1AA9
CEDCB21C2A3B05747FB3ABDBD904B66EEC60CED2867442F5FE445587EB8C6D14
87A6B1B4871A8371A7ECA6A159EAB295B167CC35ADEB8512FD0C237421773BE8
A081FB687F9C5D676F2944DE6E6B639C37E8E49BD4A6F0903E0C31EAFC4C7ED2
C3C67E71D8BE2B8D5784E8A6F19A9A8929DF9833440E160945274682F435DFAC
575048CC768BB8F13AA21C6B125E6073611BE138AE06D13E62E7EDE3D0239474
E040B3E446165FFE60E20B75D2A5F9EE021B22256621C290A8F3342F0347B8EC
CFA6AD68D47C05268EE3AC8683F4840D736EAB585C6284018DC94FC103B4A882
ADAEFB625EA966F3877B3FFEA518B809A4BD1F2DB2A838568FA16E1F515187C3
9A112346F90A5DCA6A46AD3F0EDA61C1D2677F77D4438ABFA45E2DDC1A0F9AC6
2E9FC1599F143FD5BBADED7D81EF2F7E4D217C5252DA8CAFB11F6F4EA972B933
510298056A0C86C194D4A63EDB87B739E89914B9FC473C6E1C57328325AEE2D4
9C607C422105739986A1E69F9BFE36C6E2EA0E1C046DF1FDC8B2132862A9FECA
58289AA90242FC78C2322A418AA843066792318FFE8A26FF076038DAF0348CB1
3F2E9BF76FEB6AB0661A6FABDBCAB375508591EB05713FD264E7A8536EC7C82E
7C80DB1E185B3E466E7408DBF6BB4AAE4FCD6390DF072A29362B7549AF97D408
BC6414F748F2F3E05F6137FC7B7E44E53F104839F1E80B7105A30ABB4E96C229
9F7CBEADA9F4744FAE519C28D6FF46647C8080E584299FBC139431FDCE25B42A
EEE769A1B5266FD25D5414FBDF324969DD977E5EBD219C4E22B7EAC37F78B0F3
526258764B99EBC63E3F062197BD64828CF854A165781C39B9ED571ECA1C8B77
DB54DEF5FD635573471769E0EC6FD87899C1626C222B98CBC8E3A2F31549D2C8
5275F7B124D8DC8B30533738405E9B7AB661640DFF61CE92CB7E94C991802842
787045B6DA34503DA109F8D964E2C32AFD7C375C91832DDA20F805B272BAA1F6
F8923D39A906F733AC42843C91B942ACBE20A441C668A4736057529E9C6EA048
48AFE588C522B27B9A66BDA5B9B0D43731D8B5A240449C2AEB0C007DD9E894AE
F1842E755BECC6686D0DF940312853E9EA3115B3FCA1807107AC70541B4161AD
06BC069AD55336796E6214DAEBC2E400D4B94C785A28B13065066563083DE0A8
09563192FF35ED7176B2601DCB874446F13E1EC5B8B42CE46082441681E8C0BE
8D7FD3BBBB4697B8323269926B6E6F2202E8AA4D73D7E2F87099C5BD823540D6
DD9ED5954644FB8E3B569C56C6BE1E710E2EC981B72CA8059CC5B73CBC703F07
D2EC08D2912AC0EBC19785DA621ADF495FA8494382FF9A3EC19A232D847DFFFE
8664632ADAD389EF9507FD9A40124B3D86221A45D24D669830C073929851A663
9EF90F970BADBF8BB924B94445F20DD32BB76BB99518D94FDFD53125BEFCE4E2
CA2C0A305A79782ED63BDB205099E5BD09DF0D59334C500214CCD345B5A4673F
429FA3EE36CE26E47A3F1FB35F29F68FDDA352E11463B1E5B8A785E8F9CD8DEA
4EB70659BAD64B9AD84E0F26F50049BF710A3D50ACC03C3631AD874B4BD128A8
3C0D177D50245EFCF22420E4898F0ABEEAB1578247C77BD5C57FC86114404119
3FFC1049AB4B578D4120DB133ED7F0CF17517DF95D8D5E51256E9E4B5316186F
B3F1C477D391F69BB55F2C5DAC3FB948FCB3119B2CF7F6CAC4A435DD25D4F7E5
C5973DF6B9098420130FDAC3119E36C212C3792A4FDE7368403ACBD943832BDE
D2311CC1B6BBD77598F1723635C0A7DA86A94B09C4C5A7775E3D6477D3D2CFF2
CA3EB868120D30F0587BFBD1DB748D854EC0A0B32E342F72F97CBBAE038F9842
2E784397B15E58F0EF5F2AF7E7D3979F3B9ED9D0D3BD1436B435D90290650B7B
1DC5BC265EC2A140A47C2C22FB146C41956CA3852BE9E90099C65857FD8CB97E
30DCC022B26EEA5698022C2CAAED4FFD87F752A1E862D71D9B953ADD9FB75430
540ABDA68CE366A50B7BE9892ED806476F1ED89FEFE5152852CE068648422D8C
850FEB1C8ED018C09AC8E2A78ADD66175618B0DD04397841796C15D8894EE7FD
9B7283AF82818B9246E5FBC5AAE5D00352524C71B0F9570EFD77073F09B0E5B0
2EDD5E9253E3215594108281DBD245412854A83F3E03ED8F3F5A921B26D00DCA
B029789C7532F07A2A23170704C009803FCEEC4EEF0CF43D4E505FD95BA8AD88
C31B92383A05711690B9C60B33CCD457E9A7ADC46CA5E1A377C424AF6B6C8EC7
43FED656A962333E8AA51E5E127B6A88742B0D6387536A7CB1CB811C0276939F
706828CAA6958E1E1A9A489EB5986549EEF213FA3942F2332F52ADB1DB59BACD
6E2C35ECEC6D8523FC9CC448944DEA7E6EC83767BCBD64203C605D87476545EB
7644ED2F035710853966E335EC91DE4D216D9977157CD7407E7EDA1A979A6CE6
BFDB29DE25F8520CCC2D586B907369AD6950BAD9ECA7DEA085965D442058E986
1632DD7DF73C8CD33CC71EAAF65DFA8133809B3FABDCBC151E185C2A48751566
AF379B936E1DB91B0C8204FFD5B02C671DF05F56AEBDE65195CF115A48ECB4D1
A19602848CA4BC841D2DA078E88CDED802C48DAEE3308074FB1F7FE434F8D373
60A0C90AF234BE81F65B916240BE29DB4632C09E534E037A7B5D08D7ED265DF5
B16CCDD4CC4CDBA67F550816953EE354B438A604C98EEAEB420C7F71907A3991
63BB045243BD1E40B85D0C3D93D29C3D8BE4F0C4189110A977BC06C323280EB6
7F725DFA0E3969909BB861A410DBFFD15F91FAFC7F99BD05FE3067BE71FFCC4B
AFF3F1232E2309040A3CDFD86B34DE8ED3EFF958AD666EE5783798F53BA96178
4BF59E1A48A48C5C48A211FFA1E2FE2214F58936DDC40A329B4A2981E3DF03E6
C8A86E31AD83177FC60ED38306755FF4F620275BC76ECBCCD8476C199BDF7D8F
B99318155B66CCB4DCB2B189FB89EE35AED4EE4359D4002AF2900BB1267916CF
CB352FA7A841F69965CD7693F774A08EB8C54D6BEC879D8CEF8B388A56633379
D6144B101D035B831FD53808DFDAB4A22AB64C87CA3AFA28CE1F08641FF2E4DF
341CB74FFFA4C056E1A6DF124A7677452418B8393748AB7AB10734FA04BED957
7F5597AC58B56D530C64A1A3EECF008F8E184D33330D92E356C77A2E41262994
4959AB1986DFC3F5728EA901923C1C20D0A64EEB9CE4C7CA0814DE5DC72E9DFD
A353C314E8DB4A7DB8FB07937FF9B945123DFD637A71E9075D45B80513C0741B
7B0A93232F1546AAA23F7CA42C081DA21D2630647720CDEC344B6003792EF646
9AC81827BE92F4614D4EA109BF0FC5B9218F5C074AA9E877E361672DD43F07F5
638FE189A49E74499D741675C8FB34240EE0B01053E45ED51B733F2D20AAB97A
CC200AF3E0E5E668E486D1CF99F0E4D9C64AD63E1AB504E3E0BB6D908B794D08
1AE3ABAC2FD07405F844786086CB69495C575CC995CFABE15A580584441A4779
7F2CC678D9308C41A822A1B99C54879056CE899FCCB48B4D2AA8475C36BB117B
7A9ED23E8C1D12753E8CF68258D270D21C17983E36786A9CA78E902037916CA5
087D8860A1C451B98EB2334A859F73DE73E94DA012D1EE0CC0A2AA627B4E887A
AF3AE2A782869AC55B81D2A43C0AE4C85AE0337127E55D55300A491EB3B49A16
1ABC3A5BB3C62324FC7474B53219C1D12D55D65A53AC7D01E21E7A77155B252A
FAE1B1499FA69762C2EB0FEF0C8D0D518DDA77BD21A265802D1BA8F48F487C8D
74DD4D5EBF34E2E6F375EAD2AF80EB8AFDF52D177F503EEA35646784C2D8515E
841CEE17E81B79B9BFD34190E161D2D908021FF93C10BAF225AA603E55CCB940
486FD46F6953BB8A550DC0E1FF7AF940251780198544CDC40C98A2DA942F519F
B7D2711C278FD2E32437153B746A91360A6BDBEF121711F31DF0271DE661D386
38658A620725D99120D60755E78C72DCECABB4784C9E13F0795427AA1FEB9D50
A9C866239013FCABB53081B4CE6AB3A41D0A07A04EE7A4124D08B42A90D6B108
DDC01837C8FF687F1FBAD0590BE440619683FD18F2C3B62CDCB9A0B6E198D30E
98B1308534D644744B5CB6506BE534F922159CEF93AEEFCC36B3B8C4A37AC8F1
C581E9E6A7DB1C74EF6E59BD78482AE8D51CCB97A78B734C5ACB33373690FA6D
96A61139A66B2AC8B13D844A440F0AE9305EC2F7E6B81399427120ABC6159BB1
1E40A9575E9CC2777A947821B34B5D19211A61E9139FE97F6B4BF3A96D2F47E3
980429104EA2B42147F40E8647E615ECBAF841BAF614BFD83FE5DF11DB24C47F
DF477AEB373364BBF15FDF39AD40E6A5C60722A889D30ACE431F86BAAFF8F1AB
06D1A80A482ADF4F942B6EB38A2DF99677AC915675AA18EC89019B84759CE732
F5221287B7E475E59B7F434C67BA81B9616DE42CD24FA6B26A3C6EE67DDA8DBF
BDF98F951CFC1B9C518577DE352A2741A2A891223BA4B58E673E218861D70500
8DFA6ACA75342DE576AAE8D8CBE9ACD774B499CD66A851DC61E461098FD6D167
13701DE38244F02C7F175207765E9D24B00C5F9C5255C3D9F57D2EFCDD32C396
E197AA69D0E7CF1FA39B01C4DF804652CBD59DFC0EDBD5D0977E7C748DDF3C35
69D7290EB702B29EBBD1C2F8700181522FCADCADD9AA7BAD5F8DB007FBB087E5
66FC8DE1F12149A665D4285D4F2E86D31512CDFFF013D79202C898ABF82C477F
B988CAB7318A11A953304ACFD749F98C08EF6CCA18FFABA427383C7A9DE63395
429A58AC8BBA1F7844429DB35F7DF342BFD883F992C481A3731D9D0817B1BFD6
1AFB198074E59C4B6F07BDD4F3059C7049B8B89337ACBB31E1EFB01BF9260849
29927004422EE7C5E5DD8DE025FA9720D4E8FD6F8BD32551DBE7E4E1496CF131
384D9E4629B4E73AA72DDF991F33F324F37DAD7298AB1367857301CBFFA6971C
1BBD6DFE43FAEBF9DD773623E484E9CE8B183CED9485EABCA3C595BFD6C09830
9EC313FC5BC1191E0E7571057ADD21549B407F1C6646C3168F24FF741DAFC8E8
A100194E7E89E0ACBE3523A22656E51A2AACCABBC09DA948A148A7C531792470
951FA00BD22805AC36405E23E51CBE3EAD68A69934184138EEC39296A76FA253
F3E292B0A93FFE537B174A2F92998B18CE534B3FBB2B8A3F219BC112B0D07B4A
36F8A42FBD8F1EBFC782511AA6DE3E044E41A1AFCB9FAEC5A96329DC693F89CD
1EF7F2E34DA043D6B4DD0C455207866CEA32CC8A534D25436DB38712BA8EC309
04E5428056E0336C9C17C29E86802F56FF145CFB454B02A632966137BF16E271
4DA69958853B23491598CF371C1A07A956813DF2E4D221900977CCD5A5916124
167FF179083FD59A77B52EE5DF02DB29F3CA5E161D992C3DB5EB7A35D8321BDC
CB74ED615563808C06A1539832A56AEFE2F014150AEA4A4396B70005DEF30353
41385604577357B66726FE1B73279345343C5CF89FEFB7CD1796E6446D00800A
950E6E1C2C41C7C19A760CCD4A2B913EF51E091BEACB8E42982F0E82CF45F8C0
FE5E2F841F5FD0F85A25FCF82363513EBF3A4749D1A5B0A44B3AF8C702719F0B
A18A1B447A482934537F918E90E628CEB54F068EE3EDB177B0B045DD0C26D858
65B6E328C40D4F403140CEE2F5B26B53FA735B77A4A8FF5CAC2324E81075769C
2A4F9A133494A4ECEA244BCA712DF1169C121A2C96B17E5A07BB81A48D6237D3
B1D0CBF027BD7A57C63AABA15CBD1ED78E85A66CECE0757D065010F525E5668F
274F51BCA6F444C290F96D33A8F99E1B4FD5A9DE8778D17EF444DAF6BC4F4278
7F17231F33EEDA163F72B955ED6E0DA518F71D9B56EA24383C7165CAAFA323AC
A77ECB0DD6365E21C4463416E8050386A30249698474B97B8F591648B5C3D59C
E108818093BF5D01DC2435C5E16BF5A640FFCF09DB9F0A664109C87250431497
1269B73BD53FB98B556E6081E35D70AAB06C84F30D7AE3D3C895C73584A7FC4C
3EC9F3B70AB93067B327601606A67B6B385167668033E040F6BD53ACDB1DD440
03FF86CE836AAA504D739DD75234748CB0D394E04693ED4B0435AD022E0F1D95
9F7D83C4BF7D462DCB219A488F075861F6041BF95A14229FAB3F0C07D3BABAFB
4B293A45A94441240B779DDBFD38AB3446D2B4791E4B42993B8DB064832ABBA7
1DCE6E04A347E7AF224096426F6DB62AA0BD7FB482C1D8987F7C2B68FACD57B0
206A9F3A27CACC68F7DE2C87071669B26290765002E0615CFB7A1C1E5D394EE8
FAE5ED1A81DA715587748187BDE039E4F56D952F9560E89443A3941E746E34F3
3BF77F92AD20D0E82259DE3F75B885494BF3CEF6D51C693309C44FED02A8E603
182DE3ECE749A07CBF7E9CC02FDBB3226EDB2446A36048E95B808CB2B68442F3
8A0249F381C563B987C3F9F5CE06718F9BED30A397D7588670A22710FAAE2668
D1DA991CCD2EC0839801E5150B76937402BA4226B52E21958CE5210F6CEC6C44
8506DBB9C21A43BD12FCC81CAE76BBED4692F6D18EC09293837EED74DE89177F
B5257B0D9274D9EAA3902A7E99BBC6685ECAF17ABAFD0EF0DF0A9EE4FF88066F
79F677DD00D0B1111F0FC96D0F4E85F3FE690A25ED54E81C9A634D7756A3951D
81A167433CB4EF405F524858C9087C76CF5F9F1B79728B85628497CA15473406
051FED0111BFE574894ED09B1535F45CB74169F4B5535BE1BCC67E64B9D31653
207954E6F34401020006CDB3D0924937F371DCA6123B3A736249A3BC39131706
6DD655B803D1AAF3356F6E365A1BFA15E9CFD1A8FAC914F5D98C65946E060BFF
EAF18AE0C797B90DA350C1BE92793E1E848644B6AC6424987A94F50BEEE878AF
EA38452784CE47DEBC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY6
%!PS-AdobeFont-1.0: CMSY6 003.002
%%Title: CMSY6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY6 known{/CMSY6 findfont dup/UniqueID known{dup
/UniqueID get 5096647 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY6 def
/FontBBox {-4 -948 1329 786 }readonly def
/UniqueID 5096647 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY6.) readonly def
/FullName (CMSY6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /prime put
dup 50 /element put
dup 54 /negationslash put
dup 106 /bar put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D6AE353EAB9DBA0D
4335868937E3A2D0F9C8A4FBEAE138AE56EF84665582DDEF7B546714518D224A
F91D19409EC600924626D79F58E272E3657E631C06412F9D42732B6AE0A93D81
E2B13A81C76CC37FCA6DB35A1C6A572EFFEC7E1581C57B1D22EAE9C407771F40
71D002A06A6AC249FCB7605C902A76EB298B05E39D543A63332A91B8A1ACE05B
F902540FEC1024680B8D5857E4931D00781747C87ADCC45430B5462EA480BE50
D07C5C9EA0D8D6447324434CF0D637BB13037B6E1C48F191C52CF2B9511690B5
405280D5C825BD376EF12429837CD44BEA223DC8E199D8F85856C0FD551471CA
B30481FAE99B71FAA56B639F549F449F2CA6F5450AADEAD4C09595A7A8530D12
B23E012978225E112D23BD1D48DB097994A9D5EC707216D2BF5DF8B69E66ADBF
DBDA4737737F51EB7A38A4207BB46456A8117067748659D654B1D14849F14920
E57462ECFF602A181700A346C1E95131C6F1C66132915FFD999FD4105AFFE7D6
7DA46DFCC4FE53265B14D7326F5A44A3E97902CCB106AE99ED6434AA9EEE7E6F
60B8034EF80DF885FC63DFACB0AD1C00BE56F79B1AD41B065C59A35073B450F3
7E6BC7B90C9D9337F9636943ED701398E6886947E126F1E12D74C5E4B5CF06EA
E60F9B121B9B15E6752B127CCB9C26017A84BE6DD918AFE46DBF27BC06E66AD9
830BF2D6CA9E24A0199DD3E732405F3210C97C9BD21545B5E4DC10E17C1A2C71
851ED2B272055831A6F95864137C218E555B054BE3616820FE671E5BC08E7A48
D683ACDB91E05F469C0C8919D71027E179F4911E878F8D13F999C63C4EC2C21D
ADE1A11979B539C4C5746AA157A4EB4A7A153BC5D966197A7FF6A2DA3FDB161A
EF43C2D906C617868617E72163D5B0BC29C36A60867C120A02E08264231FD46C
1D3B62622A05129188D818E2AE83FB2770DF1D466CA38A49D15F9056BB7AB8BF
D7DEB2E3B3A8157B59D138787B21CE3B3A456E230CFEC1374AC66B7DBBE788FD
5182DA23264093CEF60D5BB0073AEDB68A61ECF1C69669244A1FA0CBA44DB83F
352AEE6012082B8A3FD62F4497B1BE0E4FF77FF94BF221212D63BC1E35B9758F
2D7F8FA002751DC0380AB954331E9AABA6C122F8F3D7E69CE8A6B359184F0531
6B158ACF34C64C32F4671D430820B36C9A9397E9C877D734B17C3BBD8A88CE2B
9F96D7AC5B8D55415E942D6C05392D03DAE53449F8FBE2225C91F228704BE9A1
ECC568FB2E90C73F2F7AFA62859C35F0FB26756DE719BEA5A3EB81A6481507F1
813CD1680EBFCF612FD9D3AA4B90688521446FABD5C54CAFE7B879F24B54449D
2B30738B137B5E212B34BC5384BC2216A5D13F761D6E13A043DB2AABC0276705
5C80CA394A8179D60DCA4651CE8B0A477165FF48A31BEC6B7C0852C9D72E11BE
FEC5E4B984DFDE90218C105999E070FC83F1716D13389B5EEAE3F26C82FE9A7D
3C67A98027D15DAD791348A21DD922C71145D287C7EA83B225377744BBB0082C
22FD44E1B0DF60956DB9C4790F4E2F81C477DD4CA9F4BBB4287914EBBB4F6E36
976C9E573496A2311E5C7677FBC4BB755B8BF925F291DE0442FBB8921402A487
ECF23EC556C3FD66158727B10B74C778FA91EC16629F6E949624D265FA6FDF1F
772E965A2C30C80AEEDC4A1867AE3D6D116BCE0F96D1A0C5138F294CC7C2AD72
8BE152B314E26422FA2DDDFA89A054CEFC6607D932FACB035FC9FD9959C4A468
CAC0F4DD41DFB83297EFFE36C352CA0A6B1485BF8433522BBBCCF9C73FB7334D
1CFC92348F91C4D0EAD90B22BAC6B27D21CDF5AE65C056BDE3B30424F76C8EFE
D7CDBC854B13EAEE0485CC348AC52F5345B7545B4FFC60B6E7CEF8D32354B233
8DF503A03F5201EC012AA67157F4A47B902D269A060A5B8E10A37CA7CAAFD417
1A13EED9533BD4A6E8845D7D236CB254D40930C273EA4372E0B13912B2CE9261
275D51D202D461FD69AE352E95F72D61683267D4951BB602A0BACEAFF9516F3A
C30EFFF3ACC08AD374A730287B148FE8E168089D239E1084E0F7D83CB9815031
5428874FA4640E1C216514AA16C74BD2B9A95EFD7B6B0C575A5D5B3AD1086CE7
E8EEE33490CDCF2E3FBAEDC984FE53D033987580E75E74E455E44496E186349A
DE4B5125F69BF79936565986B3D91E6A25CE6E1C4527FE22580A39805A91BF6B
90EFC8AD31FBA71FCC90EA04875B5A7ED05BA2FFD1C04774E1ECE84B4105ABBA
798C339FB61ABF75C6FD3F24BC775A7FDBDD87BACCB9A86B4D928917CA62C0B8
56343CAE0051A1172E7F234001A5FAA947CAF382FBF23E57F1144425713423E4
4FC1AE1D096D10D6FECAA6A9186B0D519F51D06CC976A65A37E9219492E6218A
FE9F99700C0D0D18BC48632268DA0F0CC24BE660E30645E7F63B0AD49CCA26EA
CEDE4DED685DBD38F5C4BB6AD6CDFEBED1B14A456C27C448C91CBF6337FB3632
7B9A565874F9849FC5E22C5A0437AF29E2B7FA405CF6B7AFEF66AE7449E89746
66ED2D4C15A36C45C0F64E6F185B808FC788984C230B4BA63204B38C309F2DE2
2937A92C184077F5252C9D6171EC6378273C32B61CF65E4DC124B321A4049294
BB6CDD064D4E07605DA5FFB7B3B0A55A09D26C8624F03D8C197885BFF0A20B77
257637447F628A4A642F6F92019F9ECA5B2DBCEDA63C05E5258C9DF131EDD1B2
B4B04E7A5441035163BC2769B79C89ECFDF071E3517C59A45C9E97800724E1F5
FDF504E2798FA9074A37B210B1C24DCC0B78263E2297ECA31D5C258BDD92D2DD
8C53DD3B3BC3835E5AF52311EF0AACD6DCD159C45743B1AE7EE5A0111DCC9193
441FB81F945D219DFF26BF50D80606DD3392CE941242CBAEA45077FBE6AD78E3
0DF4FA54CC33CAC27A337FF307F14E60D1FA48FB8368E307441D6811676CFD38
094A558CBF0B92503014BB169E345C27C74543CDA9E8134F85AA0DCE45EAF612
1AB1D86FFB5E13CBDE8E0F68B19E30D0D9F5F0A3EF2A84AEE4D7F1F63A045297
3F5C3080F313B32066E0C209C2708636C33A6531F1A483F3AFDFEA62305EF41E
C55594660133146B24184070B87C22EE5B80D66C409076D733245FD100E936D4
E844D8A15CF45C0CD6AB04F3B5FCB0BC7B1517BAF21CED4D6CCC3F19D21BABC5
FFA9768D77A41BC3F5C4595D868F2FCA88D6E41558FA5A70FB562E4EB22651A3
886F0ED1B46BFFF297A28ED67BAA28A1302BC866AA7A73418BADE0870872CE0A
305A5E46BE0CF6B5794539B8509F1E2DB4E40124D72201589BC4B55ABA2F5C40
E167175C7F7378203C949B8967E8CCC40F44A2D1D555A4273733874265542C0A
3C47FF7144C4DB276320150FD5CF453A505BD3BC1E98738A1CBE175574037D47
8EF9F80622F57DF4DAB8FB13004ED1DBBFB4664F8D7ADCCBD529B22235740EB1
216799B2D8CEC7CC4D16D8273B6AEEA427D480AA6E3C463F46763864856713DB
05307CE674714CAC8351410627B8D1087155F3788E744158F3428A767CDC9769
CFBE28A30D635D7C4FC44E43E7F13128A867389FD66CFAE939AE2745055BE71A
AA7A7817E24D38773771C77328F4A755C872AA977C062A3BF7EBCD6DEBC7746E
70346293A661684D3988A5D0B29860E6789FA8911E0C0749ADCB9A6B053B0E31
3D490B9A2982CFC167001648FDF96D040BEFDB75A4EB90E2974927BF38F10E78
17FFB9DF2A65CF56C1F63544662CEA0E88A5141F990DF6B5DA79CEB5B4744083
C4697EB37422BF120332AB934D292CE8A3624E2C8FE6862C2211254558459BAB
D8F1D8C76C604098701163703FAED0BB298396C86A0427106C007A7CDBB0AC8E
35F39B240F8D9D43C1BCECAB622C02E721A323383973B61DB81115E3552E4260
9F252F18E01C1EA2B0A1DED4BA50A5822D10AC7ABD664C460A4022BA910804E2
2094A3AE0F2AE375FB22CBD35CE9C2542C240A79BC6A79F1135E58985837E1CC
1E5D6666BC5D61FE6EF590316F9D1E80C42B9A7B6106D8B7F575447AACBB2660
2C96D7F024FFE3292611E82CFE62D95646B92CEF6F03EEFCB3F6950A22B0997E
52C38B55B77C2EE7A4D047F27ADEC6BF0BC639589FD0D1E0A47C948AB5BADA43
9846CBB5B1CE53E96622B59133303AA0F559A481E50382A2A38C98C1A56D9AD1
1668FDDBB1FE8068DCE68E5DA13C2D9918D1FEC7F69A6DDD3A29E31A57B7BDDA
EAC616202162DCC7B9DC52AF821A9C1D2D7F860A2F294904A55499432C7098CA
BF79B1B0A1527B99A4C57673AF54297BA822AF200FFBDEC475158AD6ECB55F87
555012ACFBDD0EA527CB5793CA7CACE2FD956F30D7A8AC7F6A98979BE4BD744F
BB84A87668E3DE62A814B92D3139981200D5ADA86C5D733CF5107DF6CB5C999F
F6F63ABEBC9694F0F67EC632BA8C58E715D92FD6BDD056F29753BCC3E54B0A7E
63EC33F7A29740EF0D8351B5897B126FB6C33E9A33CC83DAB91691690B8B9598
FD3F397FAD45555CF5FB9CD80879A0CAC1CD8E8D536F05134B21FA4065452DE4
BC8F63C82A3C34A01D00F4BB254F2AD7F6171EFFF6D7BE1213C9456AB383C568
BEC17694C545B98E8AD734D0522FEC92EB3182DDDAC54740AD352E7645D08B4D
CB4DA9B381D36C920C77869619855B4CF730E590B0405CD25884D6DB4D49F1E3
D79EC4D0489514359CABED492BD751104091A661A510F268EC681F818780F304
D960A15E583F354DD574767B860C57CC9CCA991E710576C626EA909C6677057A
C409AEE846B4D5C0535F849F33470FA395CCF5C05CBB9A1FB62CF656F7A2AA42
34730F786153A9856C337112F6A555A70EFA76404E2B88DA2DB91E8A2BC5A05C
CC339DCA364A87738B60497CB790EF16875CBC506695DC7D70C6ACCDB2A00555
3877A013482D55281C83BB630CB3EFB0657E5490176CF23420B97265B22B4CFE
1DF9E0B294F064F5160540EF3A452641C82E347A96514E4063A7FF16832736A8
6F21F6881E269CA09FB66DF37CAE7FF46D6B9AE42B6396EBF9A7A06453A81EBD
808B047421B0F88F62B3FF217542FBDA872D03A476FBC7C0D658C03AF70ABB40
03F1A3027E0FE186A22AD461835877ECF843C0E8B8340306092FBC5E91783A48
E010EBD29F114BC273BDC53D2C94275F8956A74561813AA6C2D896CB3F6E13E3
30F6C230C00917A40EC6F4689B65BEE32F5722BB1D1147585AB3B3D2D5EB8273
CBE30D1C6CA1BCC4BEA9B87A014E7ED3CE53D13ACC8D426267CD3BFB8497E1DC
C51CEB14F9CFB4D4BC9D6EA5A49DC3871DE59C89F855F079299F45D363F78634
493829329E3F370D117DEAA18E7A6989C515667C2229779B9A5494DF0B4109E7
71D79D379FA7B408A4675FA3DE17ED0ED632F9A443527CDA8E960411AD4070EE
173ABBFAF9101BE92BE59707F98419503A85AC58B949E8595D66D7B13B8FD4EF
11B28FCB5955C5F147BD7FA141AE0CA2ABCB1CAF82FE22D3281852205087CF45
549F4D5B47F52AF50E8F6FA0AEC0F95FD0B1EBDCF965BC8A924CE0F4598AC546
C15CEE4EDE7E6DD0E5FEC3A531B944CEA406DBEE21C4CF3384A79D0D5CD51BD8
AA5B8B1FC987AEB57E86D3C6FDFADF998A6D6043449FA5B88BB2DCBF2945A513
AD7ECD01B39BE46A577437E1774C3FEA176287C51ACCA15909E987B5AC2CA664
709AA5605EA89A8DCE6B4014CFA781E822E8B05F377BD0187D5EAA0585A98E2D
6726C471578295D824D1FBFE89F04A67F1A360D799CDF92C1218F29C24DE22CB
C6B625D044404C22C89C433715BD77D0BF171030BA84E292B7A81E2FD99D4E67
BA702C2EFA11D4461D833E74E97C9E295C6D170DB6BD73D615D03E678B0296C0
F8BF99321767684127625942B4C3241BD0608460C81D97FA658BC179917B5065
74A4D1F729CEB1D51C82F9C90F0C712917AC482D413ED7CAAFD545508652DACC
1A03842E354F734C5FCEC8C7BEA4C69B066DBC83BFAA473D0A632DA2CEDF20B7
6C7C83B4AE2AF7E05AA2C081BB6870AE38848F3870DD62C7D56EF1CCDD4BA3B0
32C61ABE629BBC464BBAB06AA0202772C16D82427ABAB4830ACEA267B0109A81
BA5D832731D1E9C9F0552BEF7A9B7AAA73760C6A09B910009BA9D93F1A56298B
A43A32D43CAA3988643DE373FF47C176CE92D7931601F0034E6CC303876498AC
026BB32D2F656A3541815697CBA2B6D527B69816161B2E13171E073D7CD85435
3D32708391F63D592B71D98805CD19978C2BAF780CB124372EEA0A3DAB537683
DC74F9E9EF98843F170FB086AEFD526CB81A7CC88046C52E1E56EB40F6F5C75A
FE9D5ADE49E82078858072F68BCD02487EBAF4E3F7F309628C1FDCD4B01F7D00
E1AE0A7CD3455953FFC77EEDCC5B5ECB1FA583064EC17132A3C12C0153C4B87D
AA57FF73AD33C22C81C545F0593DC7EF438FF7A5F76A04E52848E00CF2C8CB06
F295B1CD3BDB1D9E4EDD765D3753EA8DB76DAACAD75CEAC866FC4CA41501200F
F12998E8DA573786AA9A7232287A6D19A12536026BA4423EF0B6D81D38BDCD9D
2BEF15BCF32824F8EE802B461F52BD926A5BEB2E6CB31AF83E98E849D4339FFF
95419941B12D2F3B76CCD34D6B78B91BDFA5DB4D4879501DF3E514A5EA8F1713
E96330C5B4F1B7BA42D42F05E229FC303AE00E954A81F9BD43016F5930A0C490
6C753157E4355F6ED3C5D1963779EB27402522B5E9D459206B3A06E594DF198B
785F96B96E13045594EB42EF4A8BFE0DFCB4C5A2DA9594431FBE72A5AE18991A
36FEB5FD9E8B238B3A095939B6ECAF5644BCE7DFFD8EA3E723F66B305F142B71
B26F34E0538E4B58C4B5984883C6B08F3D1F596B56578FFB0EDFFE3F95E3B6AB
63CEFA183A5A49F07F0F7559994F56D7305139D06AC8DF9466E715D90AECB1E2
C35E3CD3F387579B3C9CA6F5BD741A7A5D7B63FC0130AF374124DC8C6AFA4FAC
E40BD5923FE889E87126FB22C1AC4FFBD351F884D70803BBE1BD0D40D3CDA0DA
F6984C373D3174358BC41C8DD4A215283ECCBC24F345FE65E316F24940198A6C
3B5483129706AEB60D6C0CCE0DF9C130593475C72A92662A323EA5B689E5AD0F
C949536875C37AA2517281A36A1C1D5650AC96E0CC00C03266E279B54232A1E6
E6697196A4270E1DC794D8DBDF0690372AE19121B85FFD357E965228C66BBE6B
D2E55533F7A1BF30B2EABBAC98CE35C619556CF9F0A522E8EFE4BE3EC61FDFE4
E364608963C928AA8B302B1636DE15C83711C8FA060C5BBB1BCB8E02215A4F4D
560DBC4A235F6F07EFD20ABAFEDE0795AA3932556D6AE3F6EB8FD0C1C509FAA2
55CCC2703661C9F48233B429F020E01C1F3B8090D331C3B925DD5D1CF9D19F95
6B192C593225B5186109D3E6636E87BA6F24EFEACD1F06A29DB1D1F4DE0D0253
87641AA4A1113755D0DDA6EE4234CD9AF550DF63A46FC6F698E623BBF6F05278
858904B415033C1A33B7770D99247815E2A8F1216EB42EF9742EEB4E1D90EC3E
F2C0661DFDD996CE1FD66F946B9D4FFADF86861CF8EDCD570CB400D181697747
83F38B92B1803874C24AF99C66E5F966B0E72B725FFBC6172341596D8AE51C3C
4676A65E4D32F499FB1ED170554DA7AFD79DE5953988516A8B2B123FA207BC49
D80645DFB16A79549BD5E41606D80424DBFD6F5BA1DF0EC271C596EBB4FD0B84
DC5EEC45C3FF598241368442A3FB06B460C7D46678069011FFAA3072402D4DD2
3DA6139A548FA99A68AC61134087071ED8B4A37A0A8A1A3B48A2A8CCAA351D75
1828BA7DD5B7758A43F98F4D449ECB58B20B26C40B35AC82623961CD892B5DE3
777908625E1A91DDE62DEBB2EE5EA3CAD7E089F421DF613D976660D547CCB02B
3C6CCF2F577C568ED74466961DF3B0939277731760E6CA8A496B50489AFDF559
CE627D143D52526323CAC273BFD745F65303448558406B20242E8CD678883A91
94FAFABB321AED3FBBB6191D9E41A3666B308B32EEF891C528C880594B23E951
D47C2695C23B9F36D227B8048DD140586D315904EB01881A32C48E18F18B02E6
DD44F156E940CCE32AFBEB9FD70F0CDA0EE60EECA10F8C158C3CFD81773E5976
19C10F3E033ABBFA3656925A831825406CAD7F886B2DA09A78F08243068CEFC6
50835303607F6EBF2FF30333A519AA2890DA49B0F7993B576B58E294FA2057C0
41250A02CEB442601AC806FA981CB12048B3098324DBCA87DBE06FB897483919
219FBE7BDE58104960BA9207A8C04167F290F2C66BB77254695A4C00758EE32D
762B1D2B167B80C510C94E28EC16070838B18ECBBAAE230ED16CDA7307CA73F9
85BECDF856F6E7CBCCB92F32E1C4B4C5DDB1826F89FCC9FF63FDAC7E1EB6502D
E723890A3369F837579E9471E648AF6035431A46F9D8F46FE2B6AA7A4708E3C4
A863B10CC8AAD1544C75FEDD516B5CFD34801E0F808517651ED7C2AA79266289
587BA6C7E50F5DA49B856852FCE48EACFE6E4F687E6265DDD4D02C686A9155B1
1C1A15DB2B5E96E237FBBC36E3A29B8F7A80F359B068E81E92C028DBFBCAB917
94EAF97B8844CC747B810910E7866D4E9C5A6AC8B5437AF93DEE9486BB03
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI6
%!PS-AdobeFont-1.0: CMMI6 003.002
%%Title: CMMI6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI6 known{/CMMI6 findfont dup/UniqueID known{dup
/UniqueID get 5087381 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI6 def
/FontBBox {11 -250 1241 750 }readonly def
/UniqueID 5087381 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI6.) readonly def
/FullName (CMMI6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 70 /F put
dup 76 /L put
dup 80 /P put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB83E8A2A6085DA11
61B1632328B94B21D3CBF2E7752D441A2C9A03F6681FDAB37C4B67D5857720F7
0C4BCEE266586738012A2237A85FCD0425DA7E8E8632543F5BD5D50F9DBAAE69
9E053AECA6027559DE42F7291EB381D866F1293107553809861D43508C6F2341
5E4FCC431AF4A9B3660386AE63E877DCF5E513D0D5702B98D58B34897FEE163A
75CD6F5A2196F91CE5060CA5E72F9C5F79D18F242EEE58135BFAB02D5CA430B6
D1B9A376849751A45E52577B1810C4F0C7F6C8196071D5B08FDB731C5384CCBF
03B460347E0CAC959E4A12620B6C2ED62E06A241D1637F418B5599A7FF3C1390
7AF66A00F7C31B4EDF249C56C268EC9D546CD0489DA51B734C8292CE7B3D9E30
71448C85ACC64FA99B2DEA91AA4CBCBBB9DE20833700AF96395DEEDA3FEB7D6E
D6E3BE4A62CBFA18BD0471C14F3A2FD025C88E8166A9830C5B5B94624A3D6482
D1A1D83805D0EDAC1C79EA858A523D9FA3356DF42BC01886E77F6AA6B04E4E3F
AD107D861FC626F0A439BC3F125D48649E5101BF79C71507FDACACBBB4C4335B
C41A5C15ADF1DF69E1D68C3EB9BE30BDD5385F81D26EC8F2F206C1C7032B9EB7
0392BBCA23B4693686AF8D2E1ACB2FBEE81D75667CD1DDB906BC5B675660ABA4
E63429F16623F20B6A040E4942107CCA26CF6C1F52DEED9EC7EB15BE4F18F2E3
9ABDEEAAEA9AC41E9F20C37C54B33F609F5835AE5A1EC9D674DC50FAFF6D3511
2198195590F62B3B8A6FC8C3431BB8895A2F910F0361062DE32CDA9A7F41E761
B09BD8545CAA2D7124B5688B54705AA52E4716E36C0303FEAD38E0510B3CB496
6C30B115C37E02043D47B4ED796C671E30360800EC13F0F0FF3E0DBF5A642396
EB0F39A9DAF0974678EA1D041F08BD73867065DA91B044EF2AB15FAA6546031E
189936C1FD302BCFBE55EAF369DBA4895DD0996BF7292762551A86C8A3604E9A
8AD29E38BF6FD40172051EBE7C694249F3378ED0139D37EEA3ADB66F3A80A1D9
9C3655F054CACE93BA4AD42DC78A03F42455ED1BD5C122F234F21ACEB8FEFF9E
3BFE0DB2DA6D368478299ED63912A234ADB1DCCF1E519AD20772B71F8522B5DB
24E9658BDC1333D76F07F63D81F7A51D12C445ABF698092A24E5E5C36A52206C
0C41F7DCA529BB0A4D146DB6B4B341459FC17FFA357CA5F93DBCF30B61374613
4846D619423BCAC59B7EB40C14C70ABD985754A0094C98350D01FE9FA371B0F4
38884690DC7700C49236EF68BD6E806E8937AD8B77648F552C0C907007465A76
1475BDD3FBE1CF69C706E703226471C249A3448F81C240ADBE4B5474216D0235
6B0816BB6935A2704E851E20C002F85B653BB0700915B358DDC168ED3FAE3D91
8280A5CA5C2708D622B03DC47A70E5FFCAD5A7C8D9AD563857BBEF92A3BDB588
8B5B55CC9B960F20CA4AEB598DA8488004DEDBC9671488011E836D9D8B6251BF
256D08E6F1808E9D498449DF1F18E48B310D561D4DD3146C2BA64D960E66447F
6DA8B07194E3BFAF662C00737BB7222B55A5CC206A1C46F252ACF93D2063BABE
2BAB874C01AEC438D3F86AE37C9D7FCE4077F5B5785E12C1E0B685134CE2E8A2
2E4DCDDAED2D53D13014E428FAAE22447763D4693E82600F850CA4A49E1ADC5D
C8DFC16E97B9F6164095CF7F31373B591F815621F45DFF77BFBF89EF60C9F50F
0C2FBBA4EA9602E197B9447FAB6AB57B19B1C801DAB66BF7D263F6572B9EEF88
E06744C1FE197B8EAA71E1EB67716B7CAB30C859A2D1B2DB95ECED02B83FBA32
E62F97EE4403FADEC936CC8DAA161F7B509B2723BA2B735572A80D7D087E6395
6A9D34D5963E3C6E37F307C66D1CE551D2F055BFCC7360FBE93ACAFDE2B1A849
37FD373F62BB23C1A2E3DF61C9452A8C995B03D44D6210A968C6293B4A3BE662
C7B0B59E6EF6D53FD293B2C290436B0C448E7D15A63533DE321643E53C85EF8B
060C434E46A736EA617EA00D185323460E77B95C49070B035194A2E7693C3B15
104ED7F56FCADABE49F27F9A576B354C574B5BAFFFC57FE9AF02FBD87B8874A1
24C53826659BEB1EC50446AC26EF3A95877ED3D81D33A8BC1BF7473FB9C11ABA
0F27B38EEBDF77D3D3EA63AE6022DB0D4F1125DF274B86EF0A4A263E108D6044
7A885F5E87362293A53F457CBA6C911D23653DA7CE4BB7D4FF4481AB97C0DD81
C13515F0E3BF8A7E8DE2CE69B25BA9C185D9BF31A65DD290B0D4FDF40B61E2D9
AF92BC6468B3F5AB5D5B88710C489ACC69198D697055B39AB3DE8B3733825C5E
6E763E2698574381A01352A7042A36EA96D17DD2EEEAFF04ABF7BF7D877B0FC7
B6BA51BA994D431F472B6EC4B4C327399576470A1773BCBAC61CDBF0F95DA6A5
0BE5239B7E9CD39E1E4D27EF6695D1FB56D4CA2C2370509547D6D01273CBE6E0
66A696C35D2D0282CB8C85D7B1C51453A0AD0BC80E1D183D11AA78879643D9D9
A3D0B2BD8EE3EDF29483CC5871426232A20CB058EEBDAAED85378B163425C270
B0F7BB46B7D1B89CF84E6A06791195FB17F11F34A2548FE424DE10E376B39A2F
DD9B0BA2F2FDF3ED4AACBD0D60E67C0749D6DCBDE6E79041398DF3FC8D9B6CFC
693B870683CC425C52705902DFD324E157C9829F25B14A057AA92AFA17F156FB
0BA949698EAA0657B03D9538288D887959EF24A427EE7EDE47F304A1A6A715FA
2966273831B5B3A9C11021C153E67A73FA606FE3233C3DB217404C6AED6A4C59
DD4C2A98B31AF5604D8DE8354448B4CEC66022E756B0056CD32E9B002ADC712C
0545C2C16D9457E271D98A4ED7DDE01BBD1856F5C3DA28794D2C7951FE2FE6D9
18643CEEC41CA4A3464D3D3A102653CD6EAADA59CDD44918523B8811C2ECCABA
AC0D188F5E07B37AFD56006B10B32EDD179F4DA693EEBF4DF5425D996585F21C
8780A4D23D24FB0618C12DE65CAD42A0138E28A100257978EDCAD168C55C6F07
78A067F0299890356C2A184820A554FB07448395ECE36C45211757552E288ED3
7DFE46CB92EB2070442AFC85864A45000C4854D728096AD3D4C552EFC26DB6B9
C340358451B50AF9F1B35C2E32D495DE85B5848D78940270DEFC07A14D960730
878B5B55916FB40FD805116C9C2AC8C6D4645DA67A978F1C6FE705EC188DBF7B
FE7AD6769F2EEC4A9B05306D5BCD6EC3A240D6A29ED07D1D82E697DC8CC391AA
015DB6BCD1DA5C9A5A7BE3C5936681215E859E9837027D108A54F42AB24E38C2
4A7D8CF3264AE049D4B1AF48BBC564BCC88AF19D37DD81CCC431D0C554DF29A6
94ABDF8126EE4FE1DFB78559B9BF36FAFEC9791049C865694F9E2FFB7A308FEB
EF0195FAA6BFE7A081B65C5125623903828372F117EE17E588B2FA26DC9AE37D
9A6F0043C019624D3D87AFDB4B90C46AEA78919CEF5D7ACEE316F30EA0229742
55E02E0E2533CAD78CE9BD6E0260A695D776ABA229D89CF9BEA92CE0397821A8
830A557021B3B90CE0B07A4B34C24337FA3FA4A3728B6E013BA01071CA7FA667
6FFB4BA3A28B5D5614ACD4E80E00938C2589CC6CF885A260AF7589240BF8987B
20A19FDAC73FAEEDD93EBCB3D46F735214164AFAF1A7828FE96E2BF7CE1EA46E
FC1FC4527A0ADF2B81CA51E3D96F3E786511AF00FDDD9764CD3178362CF9DEE5
F05D100EC21A301F40FEFC3EF05AFEC140A9466AE68FCFD6CAC1A143BAF2B7BF
D0DF808F0CF87FE2399CD9D2DD424227CA7D4073ED002CD555FBE8057A797B60
313D18ECDD779FA7289D4E7BF82D95A7535CE3F0F4164AF239AC666653736654
C13E436B526EC5A1DC97E1D85C4EB563C7061AE1E81F0B38BC45B17C15FDB0DA
E5F6332721A925D4DD5A97BFF3E3F11D4F4F43BAE4E73A294D314527397F03CE
AFD12DDF9D07DAD8D6C8EFAFC2F52E20FBF62026810C0C31A1EF71FBD612654D
C68B7A24112F0ABDD20EFF3DADBE447AF9CE568F873ACE72B63283CB26B89BED
4B3315F26084453B1EB0877065A76E7B704B27F93DBEB365574A78E92FDB4B82
D6ED91A1728F571FC9CAB636A6E81D0C1C4F5E3F6F4574B6EED48BB61EFDDC80
1831E2AB9327B37881F0CA5D5265575F210BF4BCD8653B4193F74E3FF65028F9
2968B8127C68CA2919DDF529EC882EE99901146CA629A07B4DC59E7868DBE083
6E546C5769655EF6628FE2EA78AC891D130108192053D5056A7BD06C09592AF9
6310B3586A2609DB94CB0079550358F5547B9FBB2B77917A327EFE3F972C7263
54076627B4DD74638C3105FB25DA246484799D5326EE80503F18672B893289CB
1FFF8D3F662FB33E93025D86803551A8A1DE363D1534BFA3EF968871B19FB189
DAD841C177E2AC98B6B69A78048221C5EBBBB86511939D3A9963B3BF021185AB
0B26CA7D0A779DC2F7693C7E48286BD60EE46615E31B93FB0E6992AE20C792A4
72AD6FFAD6682D0F606807D7AE63A6280B5967FAB889DCDF0F76347CE302FAED
A59E1B1AB785D9D0ED695A0D05DD3DF0EF0B275AFCF9EC7031E1357E99A3DB85
B4D137567875F7580E2BEC96B08C97ECB40876000B610E0BFE81E7884C9BBAE6
6BE9C2C612475396BC10EC7FFBD1118A7971FE1971DFD0CB677ECA65DD837B5E
C7D36FE9F20A15A941F1E77C11093C902DF5B7639580B9C0E4AAD13518E1901C
1162FA095F301848770C6C618E371A0AC3463D0D94221EFCC0884B21300194B5
97E03BCD5C4878CEBF352EDD1D2173B56C9B6A08BF3F33419DF226E1633CC5CA
A88A57AA85E21657569916E9B4B79E51B5535A57B2D6FA3EED1D0AA32DC0165B
12F8F5A681040B456D8DF175AD6053A2954F327F4EB4CD453A056FB1701242C2
59755058640C62632C764E002CE928E6B908BB137C28630A3CDBC7C34CF2B643
FFAFF20E345A86F31756C78A8EE2B9B1C5DAB2C863B29A44190770FD90BC6AED
0C25942BBD6A370C21650947B49AC8EB6825BE65DEFAFDDA32007754DFE0273F
B995B8986E505F95E58A3F8873545DDA6F3FFAADE992F3FF7B2DAB76D663280E
CF2BA18BC8871A7C361AA3600B192948CB918FEB0F2900AF2BCF169576828325
449CBF0C7AEDC299FCBB061F491469B9ED1D56771A03F9F202550E17FDB15B51
4772B2F06E6AABA4027D13E8730999532DB2475630D2F8EB98242E36F5B45A94
2D8083014B63A806BB9A01906143482C614B5CFBE8C5354A3F2438B2160F6DC0
81AFCEB201EC67F66DC5808C907A3C6CB664F444D24095D9A11D4978A7B57037
87C67552FD59F5713D0FE03462F9A1A323BB3EFF0AAD61B1792CB109CA9AE4D4
D7F7FBD3FB91258DCFFB4634669FA13E03C0AF699165311CBF37D24378022787
87D1320ECF878F859149B2F994E700A32CB7253297AC58753E4583A08A1F83D5
CBFF10F2D26D71CDB20E1C69A666E9C4D23BB0E6BF1097FBBB204EB736E61FF0
C3FDE1986938F8099694B9F998B3C735770FF21F73B1A6B750498BFD21184F11
5E6AF0F1FBB08EAD436C4AADE1E6B815F5E58988C113B4B2335A340798BFB201
40586D0BCD6AF5A08CE9AA042910197F47D98CBB4411A6D435A46F46B3964F85
032D7F8D880732276A8FD24DA772F642F06C9F3EB4C9090AE4A3AAE67D8768A1
7B2A57E15B7FC626450372F40E3EE28D8D997CCC8CC89C644461D1110740407E
F6D884A0503E05AF830994AD0CEEA924D935749F6EE9F2DD65A58ECD59229918
A303C90E19E9C411FAF24AD5E9B786178F8182692CDD508A4755123B4A594AF1
A8E7287456C1CE2CA485CF4CF9DEE5238AA7328DA204816F98B7EF49EDB30875
3CF8C48E0465BFFA8F2A1CFB6A8F165B63CC80F54C669D02BFD9A0EA0FDE2B40
D69F0101AE4D2C10185AB10953019FE7D373BF40C2F6D4E36693F118866D1267
12BA7987ED4313E8635DA02A4FC1F7815105F8EDFE8004A8801CC1AFA8D123FD
1768A6C39E838BD489C6BEFFD3BDF650DF48D5F8D99DD5A2E8AD235F2CAE8BC9
C13AE9B214CF3FBFAC7BDFA54CB6E675273330608BD35600775FFB2A96FF648E
DF55A78B43CF54CABC0DA8D574CC5C5C62E9D658EC62035EA5028767749E48D5
658212BD39C7E76ED0C6F3E0A1D138A0DB8BE574987AF1E43070F1F12C560009
F48993FAC935EB56A5793BA13C28293601D268B4880F9BC33D553FF3B6A7900D
37900BD3B4B558C84BBAB09B4BC2B14D32E49596DA090E586E28D560903B9744
7D014EF2A6AC4F711A025DBBC841F1C1C93BA1F8327DFE33C803A0993050D590
C7AE262261DB7D04B9DD91F89927161A69E14BB2A48D29578410E312A4793101
B6CD65B298988AB798F45B76E1F58BE24DB207C7E07014E17525B436D41FDB28
D1072CBEB526E17C72DDA00ECDD06394940DEE8BD02CD3C81BFD12BE0568A459
0F53010A0655942C932905FEE87183CE357887E2ED286DC1E89F2F401CDDDFA9
B418F218D4115043892882C09F2E3749D4671E75AB1AD01C78F59FE3F54276D2
A91512C21C68180CCC0E147E834002D7799FF393842CE88BEA714672E1952C9F
7CEF2FD0115B0E292079909A7775769341A7888CE6063537ACFF225B4F396972
41BF46C599D278906F3BCFF81DF941BF5888DE8A53CB0A2D71610CDCDCC1760A
7844F89FCBB892AEA853CF5D967648995559EFE852C95D2EFDA2CF063500F88D
2C83B615618831267BD8F5438DC53C6433CE7347E9C55E103B450EBED6229219
20E979C00B0B9D86345FC3A8EA2B049B7E148A7AA1C859AFE93381DA74CA578F
8FAAB28175D5B57F6A74F9869B2F530009E953913C6925D0045CB2E817A17742
3C5B7574E9BF3BA7B769C161C2496EA2D346B4E19E434120FE92A0ED3F4A9ACC
A8BFE55F04D17DF035D01FC0B06182D8C27B6D32F36551B9AA56D61FB6A34254
D0DF918C6716D8D05B973C8BAD5AD52C06EF3C6503D4E0F7F791511C79AE74E4
4B707612149D583C5D96E534CB45F1E7CA5B23642B1BDBC881FD8E4F66CCEE96
7CC0509B5CFB0B3596682A81E682DAF6AE58F605FD7A1F414F62572298AD8491
B76D0A23B4AC731FB8E7682F506B5CC02F7029827FFD866EF4DBF56E07E7743A
D42CE65B38EBDEA193CE5B172E87DC88452C3DE192E363EB9DBEC4EC65F53002
BE9E94180F73B53CE1E8EE9333DC86DF5FB2561FA1F9B2511962CBEFACA739CC
38A286651CEFBF451FF6568CFFBA8AA68555181147C1CDBA18C4F5C77BA8548D
2B1BA37E05EAF7F69879C3ECBD02783028CB1A8649842EB71023F89CEB36CEEF
A9B04E9ECB0577536B88ECE7C1D81B0D6D5A478F8E92DF83D194759437088D7B
E93C6AFD0CC6D568E60E2F1265A6613F97A6C4068C8EEBA70F6CC4E88A80F65D
EA7B498395390A74BA57221B86611D3EE5DC4632F139CA8A15E5B9D2DC97088D
7CC65197CD93F4803BE4246394F40EDC2CB4904BC273C597F13C8DC680245A3F
F1AF2D7BCE5D69E9CFC81E5E9F46927C5F55C719AFDB2CB1AF2E4D55B0E3ACA8
6BBBCF253CCFF8F02B8542F296CED0EB8A06A88549DC959E22C3D6C48F310452
22B32C44B046A61A4F7F8AED613DCD3C464DB2280D56E517CFD16DC32C83EACC
D3E936D2F3A883B265444D818393E30EE3AA59E6FA73DDC421F5A0FC8442F89D
CCE98189ECADC080F1973E14012C2B87F6A8289D7E1E24B79433A73BE771A305
ACFE83195EFA1EAC827EDBDDA678979C87FAA5768355728EF195A9456C7098D0
9D501CC27070F27AA426B145218C9315AFEE5B4BB37010E988DF32E2D7CBB3F9
F236403EC9325531A6CF39B45B12328C9EDCC6AF76A0DF223531C12CDEC349D2
325D6FAAC3C41E378245A0E017C3352B9CB7F2A1E4AA3D9A44E39D5BCD4C4FB8
7316BC327ABA5D5F5FF14BFAABD822D9433F0FC61DD06BF1493BFD06A184A94E
7EC0C67DAF6DD7825A6CBD56048BE3943949B1CC8EACE2424FE4A69CB97F313B
D84E9C59411BBFE163267D4BE932D830CC8E42E2CFEE0EB76A036B6D9FFACF7A
F3C0EF69030754FB5C0DB9755DD7292B4C730C54C0F76DBA3E6C934A72101EED
2901A35F0E97C666A0F038A9C215D92BED63C96741F3ABD5F9F2C4B444B6919F
E7C44D0F515535CA4864DE403210E35DE285BDCA6D19C77582D4C1390006F9DE
CBEA7B882AF38F42B1571EF3731FCD943CD830226A248408018582EDFEF29E9A
04669AFE475D7024E86F51F136F36FF82EC005C37D0878A06C8A1A0E2801FBA2
7F360C9B5ECEFDFB060714B514D154B576C81EC14BC7ECFC4F551DCEA1C949FF
81F164F454A39AF7681CB40E9DACECE8706A72A69CACFE1335B73E70677E84E5
F63DB6988D1E13AA578A8B93C301702B9D22BDEB1A0DA5AAAF5AB977F62451CA
98027E6B215694D4F0CADEA53DB5F1C68A65CF0A9CF90268A72F5F374284C7F8
662DD7EB407F9649306713B2C10DF51E7A65183AF58742A33BD1ABC19E6B8450
37F57031C75B42100B16512F7A71150CC43F6DE72A51F1C946F20A2626DFA52C
68205ED2C2045C03C2B306AA8675AE3E4B4930D7F058F82FDB523068E77005CF
1E016E538C225600F3C0DCCA7816A1FCB65AFCD822822BCE78E7AF757A0F8EAD
EB93E73EC22B476C8AA915856EE6E000F5FB3B0E7B47D11B781C7252EB317A42
23FD5C1D8507A8F05175C4C7858AA3B82B66BA4707D9C6CAD9110F8FBB99DCF2
032B847B4E8D7664647BECDDAE929720704E84F827767180A78D234DAFA3DBDE
6BCD3DAFB0615D29E2DC3FD6BB3CF23710CFE1A1FA7EDB21A0FEA89367B24362
B59D2FD7BF4A50508BA8E71A9F0D75D3CBBBEF279B16D5558B841EDD804ABE25
63D1F6E69AC8A7DE2ECF2CCC91B7804F7CD85A14029E31E05EBCD3B3F3B583BD
6CCF5DB3FA80457F56E175814D763A7048497D0731D9FDDE728752F86FD3F85A
9F70F883FAA1B2F50E79B62C4F6DE1FDBAE998C4686F791C1CF1D15C119F0610
F907CD16EABC76E6085407F6A0D14DDF050908DCA5B800F41E5E526FD0639905
C916DE1B32107F58EE29C40A4E6322E5CDD017C7C239333154FF02EA0A11A9F7
59C96CDE96356BEBF02CCD8813F2AA8B539369C62A4B31F58DCA4A5039C18E92
4DCE5B2C43E9FD926C531CD16C5A71CB7CE4C68B709510E9EF73EA24B910CED4
778791A094E0C2BA7761FC6ACAC75ACDE5E2713EEBCF0381579573D863020BDB
59970F33D480802F0FFCF180C6CF33FC32C64BDC6CB229AACA69D61852F6E5F8
179C982C14463779F0BF6D2413AD5069DB51FACBA19EA1DA6B4F095BCA3C0C7F
0A6034172FA9F347E2065E11A52F31933E0B07659327F049F31A24B947EB1942
4492A129E4C9115BBBF7C2E9B30A623876CE2100049F2B05ADB576C06C4D1E55
1F92DD4E0A4D47A2079036522D90EAD5693071BE99399E66F0CA6DD234B39D5E
47B5AB9C8CFE9247621FA43871D55B3E9EFA5569554119B44E8A1C93056CBB54
1253611AEF75E124438DCD6F0D4088F1F9059E11BDF098C15F5BFCD3EA468615
1FCE8CD1F1FDFCA97C69150177DCABB136ADB6D64E8857D00D936F9DED4DCC04
1DBE5D1BA9985505ED29C04ED24C60C6E38FEF71426EFCB1CA353B047880115E
23C43DB78DED76D14F45B48B9A2FD60072C2CEA5662B8DADD3CBB1CE596A0AA4
2CA7975E66CF8AFBB1DA69C5A990808EBB25363DE71600B8F66B64C65D2D3C51
DB6BC2DB9476ABBDA76EE8E9C4168413C198949A2662BD1A74AB293D22EE844F
220354128F90060AA390044303CD1CE15C1E98503DCD37181D1B92F2F8D4C0A0
9CB1D5F01B6EF88073913BB2206E242B3C2181936C45540F4967D674257D1AC6
A271D445EA782C5CA370240ED3669357EDF1F729B05CEEB5C1E600D0E9609580
242759DE041050FD65FF946E853C2FC5CA945B5F53AB9C20C5AAF6F5329E8D5E
674CE49B867481C8F07947983781C8A0CE774BB3511F4E58AA483AB37E2E87A6
02023FF5D3ED82456F5FF0F8A2C8ECAF371C05F4B5D054DA9192A03E765FEADC
FAD545C97A2FF64B27B829B05244B82225C4D25574B0A79302F244638B1D88B7
7F3D71CBBCD2A03A53B30C0AEF8C2F2F7CB7A5B25CF0C2885556B229DC968662
281433472CBB7B811B490894525C0AF3F6A86916123CCF2D822BA50EF35A5A92
2F4AA4B7E2E1C0A30366F88CE584CF726CD1C614305531A4E783358BE864C83A
EE67518A43D144FDC9ABAF0A7E055567E4DE5452EBAA9FF19A77A3B89BB411FE
70785211A11FD80747A4933374003616F5D47FBE6C06851E816364D28DC04E38
50CE132FAFF441F0456682BA97F927269264FCACB4DFB61F428C953198171441
ED02D5DA83B17ACAF92FFC4DF03988DE77F3E37CC8E771920640E0028BE7000A
1FF49DB42ECF2EC49B99B2EFC848423B935642880B53389FF59D117E2230A2B9
BDBB453EE590283C06E516998CBE1AC8B6DD9B1354DD31E6419E299452FC58C8
EBA9CC1E4389D04BD5FF0899A5577532A20453D411B2EAD7B28830F56A63126C
A193004A7BCA368487A26C9860182D20E13788E5C6CF39D0073C9B78D2F1DCE0
0731F7E78E9268FE99FCE9F15287FC8A23BD613082D01F3FD2DAC6C3B83E2748
77DBD14754C59E155D2264FB7E6C3BDC8EA761A62C38C19FDBC36B04C31282EF
61B7DC076AB936D999B34BFF502AFC0CAC801C44DA117FF669ED7749EB559905
45D7640F850946F40F8FCA4D70CCDE3E84913A633B9163A26EF8DDB98B96E33B
006261F17935651EC8224E5A6CE9CB293386C5028127F3EDF71B6BECC5BA787B
E8096D13D6A0B486F8CDC2F3625DBCE623A84FABC4F8390CC9E5D170932121AE
844A5543717C088768764FF3A3759AF98C1C1922F0B6C1213F644A10FEBF0C65
AE1A73CACBDCF96BA4777F4B02E3E8760A9A554B45F1C6CAC4075F55901D2C73
1D89B8B6D1BDE35AC27C9014C8B76FDFF096465650B67A6521BB2720B2CAAD71
5698FF11C196CA9ECF223C86AD5B2E9DD0AE53F560771D493F5E4D8568A7AE44
91319BE27651BE1159F4B8B5B410A00A88037351DBED79B19A8E004C6F5FA950
EB23D7200AE0D8652627AC6B3390B1ACC24B9C37097CAC76B4B88025237AC602
23F0003483C72F73504AEC0F2C50F2890180596484D05D98EF01011448D407FD
AAD3DDC2B1E4E42F08BADC2ECDC7851C929DDC33234C16F5CB0595C3FEAD8509
A6DDC8251445B1B706DC44356E0B92BF16BEF5BC07D090A68E9124AF5A01B71D
F85FF7BD86D5E118B83A29004D931F35C9A26731E03C7506241E7E617536CCBC
033961D9655A7BA5BBEA44523A05FEACD233AB6AA538D59F87C43E7DB8609B90
66D7B605080D0817DF7E70B14C0C9AB52986B9A7E10BC0A6CA1298EF21630A77
6D471FD851F0874EC6310EC7A3D6D0E8DF4088F380936D546C01C5395999A7D9
AEA1DB7D483DD7A70EA2512BF0D5CBBE787A6B5D294CF4D47A28CD462B96304B
FE76D41EC4362D94D8BE80B11FDF5288C3F617CB4D9E67AF65E7288B7EEC2852
B1E717461230E140EFD0E72793C5ADC06AAFD52E81E15C724944714A6BD171B9
B9516B75331C64770B87A61BFF7036FF393C50CED35DA2DE46ABE5D0E80C6754
F5D4D29EACFDCFC5A558960B77E90C1BB3E0188B45DFEC14ECEC3333C878ECF6
18DCC9B4ACFD3E6A2E1F520E7109603B87DCD7900CC6C3F408BA61C58E676A36
864771A38F90B1FEB5756E896A116D561287931F48D8E77A4BB88C0837381107
9823967E9EE1FBD9E46CB6E0F28B3EC32CC5D5B3045583E7BC01D1D50F793D99
56B16E015470DDCAD43F2B164B48873E662FC4624196BC57323FBF03263AE4FA
9397D814E56BE8655A5EECBE0E4ECED81FBA304CA232C5783D8692B47FBBA6FF
909C364F3C30A28170B7959E08616ECE7433DEBB4089E88D2346EAF7547B4ED5
66FBB9EBFB066E7B46253292174E457F1A053A97F387FB0B4DCD8ABA90AF2213
2F18411D6AA17DA27E0ABB6E2764B411186723EE7927936DA818490C9675E5C3
FD2665567C5F3EDB0B8D2DBCC5F933B2CEDE0FF82A43D64F464FB8CAA29AA41E
645E29FC2323743F0E2FB56C45D72122DD1CB63F14600BCFFA404B1FAEFAD6BC
72974791361E8D952375E03AC838A384F4F077304BFE40422F2BE048B3D336CA
D6DBFECEDFEF0B91429D4817DB462E70218D03885F99A5E410EAD5D9294EE7BD
ACE958FB11F57AE6A61341000EC898638A0AB1F6035881FD63D862B0A7C2BEA2
CEEC923BC0B46CE4848CD6A38D075AD9FCEA5FC4695C50C862F3C5E12602ACD4
C9FE3783A0DAFB232D10F03289F2F4E5B42CFA11FC8C6D65BC72D2E06FF27793
AA9C1CAED5D04C6BC37C031CCED06D8ADE4EFC835C9D98361DC6F39B128E1EFE
165697CC1F179185ED26E1FDA5797B97D9B57CA4A02F36C06FA7B262D5CE3FD0
4C95EBF3D13EE8D0339111F11897CB4156471722805DF8A1B1C31F7787710D95
99129711A5F4EA83242E474F7808FC2D1A1E80D9F51335654E17FBE96F5317CE
2A55C8B72F83B58E30436DB44063266F56957BDFC97DCBB02E93FD2C660CB7A1
F3B4A43EAB20789F6E319C877DA0AFF3DE45449085ECDCA86B8C2664193EB0BB
616F99908F37792BBDC70272BD389124FC1060C20A216555FB6DAEBC07306D9F
F59D22B5D87FC6FCAD4AFD6955E3D00C3AAC72D421729311D3F4483F82F9F7AB
4C4676BF97AF564EB5CB57EB5A31C376249FCCA3A917F73D79D4BE25CEC7D380
E477CFA8883C2D0570D133CC742D59EB96139F0365EF805AD66F4A177BE426AF
E898363FCDCE09F030521A2CEC3E888ECDCF6AD32F52B50E842C8D785757B0D6
FEC69BDBA3B85A3E0FA83191A5D7B6D29E7D3E3EAA1DD1DE5FFF016C3B46A42F
AE99AF5FE68B80BFBE54AB920A79FB5BD548D4C0492EC241E2226E9C5C6253C5
E17108EC6DBFC9061EAA5DFB3AED6CFEDA91F413150CF1998522B3087D2588A5
5294C9BB4F652D09365D3FB83480D8BC725932EBC6CB0A89E05BE99F68C24195
600DD344B444FBA444D0E0EB9CAE584B4BC0803CD860FC42731228F5D39A4DF0
0FA76628B9B8FA8093ED6532CCE297AF3253E80EAA2E06A890B818FFAAA51202
1B3E9789668BDF8CF177BDB86A2FF71654C0D74C2E2379FB2BF2F4651EC443DF
E7FE164D449BFE4AB9983AC5A628C78BCA88FA1FCFB940B90FC849AD2039FCFC
3B4F1DFBBD57F7EB06AE3C78E953FA05CC98E4AEFA4A259603A20C9B6EAC89EE
07271BDAA962D4234DA154F764C190410E8ABB2E032472EACC07D3844E74640C
FF2FE8D943090BAE1A7B5A560C6AF5EC2A823C9BBA5972F6D97244A0F81DD9EA
698036A001CCF320EAFB53F5283E020F095C16607972A1ABBF6B9C8BC92CF84A
D260AB1A0F5E687F8A31042D470AC9E0038F78F14100FB47BB680C32615AAC14
C1FD4CA46613BAA27025331DA12A7F30E9399E553030FE02DCF089F3E971CAB4
F363726453F8494C0A036B34B7D4DF0536D5076A7ABE10810BF5DCC04B787418
09E611CA4ABE83E049950B0910071281275352EC56650D7965E633C8BCE1D51B
7782BCC02AEE61684AB47A91145813C546B78206DEA1C7535C7185BF01191668
68B94C4932269459B131C92F138F2B4CCBCE96CA2346067DF43A5AD04B297ADE
5DD4676802730ADC918AF9FFCDF5630867F355A276B5FA7E3B7C66109FE3A712
9DD53A9F846E2F88FC4C75AB6E79AAB6C2DC745AD49C4DBD216BC01C9F912F6C
8BB81EE839F0B98624D870163175CB0C0A721766F9D9A6764325C03EBE969FD0
3ADD6B74EC7BDF4CD50DF31724013441E6F44F6B42D27397087C260F73E514D6
10DB252BDC51022E169694F6684F3334340570C88A4CC546D5439607484B4EE3
67BC05C862E7B0F1BD9EA1E2D88475AE2E5B36D45B93829626EC28BCF2AAF130
1C637EB1B620C5A23E03EBEAA6836D58881095EC05434FA358E19838782900F5
4E9F1524F43017C30EF297A6E11979EB9FCE8BD115D5B4FFD238FE5059D1A390
994C5DF1315156CEE75DFEAE60590A34F8B75487A083F4EEFB536CF550112FD2
FC64C479ADBA1F4E168EE1CA221C8E7300AE01CEBFFEB8C9411CF7483C329193
0325C40DC4E59AD338BDCEA939C6D649084143BD72E17E839D975C014318F00A
DB32FE30DB570F594E7AC69CEEC194B8DE94C331A564129D435A3FE3288BF0C7
535B66AB0E54EC4D6CF6B810E8AD0BFFE731473AC18B9989530D04FC686E79C5
14DC209037BF74FAF8AE65CDBEAD14650E0934F4FBA2448B9AAB20C5F54558C9
D0E5B50D238D8B25CF9D897D4A2368530FF76CF5C0642E2DFE3AE57BD5760D84
A43100085EBE5738982D4BDCD1E6AE09E967EEAC5B35916B06FA93B493975A94
56967D47031623D12B4A97CE126C09731337662B880C7F9C3B7A3CE67A42BC3F
B649F435CF0AE0EF1F4E86A3604B791EB9C0DB880385A86AFA71141E538F4EAE
F60AD2AC896260F64A3BF3F7C4F13406ED15D28A728C3F6301253EEFC8E3ED64
9E31C43EDE2D52E9E14537C2DAAE094BA6EAC5A6ED0BC2E24BFE9B099C534FFF
7B9ED79DBEDB357CB20E797CE073D5C5DACA6004DD7A0AD0ADB6765A108DF957
A4D4B982ED81233F15C4F867C5C72ACCBFDA16DA8A40EB6F668A812B889A493E
ECD1780BF470E4BDF95099E195AE22AD9CD7AB76C582083720D9B5CEB6E0F37E
69D4D0790B663AD253AAC0457064436D5A8AE151BF4F2C1ED7237CC897D2702F
04D97CB1BF92DCAD7897DD27BA142E468E974BCF2F3C78756681E596D6723932
0E5A5F3AE388B294DB0CF1392ED410802D4A5A947914E96B31393139F1617215
FCB9C2905BF091B5B494E9A5237C076159771117FFFBB410D5EFE66A4E89CDC4
0A05B0E05DD8F08011C1D6B4B9C363757B8652500D0C0A457BF0B9A8A33E790E
A24E653230C92BCCA7A7CB87D8FE13069BCDD3DAA71A86776E4D269171642BD1
E9E2B8762585255BAAB83AEB85180DAF4541D2506A50FE70D747748C9A62A919
4A8061DB8F5B6534CB44FA861F4B46DB19FE1CF433E9EAF4D6B4AB914D0BE309
E7654E51493E546D8A9290E0240E733A87C5BE86F5EA4EA7EE200388F15055B4
320F452B467064BED90B4BA7EC120DE338FD7A272C2D9F9D4E7554FD5F1527D1
B45517EF6A92128265E2C5C752D485F205FF6C813E0A5E2E35AD5D0F0E632746
B0C64C2311006A8C82EA492B2E436AE95EDC9E8D9BE3BAE82ED3779B4EFF6278
9A1E4D8A4E6642AE3D11A7910FC0EC677CFA06828E7E8ED1B744A953B26F74BB
DB4699F1D4B33636B6C764E7D29C7F63FD4FAD1C8655D7DE9109FA82A309C6D6
207D82A815622F166EFA4B181568A10B536F687629890BD992AE5B118FE67F5C
B1B819DD6DDDE24B8239D2830F1FF294D0409D3FCCCB4193CA46E7F3F33135A9
0942A6E31A7E07AD0D558E70C4FB667BED984ECCBB982F8457B3A330EC5A5244
3ED8E8970961C3BBB48708D883DE7C8A5DD9E76FF784F79B35E1E102A616E1F4
DE1DDD507FBB26C79FE66ED6E2DA8EDA4D7A5E616DDA16DCD41A9A5666AE74A0
2CE2740AA206CC9EAF14EB9E9775A7AB9779B31BD4936372B84FB6CAF841E3F2
D10AF99AB3F29A66B360F2FD9279CFAFA78E8A88DC569A33C5AA086F4DD61077
BA54F92084203123895DD10295E4CCA7589260E2C221A64BD8FD2635D33CB9E5
21C3342092145198C0FD9268870BB2FA441CDA2C40E0CA9E1FF612D132A33D26
DBFDA23EA687B07E4104A2DAC8900506BDE04387F099B4CCDF9452077DEC857D
A9FBB338309541619CB1D9BBB045135B64FA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR6
%!PS-AdobeFont-1.0: CMR6 003.002
%%Title: CMR6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR6 known{/CMR6 findfont dup/UniqueID known{dup
/UniqueID get 5000789 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR6 def
/FontBBox {-20 -250 1193 750 }readonly def
/UniqueID 5000789 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR6.) readonly def
/FullName (CMR6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 38 /ampersand put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE339BA29C1C6F656
1DEF13780383DAE38A868377CC7D396B2A05F341AEE0F8BD0A0191F51AD11A4D
2E927B848A1EF2BA15CFBE57A51E3AF07598275195C9613041F71C1AF39E61F9
EFD5F6512FBDA76E29DE6B508F62F5CF9F73F5288DF1C7B0B82C92D3B6358BAD
EC3CA20BDE55DAA7CC58004AA86B6CBF8C410D8287E88BF20588A39309C2B703
CED322F030AA6069869064486CA651DA054FF3F5E56534CA358B0829A6B954D8
9103436E6B06DAD1658BD4A95AB41343B01F5866FC87C4EDFC71F1477C98F8E1
1DCF27EF743FF90BF918AB8C4E5AC35841E2F745480E5EDE1C1DEAFAD8D0018D
2C1F1CFCAD9F6609859DEDFD1648A6CD23D8ABB80747F94899F17C8F3E6CA55A
E176F19CDFDAA0D7C920B3A72051A4745560AC81978C92459EEE5AFE85AB247A
32981139CBE352B248F4BE5F73503A084A3E91F05328EE521D9669E44E202584
5407E7846F9FEE3D54EA18FFB144BF2D6803BF65AE402034B3CDBB40DD24217A
3CE0E95E2717CACD603A958187C42B3558AA38D6B6390EEEDD396F96E6041FCF
6F8888221AFA87EAD79F46E0E32CAED91E6C8500879AB6E580C581E8C8CE9B68
2BB5EFE2604E8DCB2432D39D75EE556969F1B2FBDF6A4BC72D106AA7CF22C268
464027898B311613E06E1584707F262F71D9F49D2149306A88E02BC60BBD6BDB
EF41D90F19197BA9AEF32B5E63D5B9FF41B5602F9F786E76621DA54D574981AB
87A72081EA05D6C6BA940EFEBD0904EA4E77BBCE17E20B42E1722617E0F6EF32
F1ACDE9D758594E9C81049CCC10605A27C2A06872FBA9F159CB155609B496ADA
4886F478E44029B5E620DE8319E257697E93E1CDFD27D560E2E4D34507020E2C
D9FF06BFA14E056D81DF701FAC3ACE4BE6C098AE116E079F0044391EC1661F6E
7A93B9320BD7F91E8FD2E8EB3F5CAE997D5CDD35107A1D35302260D1499B8B65
39625B7925F97D917B66BAFEEA992873F07220714F192839948CEA080BDB9A03
77B9DD032273DDB5629CB28B5D8797EDEFDBC601823E038384C90C79012A7D96
8F27784DA15BACE21501C26E3AFA5DCCE81B52B0ABAF71A35D33103EA86F2415
A39A830D559C5C6CA7423945BD3DFA942B20A06D7A8D8671F9831DBB52907AB4
4E54776D29C6085CD9970B6DD21DD3EA8EB09C49CBEC6CDCEEB0BBB1B8827109
3BDE64DDA024D67F098D6C1998506DDFF7907ABAADA1C39C759C850E0C6F8E89
A392D1C9329ACFFA92D361218D75E115F70A47C53B73B356D703E9C499AAD098
AA9C8119EE9E9708A9EA3049E976FA19AD04210D5F6092C7903FD155113F3A3F
269B746560F70970AC9F8D09956E0E84DACE4112C4E7C7F6B3F0B63D26EFF95E
2B2E9699D16BC8AFC4AD9113AA3A974C9E82E877288CF71E9169D2DCC61AAAA6
C536E5604EF0716F6487292BBB677518504B52C63822BED3BD5FD14EB41EE6A8
AD4B6CF90D39F98E12A765B645CBA3E8552FB9A986390212CE119E7C3DD675AC
17BD006144BEC534DA2A860188619F17589008409C5A309CB83FBA70F6446B6E
2B56991B6A03B1DE10C621591CEE45BECA27C54BC8B4F1754A9E8F660812710E
117850E1BB6FD89BB13F8CE391C43DA89EA67E9C3E7A4697790EA26B0E4E2E80
DCA508873A7AFFC11B8C02EF86C2316E8D8B6BCEA37F81A3A87546705F070C3B
9D4D28C366CEBC1EE485B8E2357DBE46E86C87B9939DADA60888AA9F1B92FECC
CC1C198DDB594BB70A8FE690ECAC21A414BAC89BF019F34D2A130F485EAE35B7
2A10C67EA3A48A4D9734759CC93AD85C6A570500AE5AC9973FC76EFA06BF5DDC
26E20E28D16B50957EE01AF2653F8D860817967AA5A9BF9BF7ABCDA710E9F34F
4F0EBCC32B3C9C2971F6225D2DAA6A451366B83F32B2ACB83E746D365B2DE38D
C1AB7447FE7B37F9630E410E5D8F0ECE74DF46C538947B3A167AD9F3E4A7EB3D
60F5425AE75AC3A27D39311DA35696C3DC7282AF1532E7AECE63D13DDA0296A2
01487185FDF1875AEF55A36C17D6A8DD329279D229259463A2F05CB7A874374B
E2320E1F6CFECB9C1CE62FF468C29751ACD9754AF1EABE8E7696C2888914416E
235B6766F20FFBEFF285277B639A51EA2F2E30D207BC891B00F0436008F980E0
9EEE7FB375BB069B9E0BA11DA951A99D8E60B4F920A0495C247FA7DE904765AB
DB5C3B2D634757E43EDD6FAA4DB3C67F82D6853E1170F0B2D8CE496DD4E72B0D
28277BEF172F1402959F64527F9B640619F04416DDB9D05FB2ACD019CB9C119E
E544D24EA6DAC5C69785394EA50E6EC9AAA9E14B904EAF29A733C6D7942B63F4
85729686742F26DEF78DF0DA1CA7CEFBB684F4CAD99021A3B3D1FE03B9C5A4B1
BD04CAC89BB91B11952A2B17A61789BEE0C54B46C03FE9A1AE73D17CF94BA30A
237C29D414C3BCE8E3E2DDF83C0BD59DCB66C4D2C3DE73DA8378F3C6C8035D28
7464399857E57651A53E9C4AA68DFCA91B2376CF98AC5290FDB9BDAD9EF1604E
9B0A70EDDA1E564B6D2456E7BC722454ACA8C4950FDD44B6EB9AD01169A9F845
B06A0DDB7897C847A5B1F42258AECF3807AE936C8F52C3A7A0A85D68160AE442
FE81543DA6702D76AB6E8701F80DFC1D87C961E350D0E52AB2A298B9E5908600
7E14D2A87309043CBF13F69AEAAB1BC239DEA88EB5176624F6046664B1D2691F
FBB2071D3706F97DCCA355A6DCC4D09FD35DC078FBAAF672FFDECEC61050A120
10B5A96629041303FD01ACCC7686165DED6AA712FF8E5E85DE33C4E7D877C49C
6C469A90410BAF60BE65ECD91CDC2EE7AC0CA8BA7B53865F26092BFCAA0BCA77
B80DC51DAD09C93C8DD8E43502B4B68F3D5918C3492196292447732BA90F5AB4
9F5E1D634ADE1CCAAD028DE5EBA9535F6FC5908DBD2D643E0A7E059C8C386FDC
E72659C0033F535C0D7F6B98D0335552D0BF3C6E302B672A5EAADFCEF81912E3
8F54E6FB7EC2B325125159713D0AC50DEE3673B9B148643727E94C80971A2E73
5E1E13237BE69C84FC039DCE02ECE2668AFD047F21A61BB94A9F498C9FE5CDEA
B274B40728B6F6CA9B6C15BAAF92F465B0D7311B46545CBA90D874839443CCB9
3110F052EB247B24B45A3D2FA6FBC7EB2A4BEC2A5892914B3C5EA3F4F9B9DCBF
6F932D95700E045B49E4B1F2C9D2A42CF39CA2F5A2654E6E8E6E92473D28AACD
5E35C6705EA728F704F5996D286BED433F976AB7E018621A577AED7C0AC0A84E
A032FE1869F603E6F20386E3A190A30A21EA886249ECF8CDDE2C33D73BA8647A
3DCA7A8DD9E8EC8D9A415D126BA38B6771C489DFC419303EE9C1B83FBFB3A0B8
97D64F30E4BCBEC24DF603FF3BF541E00D5804B6B6543D3D2B661CC551D497A9
9DFFF535AF424B2F3150BB39AAE8CDB306AAD37767BA10BADB031DC2FAB16955
EE78342CCC0E8B5976BF98F215461A8C6F63EBE6E2F1A1104662DDE53388CB51
8B44F3534853B8095F3B746A2459C2EF800FB1EF7F235EBAA9731E3AB3BE4369
1D3636E3ADD5BDF0C34FA80E90D8A1DDE770943FD196E0A7C5F1FAF6970B34C6
4673AACA6B2B5C12B9608521AE736C1F4B97209B063D991300ED5AF3D7F27E76
68E0B858FD8BFF86581E2B9548C691E3E5D9EC4D39C9715CDE86C7D22223CCEB
8A38C776A30AF14912390A7546DBECECD7A687D4F08646E57A12C80DCA022B7A
33399761A50B8E0ABEFA1163EDEC3DFB5DA3248792EEEDD894872D4E6814B4C3
548BAFCDE0CABBCDB97EC6D1BA47F2E77CC1389BF19D73661749AC33F46A618E
A665A85776545BF9662F2179D7BFD604FA8EF4700591AF3AEC647E27B24B76F3
133F9198DC15C1AED830E737909E43EB91C334C44BA35810007A3888E33F5DA5
B3B2C35481C648AFE630CC3E08F77744E401B2934E407D1EC17ECE737606B076
F8DE8EF3344F57495EF49D11580D6FB28AE0B1422521B320843B13467501CAE2
3DB93D7BB779F73B6AA30050DA74BDBC3F8DBB30F32EAFD07734A151BB2BAED5
C9B1F790059339B64BB4146470F30928C9A49AE88906BD6FDB7431A4B50809CE
0F67ABA01CDCC2320B0B097187B9299E3D80CDD7BB5DD5BFA7B28D924C5633C5
45A23CCEE097C41C3759C1FA8DBA0DD95034BCA89BD23FAC18C70093F40FF2F8
0FAC5DD4835F2DFD40540E9A9E9FD951A8AF2CB766597DE00147B163BACFB7E6
EFDA4DED594F1C746D8B46A1145E0E4058F5917B3F21E9BEBDE745EE72CDCA64
FB31EF7A2E55265F32559480E2B6726D3DE26FFC97EB4E3160F117E890C4B2E5
8DF310E6A728ABA85540F571C024F8DD58E1D7827FE97CED5EB31547EBC36415
02B8C0E10B7E37D816F01D56A364B8552CBFAAA95BC4BDDCFDE91CE0EF005B4B
7AB56FFB47A093AEDF0DE1EA48FC8103CA3CA1470864D2693E360006D05668A8
AA422CCCED20DCEEBEA5CE0DA1EFB00FB93E922B18124FA11A88D0F6E0F719DA
57603DD5DA42E1C56C2FD9E5415AA199D4F334C151C1157E75C107FBBFCEB706
5F4EA47A29B54ED8CAEB8DDA2F53D2A703B95487619780A52DA1270011648A28
AA64338E04AA5B92C1EDF3D8DA34FA6D227A0325EA6F22E9B38B6338C657BB21
CD4C582DC04010330F62923F817E4EDC6E5C0E6500F2A975A8A95BAA30C4A134
BB31B5AC45A2E7F6E9CDFC810D41344C4F606049445F8E93D74271C1E29DF7CB
5459593BA28AECF64D903D3E4D77CF5C04B06DE44A41EE4D9FC769854503AC85
69E4A5106E84016DE3D59865D4AB30BD6C9E45C45DCB5408421CC50CD6179C85
34E55CC70FBD8FEFE9F1D5160664981716E3BC7F24B6F54E0323D9BC4B692971
24419EE62D8B0BA726E2B4294A9A76F328B8101DA29E78BD5C4AC383350FE196
4D42DB1653637D19530124858950C22F1E9CF5BC07D46B7A58CDE19CC88DCD2E
7FE4EEFD8AA6047E919823C8CAB2EF5274F45E861E6508CC11A8AA90AED2403A
B2BF1315C2157B3B50A3685205D93E40906EEE9DE5985405974BCE0B84BB37DB
080A45C5237B269B93C0A7CF294A18B45464A41F604C494CBEF829A381155CFD
71CEEA54CC39EEDB6DF58A9896246B09F95DC6BC40BA6916AAB5ED3D24F66154
3662F8978FC63DA9280FF7ADB09EA5BA79D3B66E0C88BEC1EDD78DA93839073A
A4D7B0E627000C4ABA76C47CCFEE92E319315333A5584A951E34C55412049C4A
A5569FE65A006F77B416E0530AB6A8E7AD6C72340AD4CE25937158FABB2153EA
281E1D840206F5DA38E00815E9081F81DAB9FAA8F4DAB305867AC84735DB4F52
A36129929BD2084A8EA37BB6889695204BF7290B68D5E722540BF8A276F8BB6D
451D582EE59D2FF03F6B97DDE05FA00C3D375D2D0AAC8FE298F85CC067B15481
48D70B6A0354C705715B891915FE8EA45244677B9FCE81E72D66177E309F3F83
F744B9EA9E55C3B30DEC6E5E03B3988FD526A82A5E8E1DC79127FC62B2FA7949
B3AD3148868DE22BD4B5708E32CEAAE6ADEED1F463EAB9692411E18F8D6BF391
126B2700B4CF3B59D02E3F8795130C96285A63FCD1E0F647ACB1D35E9C58BD01
1DD06BABA00CA4343BEBEDBE677E053E9732B33A7495DF51782A07DA07F5646C
770C957AD915CC70BA8E08BE7A1F4E6BA5BB9C603E38F6FB0A2578471C4D02F4
283069856D926B9076EC73AA39CEB0A061AFF1575C7093FDAC9F89C3DC06EA45
06F3C2A3BC9FF21128B10CB758DF0F099B459A5264A8C24C098110D2BA1A8532
8FAE146A91BA7D033F591AB1A94B8A6FE0FFB610F698D216D58B4EF6C87B1524
8037CBB7E23D8550A620341C6625A1A2ECE7CEE2598D66277F857231A36155E3
984F147783E9B93975AC38A29F2FBCF704C8A04AD84C3E04A12D2321FA56811A
5B6744813CCC187968C5C26BB8D3E6615A912FA5369C01CCF8C0DB790593B190
1A90CFB5339B8771F325C5FC448D36C7312B11A15A8635BAB59CF3CAD176131E
026F6E141B2619EF7F3048750CC9291397F141591EEC8B612D6656DD34DB54D6
DBDD303CED74BE76664E7DC86FCFEEF2001C9DBA56418FB61F589566A47AF36E
C94671C5E8939AF9F4D53C0DE7142B7B63C86AAFA65877EBBB48C64589AFB2CB
1280AC099FC48058855CBDEB6C2D2A0D092267996591DC3B5EC8252984E9B27D
2E9EDE8CD8303F0905DBFCAE497DE1B755B924452CDE11CF4F20893DD6FF7251
427F520FE00580DAF1703FD968E0F8ECCDE618E1EA5820EE6CFED97C78864EF6
26FAFEEE194A268F24249D44829AA360D731C34DC285501E966A959180718F72
6330E4CC060588A2F65AE64A720DCAA818D49D4440F5D0B6C1F6C3A107E12445
F1BED2D3FCBB87A9597F01C7332AA79143564056219BF87D4B907A04F77621AD
054935E883B2B137D3D1C4BC792E8335CA08B6D83227F35736C41312A0BB077A
60FC6488C5E02FD51A10AC113D4EF70038C649C1677B2204A77F2ECBE9B3C341
F4126BECBCA61E3F3801F9188A3775924A62D30FB096B440286FA655EBA00A74
9A4162904BEA07CE68EE76018346DEEE20839C9A2FF71179B58E1D4AB30856B5
F5D97295A097174467010B15D733AAC5813CAA633746B430B1AAF9F997FDAAFD
436844D1A56B8E25A89D2CC4BA6EE7ABD167818FD4F6C747E07B262C99EE2C35
323F0B471586CA50F54C6381B052B15B0C58C19DEA82C0CA29F00400B727419B
2379979CDCBFA966AD513FA903160C571C3BF1BA239540B11EF2371A3880837C
6D6CA2F374280CFA1586427AE975A2AEC34244874E4D441DBAC6CD1828841C91
069AA87FAE849C5DC7C9EC1B9876E59F3CCDF8BB23D939F5348D7486934BFB02
CC5A22541ED352616830A510DE7732E5D8F7E785BBD31C2BC9D348CE5632654D
2C1740F89D57FB2AA1FD8FA3304EA03F757BB8F498ED98E48485722E78D97B12
A05F3A28438084D1CF90AC4C3FFCD7B3365941C45E1E02CB13CA1E99F7FA1D00
1C9D489D5C95F019AB4CE89FA3B6604473DBD2CE8E278969E0A0FCBCE68C23F6
9381882443D3FC16966555FC222F3FC4B1207522201AB7A15A7A6F22CDC9D392
360BF4C95DAD35770E0AC7E5EFF015F2C74ED7391F40EC94B8D1C163B5DEE5B3
911A20C2625AD3B24BD94D2A42405E655DA47D3F94F882CA2F479437B4E0BE71
8AFA4482C6FB270F8D05B4599A01403DAAA90C01DF3AA7C2BC7E66AB6AA833AD
FB6E5EE13E45CC7CE7E200FBFE639F9CFFF5D08512C02764997FD28368969BFB
0876F236EF6189BE73AD827332DF1B2EADEAC0ED3B939CE5BC3CEC78975FC636
44FCBC2CCF4396AC7343EC62E0E4F3DFFA2B880BF31D93ADFE201BE9CCEC8BA5
0B9B919E05B851E0909968DA259EECC6AA0743F25247978CC09C28C4F878E29A
5070E4023BCE95FE0ACCCC01D0EE219FA8344E8F6D7D4347563BF8AC030B9097
41F24D4BC9494915A82EE9FD37FBB6A46BF077B728FB569B1258CEA5F51F36BE
4F4D0F890D782E44748CA3FE8C8A515998371D9C7D2311F192B4B7E7C68FC6EE
3F7136714C282A2570FE591F247A08319CE9EF1E43274E4E57166E31A2ECA506
85350DA31AA4C33C9687F5210BA225EA1007C444FBFA2126769767E47A967884
9F68589E4BAA9ED32A7A466DE35554C132810C68ABDAE536D9D884352F28EA02
8A555D2CE11F30598F44A65E2D86B43ECCBDEED9E4E5B5B7DCDA20EAA09D9FF7
422FC91F2201431A9E8FC624FF44D26C0100183D77BC7E6B1A6CFBD3FA8BABC1
AE4CB0FD382E26BE0A83169B46D91429DCB746A0326243E212F802AF6A56C709
6E70C6C7C97A5D19DE99688F44B12F93244425848E52C19AD595E77B723089D2
DBE384E8DAAA2F2A7A35568D30BE7E722C878EC42FC91ACC11B5B71A73BAEDB6
4CD190A4AF3020A41233E6EC7930EC40AF5E0F2AAC20B3BA6AF49F21490EB163
ABADF3897DA49E7730AFD38D337223C162E0C12792168B4DCB39340FA50385FE
613B8C6CF8468871CC3A2730E6224DF4ACD4E69BDB5A6D1E974FAB19D082FF9E
F4CBD2E226349B88342C8A98FD395D0020EF839613CDAF7A92E10EB839974638
7DD00571C4AB0F2491193E4CCA27A5341ED1204567F9297A4B50EB93D97BDD0B
6C07378482DABA8A7E0BDCDDC4AD4FC15243CCCF8855A66575C6518E5855077B
226A997C2101DD468F52129FBBDAB28057BA92968EF42F3E0F3C29672D66806F
CF15A495336A008BB32B813CAFDF24A8359C3B65D9511F017DF1FACEC650D806
B2DB15FDC6571C074B15D996B15FB3A9FED7D741B4764EE5A2262B462ABC56CA
AFC46FF2807217836D2713F3E8A5A080D9EC1AF5A8E4425C37F72B208B7BA9BF
5CF8060E626254612D6F3953971593B629FDE4CFE4F1895063D9DED644FCA069
865AFB64EC1083868B222B50AACC02E3B7C62E2EB2572FFF6E903611773F074D
F999EC79F746BBE0D9CAF1541DD0D789E82DBC2FAC7DD3ADB4B19A95CC2AFEB8
86B91294A00E2789D436CD996CC1B83031C61E05D95369C64A4A55A5689A2BE2
559BF2CFC917B7B9BF06DFB5CEC7C81A28E724D099995A3469A54B2990C53A9A
1C027A65FA6907F329B4411F1EEBE7EFFA8B0BF48551F54CA0C1ABA65D00D0B5
70D3FFC6C7B15C041BFFA9AD457BC993BE4327CABFB84E2DFEE0C5D2E61F6610
042476C4DC114DFC4A6E51F11E6B529955F5FD337D30D99773EC1719DD978676
4EEDD0AFBDDDAA1AD89834FA41D55D63AED09EDBC248B40C04CAB7777F5026BA
2F95A608183F4C11B6F0EC61581A4B4CED1C087053C18E457F6B598AB70C2044
B54EDC8B19D4D9783A5D78456638D3CB10BE97B22713FE98F784BF863611D41D
D8F3D560CF68680EA16CE472FA45DD149F6D8591A17E3006C217FC670C6161DF
4C01355616F4200B4E47C34235ADBAC976F963B2E7ABBE9B518B05EDE5A07CBC
BB1E38A0F3566D0E6EF717D00F03175034AAAA92BE85FE2786BFF05FAB234C6D
D33A3F349FB94E38C1B54B212B3CC980ED3CE58D8CA4C94E9C6D00D475E1ADCA
7EB79B6149A4835F44E131AB8FB6FD277E0E60C072C95B76EB8DA05C2FD566F9
094A5C97AF12FBEA13E511558BE30216C364F1E1C96CF0105859D00AE5507F6B
29A7BDA67F4BC0CD2364AD48BBE6056A1F5B03FDFDC0054945620F2CA01B6F6F
E3A46D6C33CF6F46935FBEA00CA67EB2BD2876892DBDBF7F549A63184F0F0A96
1BC5012BFE6D452CD36AA6D0E86346BB3A9C05EB61CB428A38B1A05C92F1DDED
5279E2586EBAFCB3AFF0B03129B14C19793DB0BE06661B5D7A74383AF874181B
124863AA3F424D5D1E2785C70E4B45E827AF871760C7968B2670CE7D97DD1CF1
F857EFC6AC674D221086919E0E40EC19924E15E480A3148ABC869668F3BF6B14
CA40BB557784777A8880B12EF7D9E31664ABB6B0AA4178A1FB5E59E9B6F5C82B
560FC4C9FCE8C6070EC51C0F4DA793863F4CBEA15C2D0AB9398BACE8757A8DBC
D74D65D94F714EC089E46CFCF507D305E26BBB9E65CEF991B8E05C1BB4594411
D67B82244C040F0128208E3062F3CE0AE052A25BCBECADE20220471010D54421
D6BE6C43A5CBB77C980D58D3EEE36B0719864E18202FE1B2C9865FD9F179A778
3F2943DAB08C2AE4AEDBD174F57F6668E6592563A0309779937523E03F1EF37B
B4F76D96A6E40EA60CDEEF09F2879719FA1A4B6D8BDFBB0BB9B69B342ED55C1E
FB56C2E69ACF5E71BF50270BAA41D11FA8243EEB142D3869764F2AEA0BA03558
31857CDC11AFF19C5A41875103707B4EF44F3E4D5B44FF78626EEAC02E67BC7F
6EF87FA5597F944A357EF98F54E6392B6740A2FE18C74D95E122E90CF4CE3CD8
3BA6DA0030CE3709E8F384D545028255D04F584CD77EBCECC403D496A0B31295
E2FB346A9DF4B7B0F0C13D7103EEC8816D088433B3AE0BBC4C6151B98BCB9DF2
A9DEB4A2206C7BCF1949C7696CD3B5AA4D93FEDE0EEB3737B3781402029C68AB
8FF699E4E7274003CAAF2A5E4B52508DE3BB0D0E08429249CECC18514CD27888
1324E6BEB444C805B8DFA2F163542414F14B9628D65F6D09A737FEBB14CF5E3C
BC6971475F7FFF16B6A846B8F4C85CA8A5A89E4BEA2AC1F68808DF9360EAFFE5
0F7C98872B560A14C67C5AE1AAD75388398EB3D02194B4B9801CB7DEE305965A
A02B8A677FB0EF914B2F4D79B7491D9760343D8DD0298AAE52B3A50D98BDEC70
52E0755950B81444F0A3E60A050FE8A82072E513F823CA5D798B70034A0AAF17
8ABFE39F9A55B13C449B033233CA82713308E3C118F16119C3F33DA7CBAD3B61
D2F119B1BCCA87859916067BBC37273817DD95F53774A02A708083926D12EE41
50DA3B442CFF1930E6E7D2BC72E7782814DFB779303B8D7F9F942FFFD30DA0FE
65B8DB8F228CC4651C9FB437
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI9
%!PS-AdobeFont-1.0: CMTI9 003.002
%%Title: CMTI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI9 known{/CMTI9 findfont dup/UniqueID known{dup
/UniqueID get 5000827 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI9 def
/FontBBox {-35 -250 1148 750 }readonly def
/UniqueID 5000827 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI9.) readonly def
/FullName (CMTI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C50F9043B95BDF77C
1450E422362CCD41FB4AF30F73B66A85AC8DDEAFA65B4FCF0033D034E111830C
ACB981C2AC41AC32863D02E6D9CA81F8D407DE4AB20B4CB6418B8067D694DA02
6E76FF50A7197281B7E8E700C4A8824220374DE1CA077D50A8B751391E35FAAE
E0AB0604164A16D476EDD5E33B08639DCA14796F27A20EAA52D0BD8B61065AAD
083E4AAF626C2575C56F87AAC636FDC2E5ABF623F2D916D3CF5CE8703D297151
0A664F40B144A2F3900D053B709210AB8678EF35301AEF3696CF17A5B41B588F
539243F32FD78B62A0D80B17F1028CBD7234BA7513A4809B584092B95583CF1B
664929C33846E8F59A43220F79D8BE0DA051D17D09C1E9DBA6C60BCF99BAE773
3E9439791901546793B3CDF014E6AD9AA169483DB87A6CE4104A8B25AC117504
8D6DF6052EF491D510F67D730CA315915E77290A40D3F8EB8F004114BB64C5EE
9F1E18A47A785A04D4EE3FCEA794EB3438CBCAE35242782053277EFD6B67F6AF
97D892DA958EDBFAFDDEBEAC4451EF8E00D6D0E7E60C112F74999096428AFC5F
507D0DEAC778A81F8F47FBB1FD8C22FD22DF2AD0C9BDEFF2633F180E0186A9AB
B0680E661CF083B8DC5635D7DBD69A17E6BF1E86F7C19FF7E48EAE8D35F0B698
F990DC16CAE9D6E9D1C323FDD183096BE0EF3BCE379CE5E5CB0F58E4516C01B1
55004C20A6F2BF430D59368AD4F6D398B9A27B89DBCF70BB8A36AA24496CA621
0D28748646257C95B113209FA00B4525C582A8B223C64B658DA11CA08CB64F12
8BF230A57B4DC2FD0AA8C486D7B151C9713B12ABDF174ABDF52EC8034B0858CC
6D389B503A320AE42AF3BBE33135032FE83E6B7AE0D713BA6A56230A50C22FB8
597A5F21CDF98D70423E8AF8E3CBCE4756DEB5695D3A5E7C47E6EE62F4D06BC6
C9978DEFFF773BA6CB9B92D2B2638FA3A1D92806EAF9A9A9D6DE09D81FBD8622
AA7AE1FE01A1390427D270287D4A436A544D4F568640100F94518C113CCAA34B
28791F62F1C5B6207165A847AE2A9F1E3AF8B96203DDAEC2AF8F3450CA2FFB5D
E55DA538F39D6A5F13963857E2CE6D75E510E8287D4DDFE5FF5CDCC0FF51E346
B8717B28181DC56315751FC861DE7CAFECE8E350CECE6B324879ABC8D8206ED7
51D1D299BACD2F7F6EC2F8D3836EED6CCF09C205A7A76B82FE1AAFE0833C7693
FC7E22D373C10C34BC0B57382312646763F593AA91D90F6CBDB096CAF9F52C12
CB6E75237566C5D528DB58B92D0C7E16D6BB2D097C1FE565A07076209AC4DEE2
BB6147D06D65F403B6919D65D1C3D9D0FFFC0CEA7FE0EE002AA0EFBFC120A724
CCE85B3419C44ED7216E4C714FC85F72CA933D3707D2EDC6AC02335D4770B48E
0B64716C0E1B9DC8A4DA1BCF7B47FE7B37F9630E55E9868AD41AC770C5036E78
4D8B24AF41E90CE8358F97CCC43295371B73EF7E86BD1647EAB2E493EE912F74
EBDBB5CAC34EC1044114FDFEEE2FA8E3574F4D1E3EFB38C3BCDC341A0E53044C
0A19D619CB789E8C10100E413B8057373E6D77709B8019841DF04C8B27700FA8
B21E2955C9ADD9CBCECB52727BFF0E48029D46C695028CB3A7EA779EA69C8763
2BA38F274B4217F4D5C942042ABC9E4C1627D63C0BA9B1E03E9E3C7C8CB2812F
503564C0C02A6F2041D4CD59BFD6E465CD060D655C38FC5499F06E0323A4F359
37061EA5248B3AD809D16446E67B0267A3A929FBEB0A93DFEFEA3E8D5B7C564B
95AA458F532CBA8770DD90AE6D3A0BED3BA140A4AB6261CE41967038861D947F
20BCD353B32618537EACA0F1CA5C2708D67D46B6F9B6D4F12081485AF0699628
05AE00F008AA816DB07710E06AE2DBFA830C34851E5C63A7E9E02404ADF1DCA7
2185507F0CEAF858389E4F8DC3A1283FBEC373FB4A1720BA71F993D432425C2E
D0FB5A6FBC1E1904B959838FCCD085AF1778A5E3EF29166C6660B797C8ADAFF7
1EEDE9BD371E11CEE77D70008706E0BF2B6DA250F9C6A92BF91ADB7D32CA17D9
776CE695179FC5D1686E86E2B4C3E34D2741CDA86C0F343E7CDD52AD3059A8C8
134C7DAE20076E5EE5990CC56EF8AF66131243212C40480BBFDEA97FE0558ED5
7AECD669BA1AD9A50F1C0B21D75AD5A11FF9F577153C12F9789EDDF81FB683B1
F66244F6FB2DC1FF2B3BC8CDC6990E6C4CB835E552E2AC9A7540DDCFAD1F931C
44815C59118C7EB3C4CED4DE0D45C311D69576D5E6DAE9DF8265EC6E566DDBA7
22655E765C074082F346AB496F08F4E598D6D35472629273128157FA8608DD96
0CC4A3B97B430B1DF8EA4851CD54E742AC0170215F86D4612129F2CC3874D047
F485BE77D2FF57B8899E1E667D41E519948F0E60C5247F5483D20CB108BDDDA4
27F15C14A35FDC3CEA924E051D711D8D4EE36E7735E6DB443DBBD000A4CE0635
2727EF9C1AFC95E876A46FE001EFF903D64A2C1F00D734D32FF4A6C8E3956DF5
5E676815AA165DAA9E0AF2D56EFFF32BEC9897F45E40909F2F39BAF85A354420
5E6CBBC6626B98FF1A9BCC1F76D9AB0348C8E7540E42EEF3F3351006CDBFEB01
0FED065EBE147B5E36BB659D6AA429E6BF8121F147554BC0959E6F45C6990AE4
66A74CEBDEDD67A559C3E4937F50D3B51E7DACCA53A2DB98306E7AA86D21977A
A4CB7592590C94C8479530239945471408FA1F774CAD14F58AFFB59D8CE596B0
8DDC2E8CEAC94156D5FC69D70F2F779774503F168C48594C63F3180E8C93F423
7F1F1D44CCC5E5F766D7BECC470F880611C545FB3F4C0E171A30516DBD6477C6
2C478B4E3C2AC2241C68124C4570D476B1A18E7D093C97D16999E06CC1C8C485
15AFA4836718A40733ED145DFA4B80D3FC3AA074665316786E65706DA958BB71
67A4EE35FA629FE738CEC51D4F51431BCF8B14804F2C83453566253847077644
257AFB4D3D13CE77C9CD592F6C913F5AA3064E88779966EDCA52B2D9469FE48A
C8F6E5036AC9B0671508DA664E3F24BCE551D22434DBDF58196254D7D2C7C308
1A6822F2F21BDAE029F7F776C1FA7BA9CD94CA7D919B4E7BCB9B885FD767CD9E
96CC1604B95F0A8715837D7C27BBA08663FBC0DA33C2962577451DB48A4B76F4
8A4B66E7D2A2E465789D1E6B6D5F20413D84A47E5788CFA97BE43ED05FA176B1
F535C65F8FE60C72BE326737154602688AB71A8F12622648031414AB80C46289
1EAE582B933C87122DBDF3E3F1C4F4F5175E88AD0EC90B33CFC13DA07CBE8C49
EB1E86E0DCA68AF0BE3814595A4B2A4113FC8654A032BF00DAE293B4F2CCECC6
C0E804B658720C67DC156B4785D9A15274F2BF38748FAC7936275CDF42915CBD
FB21A739B80CE81B3897539492F113D589DA8A6C7B38621C8354625DC8B40FC0
7CFF21FD2D09E41AC9E99CB18FB9C92BB735C16FDEE7A8BB75A2258E76195AD2
1A88B0D64C130BE88CB2FEE3C723A46516DCE8DC6692EE27C6D8469FF511B7EA
F1B7EBA054708112981C79CFDCDD40BC55A1778FB3FDFC0AAA7EDC425FC2938D
694802705011B724423608C7BC1E803D344C9B5BDE13005D06C3F27DE0371EA4
0F836D5C0D6C0BE2D27700B08ABD09783D329EDD00415387C97C04F89607DCAB
62463E6A37E36C3A1CD92158353D45B443428177D1AE501F1CC0B50C100166B2
98C4824CAD58B3A396D097E2850B39130E743CF3CF59259A174586B9361D8F23
6DFDDAAC5B40CBA0495A3971399A95BAAC66CE5B472669E2C31ED0F2BE60E787
503EB379D332055EBF839B25802E076B1BA8DE3EC59782335AC80D1CB950948A
5EEA00C5F5829EB5293E05B982032207D41DDA035B3CAF26802A61751B17D0E5
170C99F6A0EE0EABB1576814EC3B4317A89C7F11022A0695FA3C2B2B80A2F73F
6A3FBD3A2B8C4820E7705CCEE368CE580434F3EBD2E9DBC162CB482278531546
74355C299E321C47D1C4C6D48C5100A4B8B2A16DD422AC3365B37A79D936FB24
786E9AD00E8E2666438B096BEF243BEC5C1AE35A9612D08CF7776E458265FC58
0D67659A4D5AB175ADB10F662536C8A9447DCF5173E620320A43B2AA5D5B5C34
78265F88656D2125C6E694AE4750193B05ED2A6DB4CD5A81E48B9912E25710DF
C66A0FCB7920479DBBF739D4BC746BB03C2F1FF89288DD807E805957EFB929CB
248F64A431C995F0300C0F836EBE1678C28DEA1F45034A4057520D17A25180A8
693BB0FE3FE6308A332A7E54A674B497471E2D13756CB0B991C4A4F9F4851A9C
49DDFB13416722223559BF7BBE8F1499BC93DC8BAC757E42E25369B182811ABC
FE4F1CBA5E5BC15ACB6344EBC575C2F443A508A46ADDEBF7C34D88702FE46A8E
D96C91AEA3EB989909A2B22E86FA80721E68A1385239B4883DC065A0C08ECCB3
693B0D13CA411A78C13BEE866D8AF8A634B81283B77FF62EEF25C5D48CCB10DB
BFA10E3066C116662395A6AF0B71D23C4047EE0352F4E02CCF28F959FD4394EF
43F0761B73B8D726B69D5111CF94B720D461E0AE42C974F2EDA6F7883BCC35FD
093304225534D8043D934772B0FEEE6427D0481A6CD8BD614669B875E1DCC6E8
EC423D9A0DA290D8571E97CB6CAEF274DF823767AF4E0576588CF2ADC239FDC6
437910EC0C2F01B4DC773E73C7FDE6E37D3E784E0E5B655600FBF3FBCC1FDCB4
CF356017BE2A663DD7983A46482A4C1B42A067381D58AB1B332CAB8E5C83FC78
1F0D9DBACEAAD372991BE3074D9911CBAA95E776008644F203D6B2EEAAFCDC57
C53DE48816934BF9D70F90F4186F6268522D260512492305533C1B0FB23D4726
6ACE20B872517CA01EF5EE275CCDC3BFE45C19FF225550E4E73B15E9BEE3CF21
1594CC1773CDAF0C659F3EDC2EA43C25D00AA68DA8D39DC46A1676099496DFD7
1155BCBC439742A80EC917BDB6E7593639CF1217C0265BA3183209DDDAF50E71
FA061C8978583D93EBD97C70A890230AA7123947B197E9536F0DA91373DECFD9
BD4E1C12B086B12077EBA19BA50B786AAE9244C60020F406AFF705CF029B43E8
D70CDD5DC7A61A75858E03657264392D9CAEA8C515DD98C2CB9E84BDBC6A62D2
36CA59D774BD889D64E6C9A0E043D04744D3D807D3A1B1B25266F0D9953266DC
662424A93FFEF40F47097F48D1904A1CC00030155AA3D9B07D281E055E6D033D
745856D9465D7349797A07396AE9026EE96DB8BAAA081D64EE4D86ADD8C4D1C1
CE8EDA25CF3242047E18E4C9870320052ADF3EA543D32E6EDC93264DCC2E5A1F
458369CC5CD73DDE165D5BF594C81FC992F35DF29A57464A0C6D72D5E7A92535
3CA14943640A67B23935409206FAAA6A11F598BE24373E7BF54A2B3C34551080
1B4DB4E3135AD0B61CB1C12A5154013E11B33393A1C16D74B16BB4D8E7B893FA
E6AA0C843BA5DC50FBE07407D8B16ED2963E36D021EB433609053BD19ACA31AC
53B1360A48F71D972E669D5357C22A33A7211F3380DF41069AFC7ABCB3300D72
FA1E9D6F2291E147988003554D2DCE165B5F316A390500D0273E83453381B13A
95D6E6F3300F36155573B8FB32A1691F6A9AAFC39541BAE0A4153C9F6B181B89
43D246EFEB5A2B5F66FC60A44E2E1A6D972C53B1E930CAA18A5B58820D8D2EF6
C1E798E9B744A31FB980C77D36728AEE6E682EA668F32E0C3EC70BCADC32A8D9
A2597F1A4AB9565FEE420056E8A8B0004C006AD981E94A84CB30ED6FC9642D65
0FADC7C9950BD962E0D86543EED6DE476E29A525183E52A8C97769E2FBC4149C
53A13C54341A9F554F0178211FA1E4731BFB84C11E6B776335F1F42864C70E9F
4C3F71F7DED7FB704A05FAEF7A2186B2C9C2AE9A3BEA55EC7F3334699BCD3D70
A675D3D1EBD9958BFE62267CAC06FA97421994C17D60879D8B847B39D5379B2C
079AD7BDB6FDDC56106127147297932F788184B0BBBEA5657DC92E4D6B097F30
97149A14677113EC8929C69FC93CCE56C068C015F46029110C7DB91DFE31E06C
CBB475E860D068ED6BE3B15B5C6F6F0D1D5FE6E7E4E47392C46FAA9CE932F928
FF628944653962EBFE4EE5AF7522BACB33ED77387B0247C146B81F7A860B84D0
D372252C89556DABA34913010DBA3576A6E13E3A184CD18D53FC758DDA762338
AF195F1F261D5F10AE0E733ECB98BA2F81F7B456A75D862C69D623CBDC50BE99
E3D1ED35ED4AEBD6CE39723F459AD508863C020FEE61980A17D41BBE0A54E120
1EB69BE8C1198663596A3678F11BB8F28D7BF5F713AAF61866B6C172EAD9D25F
02289C719F2C121A09DE6D8E47001FA41002DE821E739567F5D45F5C65D2A0D2
65D011472F8AA705C7BC3E0580BF4E2E007EA98AEAF9AFD2F25FB20B08EE26E2
E8F94A39F6240409F44E85FFAC9A46A2EA23A5A5F8BB0DBE50A7A1A9A6034D32
B777C38B88F25D392E59AFEC304C13CB1407C70B7DEC884B5B7AC97440CC198A
A949ABBCBABD1442C67E1828CE582D77F616A49BA12BD006CD541F707ED05737
FEDED2D912D3C1083AA726C21C396EC6A36EB6B9219F2BE7EF62D09E487B3FD0
9748121C531F7CD54DD98622C4C945E5B04ED2FD66D20873BB42C5391627B074
7DF90B81ECC6AA0743F25247978CC09C28C4F878E29A5070E4023BCE95FE0ACC
CC01D0EE219FA8344E8F6D7D43475678DEC28FCA370A417D2192DD293B13E507
F20AEEC2B825BD73A6678698858CC4B3DFA40DC96536735CFBBC2CEB5CA6A396
C8D387BCB4D6031DD45563921409C33F3BFFE220D7A255AD2B422AC9DDFE7A13
AFFAE4D39E8F285A4877D1FD83FF8BB9BAAD29C4C4DC7CEEB139D4CC253859B7
24221EBA02F074C94543E32176588F50D0ABB9B0AB449E21E01377E96A487B39
E45385A6A12DE9067750598BD5A12DEE276612012DC4226B14B0B289C9C8EB08
49B5FBCA42865EE9ADECA117AF8B2BE60A2F825F51B3FF32DE769AF8A9F0708D
7BA0C614E8B1CAFB429B6407B3BDB582FC49D3794A0BA6932824A1FE44429731
5F1C8D2DEE93EFEE11C29B1C020196EEC515336D8FD1FBD73FA4F2B454066970
1657B1EF286BB2DE8E5ACBBF40C992F9A22255B3D842E68346CF43C568E1DC7E
389CB45E387321424D7950AD8834BA43A128309ACFB55FA8D30C0A4E13A06862
0BA93765AD3744B7F0502EFE5D457D7CA7E988968EF34E2AEF0D1C5C1252BA48
E4AFEBD828CD1DCB34738801458A8E4F9970DFDDF7973961E756ED7DAD161736
0F774F441671DB46F07E28F57A1EC5FAFA529685CC5D419FA0ADDF1030B3F21F
AF395EF405CFC8FDD30B79B80CFC1708602680E9985C38474971F5A24FD0C415
CAF1F98938F27BB1C805F0617DFB86783BE6F3AE6265DE523D2781E94B042D16
36DCBA12FAC0BA0B2CAB48F31FE24BCC5B032D3987DE21BE7E191D578E9E5644
81BC38C95513F04C8F1BB7DD82DA3909DC75CD509C0A5EF8226E0EAC4BAD4D64
FD2D6BD98699B1B147B03FB3235F4F16F367D9EF10EEEF02093C40B9C6905716
E43CBE3B6814EC7DC6358B72A2DBDB3A22F65E1B9CDDD4A639ED9FF36E021E07
F5C45A74E31E755CD1F75CD2432D2E369537D3D738D643624E43CB52A1675A2A
2501397B11A902B26BFA828E9A744AB40CE3C143C758C6969350BA53BB8CDE8C
B21FF1336AAB3DA651DA4E822AC8E7B26B484955D115689E5B47F1FC0A88D9E1
C58559306D908BEFBAAC4411B52396F19D4585B4DA54EA8929B11DC4428F158C
AA3AB1B6C5736A7F52A3424F1B7995A97253C8F822C11204E340635D13BBEF95
108334977E7FE842A2159F2B9C855580379599035BFF29D6477BD0D3F6AF2F16
A21536FE92A20CFB4006B743599D744919557B111518B64B7A1D52851A1DE934
8FBDC32A12A86BE914E85449C9A85CBCE97B93F8C30619D97D35B1ADA1AEF315
ECBA6F412D9ED54A37ECA7E502C9A4D35280ADFE489B1648526A6EA53B42DBB9
0FECA2428C1E535970201D7C490A836956CED972788FB275E3A5DFBBE016A7F7
8A0E5C28A19B04EC50A19D4F27BEE9DA759581BB58714BDAA1E83BD9DF1C1910
7140E71438AFDF5E01556E9262F214712F001078CE95F86EB0E0B34512888B67
CE482A44888ADA3DCF5A465E9F002FA79AD452E2CCE8D95B6A5382CE371F980C
C66EAFB9E1E20A8CD88D9A4D14DE3E37C0E8DFFA513410C319D4B21848204F1A
DB186D6894C72CC25D6CB8820BFF5C9E0C239034988ABE447589699121810D6B
FC7BDEBB1F51E42D8509637DED5D325AAB93E255AD1A5754671A72D76797F430
8F037F64763F692D2CECA91F2A21EBD10C5C7B50E3719E97DF4D3717188C4537
56170B516B5DA8528D81018CB12244C587442351D5CBAD32CCCAF251A9F2C4CF
3C022BC1A00FFEE1C8CEE96180578B8F93F218DEE51FA11ADA4DAE52651580B5
7876625092D3495EA97E38FFE57A40D67F96FD13E3B73195F71440537D501E30
9A7E3BFBC73C14BBBC2AC3EF83332F1EA2F075098004238D06B8D6983C5D19C2
16B7D91EF59C6BA64233D29667F40B6DB1318EABE227B936313A53616765CA49
9F8D1B609E0BAEE58E3C1CD422C605740A894021E9598527F90315C55CD2285D
0FC0D03A0E527A0EA157BFDB5D9397740D4D777960C3A43A1CF02553CFDC1826
F493FA184A6CA4B7A294D7C92AA0867BD9CB6CA3F5FD64559F2DC2901102BEF5
E4D04530068A25458499C14FC1B8D2C7E4F11AD9C23B3ED44B424261C77F3073
3F3A3A0F6275E4A15C9EEA8FC2472CDB98237E6FA8A0FEE0AB5D984B0F03E7B0
873803E4E4A2B0F940516657173102C3F21D2D398A4F9959FB047059A0427FC1
B103AF68138601D74ACDB0E0A8ADFEF31DE4B71BA524321FC04B690E285BDE15
8347702DA9A10A2B2D8F67A659541DC3D33B31DB80B57C207917AD0924F8A6A9
AEBF47EFE906F9BC5DB779921B36712DCA7669959E6BFBBBDC0CB29B3FE921DD
7D0091DFDAC9162FBC1149A4998FCF0CCC89833F815F5A8F3BA139C752226A44
C33851773619FD3D3F2F1599AFDBE95A587AFCA86894384097AEE9D3D480C80D
EB9A7AD2B3286C6FE61956A2E4FE0D14097422DC8946EE1AD45A527629D199B4
7C2D04F13BBE29485CEDD8CD6EF61FDE261D9E62558C82BC772935E971E89717
F6232AA0CCBE8EB676C02E7981EFE0FB5DDFE3EFC19BCC70E6523987F6622D4E
3D8BFF6BC7098E2EBC5EC9B596B3918F9902B9DFF9ED006581A37F5AA96FD3D5
63D71FE7F500BA80CD9A9C568219749F37F287E204C3DF9016D54D5BDDCA263B
E3C6C2C64D38CD2146C259EBFF3D46FFAE4CA1E19294524E64FB749F2930B04C
80A41A5AE41A284AE7D62A22FFAF04204BA3D6FBAC774EFFE4B2D5BD026626B1
53DE1C4635F2515978B359F10FCC5D152A47CFC18F0D5E218351F51399F08F2D
A650E3F99F9BC3269AB4CF8BEEAF302AE3FEFEDA4D163FB87655EC865C3B168E
DBDA0412B4848F1A72BC5748DC0E078B89FA62E1B56032F5803980D231701227
99BB2826089C5DA24CF158D27A6C74C65C8725FB9C50828C1592956805349250
96B3B592BF3C67EE93483F7F83D354CD05FBEDAE3C77ADF53D4B8E5E6039289C
CC1D4A8CD8D445C4246C2FEE3851A5ADEA778E9CAEE7F9DFF857453D41A100ED
09FB7F59DE40A9C26A8675D869DD5E442E1374C29FBD4012B13D7512BE696AA3
99EB09CC3DA1E3C8D95FA2EFB3667CDB66ABD9EFEFB9C8449010CF9C94322B5D
00C60B8670E693FD37EF2B426B03C92AB2D343E16D2834441B3DE06169DEFA94
4EEB432D5C363ACE9C5B7F2DDD6DD510B241A907F11CAAD88B1E3CA918748578
5D6F80C67D7D9F9993DBE17409AE192D11594B9FA2B3F243FE89CDF86C6D79E0
864F4B22D6603A9FB339C6238FF961B82D59E612B6522AA90D680EE7B99C0A12
F48D94FF62CEEDF0C02CCE5598E81BC062C8702BF9D64B12570A4B905966BD92
1C486DFCE01923C9D75F6C4D65FBF3AA2184700BE11451B9C0B85E880DD1CED7
1747EDD46D414D4A59FC8F46B71F8EB7B899BFD07CDDE76251C88C6BDD61B085
AF08BD68A5871E6EC07F563AA519E8751DE736A65AA4C1B81B5552BA018C58E7
1B6867AD053D7B484EF50CE5081D9E4897E8F8AA5FD146D0CBE145058AEC63F8
A2DFEE3220BDC29C1788BAE3519E9D23ED670D2D5E59582E27615E1CF6CD531F
31E10320E9E4E7CB87786E1C20FCF6C98B7EB2494C9F621C590DC9F916F4C850
7D8B92D09B79B38D2D606A62166DD11BFB168E4A1AE6FAA7EC1D50E27A6FABCD
85C68BD9F8CC755010AD493FB9C6365322E71ECC7FB297510C21B0191BD1A46B
6D2B12ECB18B661B42537CA8A1B5AFCCA3A74B88A8CE07CABDAFC156CE247FB6
B45B4A795F28ED3FC0F9FBFAD2A73350741A3F200E000C4BD9D48AEADEEF3706
5C0AFBDB5FA0B27E80541918D48DE3DEDC4C636BA724DE9F2C87742A76CB93B2
B5193B9EE3028C8D21A62EF128F2F50768F65D88D75018774B29CF67F727B96F
97C1AF2F711F5BB7FDAD2B77793ED4C6EE132A2625AEE6932505B7C2FFC5C587
9F7AC952254BECBC166EE6789396DB8CAC80D4EEE23EEDFAC9337F0805A7956D
7A323DBB56CE6F534B8DC73E920A16E07AAC44DC9681665D4EA7E4A789CCD0C4
6A3E62E42EFF2501ABF520B7C6CB0D2FF8A1CA60F780D2947F2AFF2EE47ABA71
4FB48615060F39227BD4504518878B412869D5BC6CC00A08A7F1C05501A674FB
BF3A1201A9914A8FE1134D759681EB6590EB33E89CC33A6D60ECC72BBC92AE06
7E9D73AFF144A29E3D6D1274B327AE90F35E6321B5A9B5C32CA325EDADEAAA49
96BECFAEFB2A3EAB23F9749E524E21E6D5A2167270377E09EE3C121E01FD73CB
88621A4B804ED231BBC1D18104755FA274AC643A11923E4FD2172AC445665C7C
1B606516EBFDB28F21D30E54BEE7035250BCFC8FDB2B7490141A5769058CFFC4
DD5A0AFA9742453D3863475B4FCC9BB3BC3573D43500369C29B86B89DF2E61E6
824A531CA963B239C132D136E6E5D8073EF78E10C153BD1123068C7273EC4543
E80F6580E0DB75E386F8D511C330C3C7A6D583F2390E72815DDE2D89CBEF4A8B
64B1FE559D82DB747A49924F162B3E66B86239C8618B6A8D001163494AD5B56F
CBB2DF4EDDB8989CA81778E30BE661E7A2AFE341FA8F0E614C6F81ED498A63DC
3AACC363B10CE83DB153B29302A1F68E4B4DB85823B1EC1BD2607D96264E1AEB
621069E70AE18E8F833F421B47EC48E33000C4F564988EA0BC21160F5A446D5D
CB3D961BCAAC102687F2007D069D3D1D30DA24EB636F3FDC5DE5D3D1A0BD9CF4
627A5D6245973A80C0BEACADF4491AF8E922EB0E65DBBA79D62FE27403671155
3CE193589748F54612FFE439982FD18192BCD7C41CD2CAF2DB728095440A0F85
CFBDFC18A33445DA17EE80BB36E133EA1E621386B39C3531AF109D56EC45BEA7
EA0124B8544005E5DEBB8B79161A29B449BCC4D4B37242B418BE7E231AD06775
4B2D80FA25E8B30989EBE0F1A97827B3B657FDC0119ACF40B01E95A288188C40
A1C3DE0E1E2AD0EC4988660C7D85ED4B25DE4CC59B9C2A8069DF7AA5CC61D49F
1A4C8F65F1AC05755683806B230E28F7427808872B88A7B2DED7EE633C0DB89C
127E714C1B29CEBECD94070282DD19D32746669B66A2579AF276283D474488CB
136BCDEEEBF1553E1D9DED4F1494C878F7F63E22490B2F8AF133935A32C7AD31
4A365161F186E0C010419C12D117BB849C7591114E41FAAFFEA1F6A9383F2816
2AB9A76368341AB6C596870EEA762B95997970027C3CE1D9DFB51D9E643F1848
F902E5D43231D28DC833A7D4A1CE0DCD1BEFECC26F1FABC972A3E222FAB7A1F5
E717DE034ABBCFC8FCF233490BAFBAC9A0588AE3CBF2C438F3AE28B713E808A1
E3D053F0A16FAAEFF46345C50A90F98536C694B9CB72B68E6C342D592E236F8A
07337A03CA6815F2D49543F8212E4AAE05833989ECA54E2322D1B043E2EB76DA
D21733DE5506CFC59D719FAB72581650C65743A552B807DB4EBD58068F6EA557
57206F9DB65D7974014A02B18C17E890CAE40DC73AFA0464066D553BE3E85B91
3AF25BF09F05ABFA092315114D58FF64AEEDE219ED109DE3EE862DC4ABAC22DF
612239A9C33670496E7F8D4596AC0937523EC699EB740F5D57337B79C482B0CA
7FA7A500F51870D764DE6997051B47DB714BF8DD29BE4E6D3B5E786138B30BF9
D6A82130504C8FFD1B9350276EC329FAE1045C5C6E4722133333FC0CF33A377C
DEA49E303DAEDF1AD1CE975751475106B193A04D85B6671CA0C03DF81A3BA277
F81FB0F33CA279FAE51ABE1EAB6DB5F0571E2E9C49603A43CA76F626C4F3738D
FAFA5F333B8719A867D107130566963AD28ABFDAB83F66C2D8AFB1C620DC994C
929EA061E0010A013FC41A5D8BE45ACEF7C857825E066E3612D667215C57A92F
3F7300C92DF7AAEBDE4310E6CA17697F79CC9658DDDE643A313096482EEE96C4
8FBBBF52006C379DFFED9F8D4E5636068D23F2C6238B131ADB5B87B9F71C15A7
D41DAC441490CAFA76F9931A6C80E312361913F06C90CCBA0505A44DC56219AE
527DB94AD531FBD083F94B16FE250BD1B3CA5EE9EE202063FC1F1E8C033C522E
7239DC7D3C4A000CBE14B0FC649B1E3B459BEE5468F699C96E0C4FC107C745CC
C6C9A26B1251439EE0FF392F4F4F84FB88278D3260E467874F1499FB290DB2C4
0123514B0B35C809E1F42588A634E77BAE679DD3F9A845B4AE5C6348A7B0DE0A
27BA2EB002F0D4562053F8F9B5540E8BD4A2825667455C49D9F1AC072D45113C
B9481EE20E61B238FC0F1206ED2E03B05C8530240E1F6B8B2026FB81F0420558
69A4D94F373439569D3C8C08E3753AFDD3217AEB023986D4EC71401A6AE789FC
97B4848B9F2A9AE7B601209373F836A5FDCFB1C059C59BA821FF8E68DD3918CA
4E6DDA26445A15A37F68CDBD70BE3EE5261D812B0B952D051E760A268AC34343
C227BC149AE0FA7EE921377A8DA8CD1CBC87E83CF87050A5599441ED7D0C8B18
FD885420D593F900295481D0A3F162A1B7D89958E4C444AFD73F8BA47B3F67E6
6E5F9C35F1F385B0C66922FDB3C3AAF08A54A524D4B64D4FD62936623E3BBD61
64308C77F5024DD1920351A6A59BAD1ADFCF00735A6F0930150B9B020451B76E
774D7C000D0288FF10DE8795423CCA5E251A3985D91273248DE24D40200BF942
F086E4A692B0B04A9E201FCF49982EF083AD6A07D1B596E679BFF9BB3EFF0803
32289533AFA08A9283C9D74AA9E53B5F831878D7327475B311746D5EAE9AFF32
475099A2B4523BCD37282F0D823EF91F7AEBED32873ACC496BB69B3203A71690
586FA87F899D77D94EFD87164A951E1F656C1EA4F3DDAE58773E6E8653762D8A
EF5BB33E1F79322B5538B7F420C87805184AC01118D6E4432A31BB407D91D88F
BBC7BF8E90CFFD23F1CC4E5899162D1CA655D69640095AC29C91DAF3CD742169
9D4CB1DBCF751C748A82A47A743E7FCF1A58B3AD78B51FC4B0F3659DF661E4CD
6666795F1BEF2CFB1AEFC891A952505C30105137952712B363A4E5B9956C20C3
AD562D009BFDEB79A0161E5D4C8B42DF96582C57B11E388E6C051025EE849EDB
6675E7950294E10203D184CB9C6768ED1C94741923B976432411D9B155583126
62C81ED6CA53393D16FBB3B8F3822277C5585BA799656DE3166A38B96287FAD7
1C2CAE65EDFC0006D9ED39C9BDA85DCFEE348F11643974AA2315D13753611265
4B399D6A411DE58B198A557241DB7AA4DE41B4B138BF180711159C204179F477
2B0B771DF11C05F43973196E739595105B07EE3D9EB813039D88EC2790EC29D9
836BF17B1435375AC47902F1CD283A6C1A891736990429612D908A081A17040D
EC3D2E25027954F0A1656B896574F38659D97268063858C63CB6695C4BE1E0F6
3E86E6E275E0627AB7F7C7E4DD0FEDC208023F7F2594A6D71077548D6EED4EF6
12327DCCF1DA6817275305F1EEE52BFC2CCA0FADCFE01AFA2D491C2A1EB25FB7
35A1A8EC742100568E29DB88ADD316353EF7401AEBFBB84F1EBDEB9B2C43DAC7
1F56BD42C096CB8ABDF0A605B48D1A1562ADAF84FC06148D147DBCE5F1E54DC4
A8FC5B1FB17129B4DBDA5CB54D9EEDB2C64C76A9EBBFF1F22510ACE5119AC74B
F7C22E76A06CCF0B549E8432B08F0F4B8FE0637ACC9FDFADA76D5D63EAB9D202
BA485EC99C964DC5D0E7A03AC17815ED49B2A9F63BC7D5BAE1F1F07963777EDF
6B092D79F47599C66D4C620C10B6D53E85FA72D8D3AD085D2A3DCA4104988B77
C8FB07D04F66FD73BAA48C4794FFCD5DFAA20E164878EB3BE7BC8A3FE12723AE
5A03F381BD96126A8C78A4AD42D0EC65D0C5466B53548ED87EE0B93E201AD3D0
49E88C150C6FAA5D70A91980BC9513BBD6DE7150A6FF83A202B322CA7C1D8A41
294483B006ED185A9190E1658EAB7A3C586137683936E31A89B4303CB7FAF875
447EE910D898B772E9659FA446B46800E1CCB0B09728BBA06E89B51AD8176121
8A402FD83BFFE01CAFBB8C7965DB2E9F18620F768136F0A1C71F32F78FAC2968
FE0DA918D4F4E143DF4EAAB240CA660C9E84CBDA53B04580C4B064966EAC7A7C
2A4308F794209B087B39D87EDC25AB908A98CD8908A790A4C310B2EA31FDEBD5
07CAC5E3E9177D6B138861E80CBDD9E700D88998931244592535BE0A136231B2
958085EF0AD8A61FBD6274513994FA7A129712A601B1749285E12C0722983063
415E682B8326FCFEF126C0100CEF33047C829A5DEE02A8FFDC838706E606F250
6F7841BB105F409838153EEFF8A866C4ED80544AF06A12DA841ECFEB4AE92454
BB09232B4768F0D8AD4BD2C8E70E79E5C0CB42A454D899CE7E796945A27B8891
0B4BAF3C13DB8E3E9C4BB973B93FAC855C2E8CDDEBC71BB70E92404B80A97014
985E36DFF72733A2157967C6D376E231FF4EF1740BAB2948B0B04B15427C50D4
4484959CF4B5AEEAE30022026EF34154061DBCB41C154AE3EEDE1CFBF57574F2
43A595D84A71A5B034622DE45175810DCB6E9B5A072AC3EBA8E149D6C7BFBDD1
09A1821B284B1B7E82C3FF67F5C6BF4D1A4C12B8EB327F8661775592BBB378C7
E7453EA0F76C27A1C8576E33B2DCA00428842A8E9CCFFF4A4BB74081383BDD00
B7052B5E927C89E9D51060ACD8E1F466D278D0E8E951981C32B099FA5FE22538
D9984BB63F7511206D6D29B556EC06B2A6F24C14CEC6FADC684C8AB72FDC9282
75F2015DC15BE4DB280E30B89B99CF0F9C545EF5A7C808621B1284734F80C347
3314D8DDFE9BA9CDF1204A43E80DF37E01B23A42C00FDFFE079D46DFBB98909C
EB9350F2D77D985A212AAF93F3D5E90052DF759D87085EEED546607D565109AD
3B5D0E1AE9928CF4563EAB62E35D617C3C40DC59C39E97AECBCC09608482269E
8D1FD9ADAA2463B38CAFC5875CF0F8D1EA6D195901283F3461A8D1F84895ABC4
64889DFBACF4DD18788F938403C1C93D412F0D6B074A687622A3FB43211E48BB
7ECE0C55B9F1DAD7AB14337F5CF9C9512DFE91F399D7CD75B1CD50983A364267
C0B780613282195AF395C97927429CE3846338B8887CD2975600BB0238BA3201
2430C1BCCB1DD169BF72CE393FAB899D26D5B5A1B2D58C584425273CA579B708
53E00680DD027058626DC71042B50FA17C9BE2C3B7444FA25CBB5DF884F1CF0C
1241622778A79AA1BA92991C5D6A26519E8CEC78E845B0BCC29104ED30C36C5D
84F3B0BF2061658D17271F985811A7481A3859960CDDEAC8980D2BC3DCCBDDCA
34C988FB55C21F557063788A561309DF9DFB150B6801BF3C59DADB8643C42F9E
EC2E46BFFDB6B0DD7FC06814F5B5587B09FBA81D6900A5AC433331EB01E3BC21
A1AB4BB4D0FD8DB93B076AA012FD66219A24106939A5B03B765977391085087E
C40E59887C1A67A03BD63DC114D778684E82C4C1936C9C120346F7D7716E4B03
B7E4341BC55E7055313A6909A32187ECD8FCB109AD4846BE8898EB9AFA541EA9
FE2EC640EB026F47884E0447C2008396B43553BAFE513CED4CDD731E0A7B49CB
D790AABDA97980C640F85DAA7A367349899442CA4491AE335F9990CC601A60B7
CB933E0DEBCFDAC7EA1F51F420889AEF054AAB2150A9E75B95A157684C68C3EE
BD54482FBD826210BBF680F67D792589D2FFC564DD1C3D5F01DDAD63AFC6D0AA
51BDC306D6467AC58750D1324DCA6EBB468F460E47A16A14A78C0F4E2CDA33BC
5A3D105D3D3422B9CB3470BD51A2ACCEA0C483A5776AF6E588CDB6990DD7D7AB
D709C1A45F463BF2DF4D0BB24C42CF23E33D867FB5370DC54E6A548D5078AD2A
9F291A3858AD8C33D1328BFC4EFABA2E6C185057F525CD8FC7ADB831AE25DF3A
AC9682904EFD4CC0B4F1FC5C8D76CC82C4C6DB47B9769E86A8CEF5A06CBFD2F4
D61333DF35061E862C0672E46F9978B307AA7E99B9E500236646F103259FE028
40FA5150B74A264E3BE55997D4B2AAEEAB7F9740F4C6AA985432CB966A76C4DB
ACFB8DB624F9385CF5EC7F3446AF97AB69FEB216148A0B7CC8EACA7C2A7E2832
11FAFDE88E58E7A4BF95204E95C832039CBF1034B83DC7D903D7F047EAC21407
BCFA9B965B9450215039F2DD3DFBDD65E4B8E0D33B1EA8624C345F16107F0FD1
93053ED76182ABAD4A0A1C89C2643F5862AE941A1CBFA394D785376A45F9E7FA
7EC423C08CF33EF4E99F3DF51CD11C41AA9EB053EE45658E8BE35E53026D5E79
B52B0C190470D9191046F35370720D10DBBDC4D46F7C793EA602F421C9A0196E
5D9AA531F6C740E0573AEB2E6616A5FC9CFB2FA7A797061D9573665A534096DB
A26ADBF95DA5DA756AC99BBA23628BE155507A56B6D17B2498C3AFBED01A8251
7E9FBDAFA2A2915D10568ACA1ADCD1EDB1A05F4093CE87CED359EA1F02CEE8F5
1DAB8C05C1E709A929B2D34569EF38BF570556BB834FD52D2FF9E78D81D94E85
145A97BBAAC6A110DFEF552448ABE6D6BEA067752FC5CB4C3FE355F0E637A215
40B045BF494068B7BF2E4BAB61C62341A03629D1AEF54EBF9A6335A7E70EC3FC
127058A035514AED1907C6DB1AB1231097D7AFB805C44951DB39407AFD8B02FD
170285F231F3E9C37D42D38211D3882719301361B569D2858B48B4226823F144
006DE5B96A64D9A506174862888CD963222F5ED243A583FF9DF24D1BE4A3E977
C1607C65BC6F15D6D1D3ED32A4A288D5E5118C27DDF7BA3F3BB8FF3234C27A78
3A5B97CEDB7EC26DC0ABCD288F17773786133DFB267A0BF0E0DB58323B52B198
BC0C91232B72BF4EF2AF1F05ED10A65C28AC30B740FD8657BC5259D612DC6DC6
2DD935BF7AF2F18EAD3B641CB7F67ACA55E13F591DEE11392558326F5B466B62
9212BEF99DADB8E6B48FA3AF988752EE0AEC001B9E13103721F7C75114584302
20F66976E1630886B4B91100B29BD2EBA9616E6583B8AE428124D29FCAA4964C
DFA888232E7FF2122BF22D455237022FB2BF5A6E10FE743D024916340D8DE4E8
11091DA2634F62139BD8272B2EEA43C8A8565A6F4AB654F0381AE72F55089775
88AB6C3B32618A71279D53FD728283DA966D7311B298F7943A212C4980B89A53
14F1261B0D9D9F5D0FA30AA16FDE43249BFEF400D386C3D6F7ED697E5116463B
E0E916ADFA50F94224DEA8198588ED57D504131307A93CDE8E3133503C8DDA19
48CDD22EE75C27EA998EC98B20B84714CCEDF990A7EA74CCA942D136B8C19280
7D64F581F17FE7A9A226B28383B6B6F8FDFF9FF61FCA2382F44790252F8C1104
EC5D0C0FE40104A11D57C808BA8891A186CA5DCB393CF3B5BF559428790DD2F7
A9175B1989233EDC3D912C27F24AD44C81FE5BE35C253255DE9CBCEE716AFB2E
CC07296E36725FF2FDF3B0999DD1E45C53D62AC156C1F8736A3AB4A44C81F7A2
4D61149D5CED47430D4B247DB7346A3F21A69F09AC2E8FE59069C6F84977848B
72E62686946DE8E6638A0802BB857431A15CE2CD87CE4596F800906593637CCB
19C191F6399E9DD745364789305F48FD3D566FF105B15CBBB66930395BCBFBCA
36438A612EC536BBA52B0E39AF23C327201C47DE03E278A8BE0FA65C81BEC15E
B1642E92782E75043944CA4FC8971AADF16F2B9EF86C823F990C42C33E51BE64
D27D41C57944DC857615025845F81D7791BE55A3D2E9EE03AD2215BA82A8E0F8
9A45F18D9633FA4AD6C3154FE5AB05965DE28C59887FAA5603DB879EA6A341C0
143DF897F07D481C87BB0877F08E8874DAC6525291445A1C5C54675824A77208
4A92A1B7DEB4FA7F2E7777E6912123DA273717A0B81C34167798A307C4B2F0BC
91AB5FC93DAFFF4E6F4E65F046AD4D5FC49D9ED545FBA9E67955079FFBAD3EB8
FF9A69694C6F7519F3AC5953F1FADC3FCD07A07E2C65C452260054370802766C
0844FE58A2D83B8E79CFF1331B90FBDF60FEDF4AB901B44E03357B74D43A1CC5
28E7CCDCD1C6B33EF645349C1937AD6EC55A3CCFD35084BE46ED6F9DBD373CF5
D1B00F3C41E6274DBAB7EBCB045BCFBDDD320494FBD7F5BB83C1702DD75751C6
B64014B6C7379873133054D64077D88DA61D157C304A8518FA7C5FBA1C316B11
01368C487E448ACF3AA2A77419BD7BDF1852BABF7E73D60AE459EC371B450EE3
4A22EBB3C2A9503EBF26FB66B64593FE2F470FD3A61D4DB4C59CC9C32972F645
75334433534C08FC5A745C9BAD1C6C2590E939E0BE0B923415618EB897E06597
F8D02C788E0D49B30CE01C168B90F13ACEF572A691C534A25DC015D3BAEAA48B
84B80BC1032852D81FDE430AD6AE9B7C2C87842788BC0356C1535F5BAC101DBE
F7D195373F2305DA551C9734D6A48338B7B9B94988463332A7D2CAA03EF386E9
A51919E3CE7FF78D906699CB9CD7D14F2491A0080D042039DF0D41AA09E44A71
C057F3FB39C3BD519A808166E8D9AB130AFA7D54C2D5B5C30E5A2037C2C075E1
6725C55A7E81669728B79B1A68802EC0A7599879EE90BA0D4A9DFE3F80BAAC48
62B4C335FF634A81DD7DE02DC53F5BB12FB382407AD8CC2C9AEAF66D1DEFBCD5
A66600BB41A2EC7AAE66F0D64A24757914C1E5A2DA59EDC1DA42AB740AC1150D
6673A72BCC4F97F620E368B875F28325E9918CB4D7387844853AE4EDC550B691
AE1FBF8172FEAAD4057CFA66B7BBCF05256C3240631DB348D4C09764D820026A
7AC3610AFA571A7255823D263C440190E13DAD97599C63A198FB959677AF5818
EAF03E7D6D7B9724E413074E53BED51D7CF5821204728C0E9BF87E4854BA9C39
E24B4EE83905144166AC423467DF76BB91D8149F78E773510B4E1CE99E0073A8
4E2318E4176E3E621B5B7A6F5DEDCF62545021D081E2D6204DBCFD63B05A1323
39B4CDBE94B3A0482A7C31160323C916E653C71FE2E5578CEDC43360604576B9
F6AB057A135C0318E91ECD71A6D1BBF17801210E8B68AB1CF88C854608C85BCF
F7A0F02A3FAD48E3337FE46505D9AD8DE07DEBB2AEBF54155F8B865930674859
5CF948B4595C9B099213612C76016200A7FDBD77A83440F71925BEE6208EBACD
CB82EFAA061ACED0736D006B954485060F61870DD6F3AB7D037E509CA198CED9
2B766DF6ADBA4EAF8DB26149230D01045542339945176243C88EF56DD5110699
5BE660AD6240FB8853D126E7AC5C5CC95DF6BCEEC60525767395552D8BC94A5F
D0537CE804613F4082F3440E1122D0602F0D2C49216D2DB8667C4F7EDEEF27E5
A674A06CD9E706F3F15EA638CE3D4FA777A545CDB95CCD15904CF8E6118570E5
3FAD3508E853771038D0589D754F4E2D56262C1BDA1A92856A6593C9C57E8471
515CB11FA89E75586FF68AFA4B8AB52D5D4D00A7E1072FE44DF3C99CA5B223E0
51D56931A6BD3F0E23A89A4EE2A13B4B72BBCD48567C01EF4824CF5C5FD9D757
6055D99FFBCF3B940CF7CF3A23F653493001F53E10AF10193CE4D76D8C390819
8CD4985B502A00F2D51B06F80A27B77A09F8C35658C0BA9FD5CC55F4D30A3384
FB2F712ECC0561E35376B8E56C8965BFE40F4AD89AD7AB9759B619640CD0C760
D4AB540C1E02CCC2F43CFF72AF762FC5EE5BDD6E019783E9DB31983877FBC197
4C7299A4006171E15B1C2C0A407D4FD819406DEB2ADD7BC1F23C88524F04428A
6AF7ADFE3224DAB6DAC6EE3E860526C70B072ED9EAA45925CD66F729D9DB520A
07E704539371837479480F0F56BF90DF0DE53A1813FCE38E4394EB23784A6B21
DD4BAF9F09C67824C9000E7CB539768C17CD77DA04532D7A4C6EBDB280071755
42714AF8BBA8F3D065CF5DF7846EDCBFE1F0FE6F8611DB7FE9FB87A80522BC52
3B3D5E02A1607DD920F1FE453F77F118F6E8915828B3492F3F93C27BDDFDAF7E
EC92B744068B5AA6E7851E16EA4AC9E4D8905324C014B79A05211A0DD003EC89
55E01044E0BBC26BFC999788193752EF1F04B56E4E194DDD18F6DECC0DAFA804
D800AE495040D5CF7A4AF20BC1E408221508432621E4C227349AAE00DDC6C0C8
1FC248EEDAC34FDCEE9459488FAEE0125B37DF1B200BBB40C8A4CE88818DBDE7
D1C5CCCA60061F2A52D2D3CD90402715DA8228AF3B9B8FAEE68889C19CB59E16
A49F1B85FED21215EA80ED05CD384A18FD10E0B64834C5B79C00E3CF73542745
921FA046C14DDF3C458CE1030A5AC4081BC566BB0DCA308A2B142AB35F117D04
DD8C58689FD1CAD19F0D48469CD903C4E0B5618B78DA5BC27AACFF7FEF73C7A4
FEB1CAF8E7A179628EA5CEE142AD15690D27C3207D325F3D1F9CA7044A555E13
AEFEA5FFFF3D983CC58E8DF0E642250FC474E698ECAF5C8EF216DB8EE0D1F312
41E601D0036C82A252EEB4ECDF598A3610967772C3E7DA264E48D75DDCA8E943
2616E7D6CEA2660E50A3DF1D275C07382283BC255E4D167D4EA32D1DB39BA121
FA1F2B7AE8B1A4F7F173C565141C15FA787CA8B2C065D41CE4A9F2281364A825
0B73EB417809D6DD03F1FD85AB822073287CCAAD11F956BFC34E97332BE4145D
E984ADDD4D32A186F387E286F502919BD7DCA18CC2DC86748DD737DA3098307E
8EE4F65451D7DB4DF142F3417CA357A37A856BCDB7C67695AD33DADCAA259C22
AB3C362DCCD10CC26DFDACA69C4809B9AC442E6B40648FDFB7DE688748936CFB
C9BEF495F133769BF711DEB63982A60543E91DE8ADA1B04191EC3AD543FC96E6
00113C1050E21C8090E18B7E6E24EA6C2C6420CB512505B2501D32DD3031413C
DD50874E749EA606DE574903CC49C39BF5420A672403901AB7638C63F6076B6D
093544A2E4A3D512D02EFC997CE6FA190FE8248261476BA4882CBA1A9A83846C
5831C7C2475D5AA3B1C59CF38D7C22FB5D6281FBD503B92407E924EFB2790066
F808C853EE7564FDC6BAD1EFD02A1F25B252F840D7666CF153865F783A5C4392
FDEDF592756FC4F29288A7BD84BC208F68891DC6846AEB0FF11592B01A586637
8E36C9C77BBCB0AC09C515B3167691B5812D711F7717FCD0890475F1E95528B9
5F85A6866F9848BA01A51F6609AD68EA1BB2D365658A73E087C498C1F9548AB8
3968D01ED4E3B8751D920D6EC6908156826A7BA598D54A92788CFEC5F1D36EAD
33AE2AC443BE19992B540F821C75385E200F4CAD70371B1C4FFD5083E3C4DE8C
8CB511CA79A7D041097B59570F5667DDDB77A99700CAE8C742017EED5AB9D9C7
0AE33F54C8DA46B06263DFDA9C394B86A4C7AE99BD61FFBB5E6C7FCFC431E616
2935BF97348C0743D0F2345E380273E62AE712BEB3A1A5711B0840EC4EC6C2C7
2BCECA332BBFA60F3DDAFF10D560DC7C834DA30E517B31205DDBF874B7FAB30B
BD889C88FBCE6263346DF10D1EDF5387DC8E61695CAEAB046381157B19656654
E4148FCE9C0252731D237E24AC391BFC28CE202F1EE0392D36EBB08F66637F03
B602B6D5589244806A425471031EC6AA6462BA6B36B15CEC77A90FF9880B7B0C
61CF62779E8DCC9395C19572FCBF364CCC27B21D7C15E8D6E3FAABCA1293C1C6
001BEE6421F1CDEC5111B0AF47E39400A90E95B70FFE3C754386178921EEB745
5C74FFD037E05D5CA5FFBE89BED5AC2AC1A43154FAB4C044459C4C326013AD2F
EF879E0B455D7031A94B9B7ED1C22CE2B3BAC94AF7BCBEE0CACFCE9A1D876914
DE0F3EE2B4C26A5A0CE813C05A0F517BBB3500B014CC6698CAC6BEEF83C290B8
2CA1E0272BC8BB9E085FF9E528849F0C21CD879B8A10BC11D7676F14277F0A3D
7D8246350CD0186F0C585A76DF04E3F2F11D1358A01857649FEE0909938E65BC
2A5B3B3B9A625A2FE57FA1771520A6337687F443E2F0E26A7D6E7770D1C9C477
BFA9D6D2260A9EF10178D0F7166DD97719F19FCD90EBA2B6CDA76DAD046240F8
9C35D57395CFC85333312ABB55FFBAB1407BF306E0A44B52F54658282751D671
01564763F9C7DD7509D8529DE5975D5DDA7E315B215D87EF98998E004AA2ABA2
FF99EB36D8BAF330AEB740583086DCEB14F5E8D9232B0A1651FAF4F065B64EC4
FBB8A37AD78DBBE178AA02B183527FFC60A154080653223CE3C96EF56E448565
16DCFF97DA03CA06C1FE512ABFBBB0E0BD8798D38A01BC98EF595E28E35D3F94
90AFA5A26DB0585DE4C071439452B12F3A1DB3060B9922FF441CB1B3515C6D50
99B8CB5D4C92021E8E8113D22FE84D573F1F0544429F06D0C1903B50CDE7AAB7
F697A24B6DBE52B66076B1435309785E786604F5CCABCD5885F2364A32915CF0
F20ACBA0F2E38E993B049C6C23B687A244897AC3847B8891BF4D953B0F4254D9
2B9A5F47CE223AB675123E0788318A74A719204CD341007AD547D686384CF879
77CF63D5DA7E44D2447B43CF77485C5C0DFCB434834D7C8C16387BF1BF9B59E8
D8BB845A210BDEE4409516F1D5CA8852988825639C0213AF3964F1BBC5A8AB72
7BAFEACB049C87053ED6F12F22C46D9FFB5C45C9AF147CDEB63A93C7AFD48FB0
9C6BF58DD4E587BAC51EC3DA19CDAE7DBAA089F69C4F0B2FFE1D2FAECD3D04F6
CBB10C6597FBC3D8482F662FA21290619D8BD7C29033366FD8BACF34C7F3FF72
8B1761FE30558D245C08271005A73D79B0D4F2CF184AD84786DE01A656D60A00
935A51FF87A7953B75A95CE396FEA12CA5BE72FCA070E907C44C6F3D05EA31FE
EDB6062D8F7349ABF6A9EE5C3BB98AF63C80BB7D7E09A12C2A88EE1E38A5F5B4
14EF3FA51CEE32A839E9E5DE329B9D4AB986A8ADB6E7C6FBB7064EE0AE2E2B6C
61EB5E3446A615CEF242D114C2DD5309D9EFD8CF3F4C0E33EBD93FABE9F93CD4
B58209C10F7AD1122A1FF8FA334D1D05B8A70A5E2E94755970B937B39ED80DDD
B24BC8C0F7FC1C94AFD7F1C06E72E67B25A32943031C9173D534EB93C35A11DF
F95A239B9B364BA8F1DCE55F4A67F65458A63F9B508F0D508AE97FF51691FBB0
F92C3B5CAF9CBFCD2A02F4CB42EFDB9BDBB2D46FF87EF54EB15BE478B08C18A8
B57215E7A463B7C0352302850820BBE36680C8AD10A56CCF0BB92731DAD5B8D2
5F5F65313B57A84EF285F701822B80E2A80FF3F5F81ED22299EAE345FF3F0811
A50B70FB62259FCC45B19C4237D40BEE0B05485D0F8723049E75BEA0CA4E801C
D4564B4D3E70AD3AE3EFA488B72A7417A1D09D3FC66EF64E9DAD9485C49DE412
C6569F635AD8CBABFBB903B000DF4C8D34DD2234D8A67B4B79EE668208208579
A78399FE79B22DEBC1B6009506EB134C845EE4BCEB4D37BA28EBEB45649A645F
AD8513974A41EC2F87AC88033E70042EDEB4162EE7BDA7188BEC3F60F0768054
9A24066A40534ED4A93F214C72B6024C081DC9CD376B450D78762E538C32E56F
A7F7714B05B03973C7F28841FA9CE96745583DCAC611802143917A56851C01B4
09D8EC4B7705BF90D28CB5ED515494F281C6E6DFD838383597E9EC7A48F64F96
9F875F4A21A75400220DE64682C01EFC39F0FC89619C6F41EFD4FBBA5E72C93C
6A462D74DED37A298892FB87D2827E77D8D702BFCD12318FF7A601578BFCBCC3
829DD0FDA1AB4D5EE50AC5628135B8EABF2D703BE382682D3F6B9B494649C5B7
3785DCA11077E1CCABEF8148CD5DED5392FD54BA7CA4380A2B30C8B96323180A
BC78B001E9D5A356E250E2E83960EB251DB2E4058426B157C4A2C4C9509CE6DB
2ADF80246408483491BCE914A62FB397896C9E79534B9D539F866811FC997253
497BEFC8053793A77D2818FBE8C2E1C8F6B17364FEA1E48C96BF293718E794DC
55678A500C9E9083153D2F3DECFE31C8A721C2D46A7CA8DE5423576549994616
4E39BE94E844E0D3F00215C1943339F1A277E7C003FDF58E487A676E5A991D65
E28559B9CD4D026442FFAB1164FEB1DDF5D53441EB93EF88EF2D80D97976ED48
C64C9345EA3255C2D5D6A0EDBAA580584FD7EF266D35BFF29C35A4EE11FC4B47
31D3C67399C42B128CD223FF96FB42066F834ACC44A0C93EAD72763D832F3E0A
7B3BAB72885A3D4B85FD4D98B4F02D5CC9C8F6DCE4231FA5F99FD382FAC30484
365B84FB3A103B8A809318990A0CF9A59972633F06B7CAE7C05BFF568783B785
83217D618819DDE3D32D3460E795224EE8E0FA12311EB46AB47476249FFC0F98
68D46921965EDDDD7C4EAE53E63A56812E941429439B99C4BBB9C027F239728C
12A2122F714BF0B5D8F7C66171E324A92A74FFB29C0DE71F04F87BC9B824A090
2E3060AD1E8AB97FD2E7E7A719F41E589098EF2A7FC1618B7AE0CB70DE735DC2
D3EAE85B042AB2C89693D60ABFF0591462C43A5F85F3EFC0B6EC7D0EC71AB4A3
3A7010D8A3FBDEF79512D8E6053016202412B4C404EEECC471178424383D2C68
6A035AD18167C0C27DAF847CC14CD1A4384941027AC60A3662DB9AC4E4B45146
15C5AA3573A5114CD2B7B7E4BC950A390DEA08E8BD3BF876F1D01191E592B9BD
38EFF4C1176445E3FA605D5E714A71088DB1225A76274EF021B34EC24C50D919
D9C76A420BEF5BA573E27664B03CCAAFEC830D470B3580C17176291515826E98
5D3F38188C140315EFE6D7976A7A3197600443C44AE924C7B7D0F2548296A033
4909DB9693B1D5B8C3F499C9FC3633F0E73B30F06819CB7E3615BBC722520A89
CEAF5ADC967FFF09B258AFEFA58BAA49E2CBCE5494E79137225E34C3CC791457
81DF54EB7C029514EC1FEE3660C96800034EBEAA8A5D22E72C472C58953D85EF
053BF7C19C39684BC5E50BE177A86CF53285FC311F09183E4DB3FDD856DCE81A
AC2835EF3FAF19B53E93C4C06CD5D723B8941A712B8524BC468D93D0C29449DF
F1122BD4E11809D69B667B47754F31965B9635324185FA6906129A69CFC13F5E
F6E9D1ACD9198298C8EDD8A421A10BB23993CB6318D39388BB4AC6D221EC35DD
94D9217CCCD97556D0B5FCA65661BB6ECED2E7756C47CCF1981CF94335681726
C24FD59BFC06C9DB35237AC4ED83DE4E0AD566C4F87A155BE018F82EF6B38358
2FFF82C7D7A001AC6C5D0460A73752E344F94A87F76B2C5EBE4406D1ED0E1D40
960C630E8AE0EBC459B5B35016713BB592AB0CCC8707145E4C76E5B504FDA385
F9386E11CB7D08110006924E497486E0EDC9438C67D6543B63B03A67E7C57791
1EC512FACE0633E06EE539AF782F1815DE37EBEA96E1FF2EF026C4F19E6D14F2
47756C6036EEB9945706317F71E695D0E42B4DA7F8365F7F9D018D0B380072F0
8DBB4CA28845FD4AF071A6F45031E3F6EFE1F1E70593F0DD326080341FAA37C9
75E940F85406626D3AEC1564DF9010FA0F9E1A1A6096D93E883906672FA8E2D4
6E1A429DD91110280BFB2B08026F1C5E02CFC017BC793C2924C83FDB4547EB4F
1FA00427CD462CEDEF28253EAA84F24DABE839EF8C7946FBB46C2677BB8C071B
7C37BD9EC815D150F8E1D29175C3F48F837576228A714D0380EC24A6647E3A2D
C8CD0163177D37496A5D7366EE2CBC477C1146DB41D24667D605020BF7ECE77F
CF86E479CB2F8FA7916A97F119402F9AB0646C937B3AADBB204579BD02A8F96E
471DBD6D2A2536246FC7B685E7DDDB3F8FF83157E28C91C181F151EF914DDB8C
E78E6FF52E8A6EA96FD4070541EEEC405137DE87711E8E885D35E2603C01679E
DB67180ECB56E9EFC3D3FD76A4D47517B641716036110C688957C23CA0B40C27
84EDADCFB1A0A5FF5461B14595476EB72BAA224F73E6F09A56ABDD97B2B1D81F
299CEC2CBDBDC9CD4906EDAC26C6A9C7AEF173CE1DB363A7BD2707C304B8EDEB
555335DBBB25F332A0FDADB1388804F5BCAB0712027BDF458837448CA2C91EC8
64F8FAD6AD44E68DD052461421525C318373F90A80037D38AC38087428D85926
D9649DC5033200D1E33EDA77AC54E46627A8FFAE2FF799C53E1E2729D5032A28
90EBBEAAA0A1F8FFFE03F76DA71F40953EA54498273DCD8AC3D9EDC58BD6FC68
64FEFABE1E70AAD05E17455FDEAFF723A3DAF8EC6C4797B029E0309ED24E9D5D
7BCC56CFC96B04CFA7E7D34555706696004B3A6668F6C74B28478247DD5210D6
550E775BBBA22430C5FFC80AEDD3BDBAD038EB52E618AC0286E1D2026069D86B
B08EE1472AA86F47A7186870A0F00190C280C03605375269B9A204F0B0046FDA
4D0EB52B457FAFC21E15C48DD4FF30B179460AB2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX9
%!PS-AdobeFont-1.0: CMBX9 003.002
%%Title: CMBX9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX9 known{/CMBX9 findfont dup/UniqueID known{dup
/UniqueID get 5000767 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX9 def
/FontBBox {-58 -250 1195 750 }readonly def
/UniqueID 5000767 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX9.) readonly def
/FullName (CMBX9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 81 /Q put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D4347EE3E5AFBE73BA
31023D79A7299D8F662042A8D8B6A7B4E86F48AE98EF848E83FFDE68E17A0832
A181C126D15EC79861796F03957F5A51462C817DF752097718413D012D19C9D4
423A5EAE1EFD4EA7A9651BAE6E45CC194BDCD03FF43F255E58EB5E50CA26BB98
B8B11E21DBFF2BBB04D039E63C453EEDFCD9378F5E7AAE3A93E8691DED5865B2
B78F540F8AA3224BE372B18904651D057608DE4DD729FAC398A80CB904410451
90D66C44E943517A8F4969673B985D9D244FFC743E0AEE309EFD224F7029D37A
F6EDD96E2F88C9D071FF16EDF055955D31DEF10808B343E948BB4F6393D275D0
44C4DABB75332DD716E8127283E8D70511F8EAF4D1A5F72E2F8503A2F964E5F9
39304CC17ACCF531A8C0B6A9D58DBA6F24A4ECA62EECC939E8111E4BF79BDF77
D656F9998F1EFD2ECE3E61CA526106662273D5AD3E74D08E9D4453569B359C2B
E2455F2136B4DB54ADDC3C0256EB7A11E1615AB9323ECCBB6EB48ACD469A2020
A873E88B28AEAACAA01826C1C18120774FD5324DF9AD36FC256706DB24FEDF34
0FCDF04B12ADB66876EC7AEC183A1EA8BABD38BADDCD0EBDE11A5A1BEADD0F7B
83585C3BA141A8B296872F712EC42C625DBEE9EBD2C414E57CC1378CAEFD00E8
DB4B84F51967F2968329B8503C4B37A56F6136DA89167FE3AAA93257140FE94D
D96C7F85C6F82AE1596511ADFEFDEBC1B41B0395E66D2074B39B5565AD4687FC
89BB4BAFF0F7568D9EAF069CCBA2DFF61C59E2CB2F4274459792C5D097FDE6DE
0E40AAD8DD8F64C28D04EE50AB79EA7D3420CE42D39FA9080E9E046A4F22B5AE
AAA17FE750BFAF7BFF097E4A6E9362412C55E25767C311832C1C0C76005C733F
E046FCFD4CF49C6181C24BD299E90F20A0A0ADC868C11A8AB7F610186D0483A1
B3BC4FAFFFE12FD746777209B4DCEF0E4ED15D90F19BF2FB2B56231FFDE5D40B
146E3FAEDDBAB365D88CED98629B9855AD6E57FB01BB82659BD320D248E5F7D7
B584DD43E1F5DD2C91945DDB772E5A62AEB7080AF36A83D2BA8533E7E6FD287A
924F616F8090E9FFAA607A21F38718D668FBD6BA3434500BD01EDCEC00354F68
E1D0E9A921DACFB83FB61C1A5C27D027CAB348C4B7E2781013B68CC5A2BC8703
2809A49A0C2E9E004D56844EFAB4A8763B103CF7CFF980C9CF7F6BE28814CBDC
348E2486D9379DFFCC0E9329854D518B49B98F582972B0D1D18A3319EC00DDF2
F64C2CD2DCDBA287B279F98D16ABD1D140246E8B66C759571981FE7402F14C94
18394A4C426AEE4B0688D86D08B408763DA3537E5BA0D6A6796C316FDB0193E6
77C6F257BEDDE17F2CA5E661F434964BAC9834BFF36F563637872FCDDE94CF22
F076D1C2DF6357D8A26D305D52C9086CE36F49CD92ADFB4306705A0887407C9D
59B6BFDB82379111C9E33692BA9E2ED9782CE4334C6125933A2F210684642DF5
3B129F955BADA1E86D6B80CE299FA0D1C0AED1AD61686AF1052A188881E2125C
98083BA8255B92B9CA0B48EB57F936790DEFA6E6947C0FF4083FEC296FF3034D
AD657C64F2675EED2B4EED1E88F0B1338762CB4C64C79F111CDE9777A000F65A
F9979943ED7C445815BB59052B91F0FEF7219E3DF27E1D5155B9C42B7BBB06EB
1815997FC3471CF963A15B1C5E4653C84236CC5BF55A31B94E394C635B95D847
69E8134F4FFEAE836CD6AE71F58F48AA2F95BDB1E2CB89DEE590EFF3AB7097DF
AC185303E647628F5D87E0D82E6685DB467A0F8B7D3AB2B7F3F11BCC99BD48A6
FA5D4D75698454CB74451B486CDA6B65547C0CBAA563EC3574364540AE7B11B8
F9E86BFA655CDE88DE2E7D41851FD208649E9C011E04C78ED9209FD56E2447BC
E1AAA0A3D36F6406C60F6B19347CCB7D56A84D961E17E361F92C5542109D9BFC
FEA2FF9775230EABE3333EB25A40E29016E9A8255713AC8336B8F7DEB89FEFEF
4006DAAEA26C6BA1EF494AB99C2BC960D9E07981BABE909B5C121F2CAD48C938
A36129D10D38AE8F5C64879F61138FA9F7479341F5C5DE86376B65A642B9622B
E58DBBFAFE07EEE1D11DE9DC34309572868586CD92D39FADB711883AA85210E5
C82842EF225E55370FE0AC600A170687C60C8091B0625A1C5589186F3C7C1218
B15B5CC3A5CDBA7085338D963D929A18A651EC7CC39B8500899DE9220A1BA363
78698E414607C34E06E29AC5BCBAB98A70DC2BDE0FDDCCE22D4717EDA7D95397
33420EDEC2F1D6E7072FEA85945378A6BE9C7F68DB4FDA6B5BBC0032B3C02519
F4168C804B6A101AA60EF4FC40C2428AFEEF5A80F9B76D561C8A21B3633E13C5
215A14D54B8A1E6143A9CA0B5794D20DF97C35B3C9E9A4673AC2123E7DD8E216
044269B1D6AEEA46757F8D9AC5C8A92BDC1EF22EE0575C80CA7895722CDD2BA6
F9A208E6BEE5319E63B3B3CA197D9739A4498AAAC9C7484D61418ED2BEBF63A7
F5283A075D1DFD4B2702E1551A0D1A90DBBBEFB6A55B5F29C869763A856C4E61
EEB3C8E14E3376B7D01A4E265C6C8056ED23931DCF669A0EC9427F74A147AD8E
82E172FA6C13DB1281651BF3D14163D963EFC7384BFC4B3B9274274DCEF647FD
D6DF0CC146BE8AA660D709526B394CE253369281FDB45AE071319E8FAE4EDF10
2867A431E22779EE40D885E95AFBF62916D9900016805D004C0375D29130CA14
F3E466AF350D1A5D181816EE1C4BC75DC09E4195DADA5AB09CE9EF2C4D5F7CEC
6C16BB6EC791E2870DB46B6B06DF421E7A2781D82A07D92316B553D068A1DF5A
8B19041F96ED637B932DE184F8B856FE1947F5FC8AE505F0E3953B325E0FD6FA
825EAD072AF06E258BD35607A1F082DFBC2BA5251DEDCAF68B4D03086CCF84BC
DF70BB8D2EEEE3E0EAEACC8440AA130273E5C7E78A15EEF66A9A1E0D5E022188
0AFA50FA55C6C461C743E1845FED77378D639839F548D6827CF371AD3DFCE592
B7F6E29FFEB6CB92B33E24E34875A5A92C08806F67E18AEAD86447A977890AE2
30A452F33B609DE5B792D9CABF39A086C0936AECC081CBBC810B3EE1D35F9717
260E76132661E3A8170759084AFAB04A6E773E9714A6D486E0BF46F336A7CDB5
C325E28E747295CB0E8FFB289F4907BAEC213D4D0B495A246A3DC359B995E9C0
C5322D750E13159B7242E4C4DD27932AAA130BC6B0400428B5E6F928CB8F7658
EF02F7522779CDBB67722E09774C419489192FDAD3DF272C95BD9BD64DDF0BDE
999FC72607F52805DCCA5EC17150EEE38B866E3D5199E5A6CC262785EEB11D51
80E79545DA191071487EF70C7FAC0CA345955F797912C1268924DD79D0FCA3BA
460F43E74975C04296E34423BD366A4EF7EE9463ECEF08F7E7BC8BEC570F812B
066383C2EF5375FB1504537D902818D63B30385421FF81AD92A1C153852B1427
A39685A76DD636DC4ADCC53F2A78F795F48EFB23807E5751023FE324CB401281
60F8A8DA779A245DBC26E73B61A1450F25AC276E1B5240578E85E1CDF5A784F7
D4F5BAFA76F70300972E4B130C685189C4010B9035A5CBF0562EB3B387FD89F5
C53A25D3E883B506E0B477389DA5CFA82CB157D8C30F287678B0F9A17F5A8704
ACB5DC57D7CAD21A4EBA49248F277F929D3E49B17463EA5F31A4FC11B0836E34
3A5FDDC6B9A45113590F114B99566D18C21464E7FC1D9AAA9B1133E5E8E2D14B
8E143E1E16595C42376694A83684E3B217A17F158DE89549ECCCB443701B520B
E20B972CA5EC6405C479C5054663D48A22D105AC98AF094340B5964D0C26D9CE
241D2706D3444C1405B2C9F7C912CDFC87EE8FBA01C0020D1AED1A6205A8A45F
8504B42431DB5409BA8AC472F2FCB4CE698F6DA92C4C8BF1293C2C998B771540
3D933EB5E976B7D2252DAE9584E5C6864B29C3048EE159BCB7638CA956E07F81
F76391380AAD2F1DC2DC201BAC657A1BC93F5569A5F612A4EB6B01F136F41B87
E20D4DD6ABD7ACF1275FD80D9BBB87A45572979BDFEF59212F1F6D9423FEC976
1228499D626A328569B4BA2755B1ACD20796398AEEC5F3C61122D52124996535
D0813227F549FCF59C6182D6514A70F9E38565C8C98D5F797318FB531B5DA58E
EC60235B6F1D97CA5D495CF689C3F9B3260998ADA1204AC00135C7C72700DB00
7C06798A46E897875BE619508DFA2201FDCF689E51C3D85342247B059C0DDA14
766A31E3E25E792F090DF3EA0C45C3F64AFB918BDFF92FF0ADA2F71866CA190B
87B2FF90C872284652619F084E2259F044E2980101A62004AE9F4BBF675C5279
BA3437ADDF2D552A033D2301A669EE8BBC840C0028275D077B8E9977D447B396
F1D82608E030FA43511BA01C345078986B8C35B6C6990D018C2DD2CBC7774450
D8482DBB262BB816E6A26A1FEB084FC2027C62D17790C80C65A9183F23BB2458
34FDC5D566C1B667EE801D0521BBA520A15C0C923EDAD84AD6A83DB23806711B
0AC2631C15EB1D33C26F8D65852EC37A3479152557366929A63B753226059870
45CE6403CA23FF95BCFB6F0C8DF8CAFCC0BF27C59414217CC6552F5945D9E6DA
AF83F4AB1917742F7502B069DE44A6ED3BEC966F59A84FAA2F8DE441C11FB122
DEF1768D250C0CA5F2DDE6FC4E24FD3AE4386B91ED2A492A959BF7E4C0AABEAA
5BC2D933147A4A21FC5E5CF3B2AF5C0A768A8B79337FA3934A43E24F9F7DF24D
22C5BFE4DF1FD57289A6E1C9AA48D32D20F613AE94B4308E0D3BE4D1BC95B33E
A9911B82EFF461D295C5462EE2B12A3E40B89E0BC778FB76F8B847B6AA99E061
3444A55D83FF839B926985B0F4E562D726FD99C5DC86DA24BA7AF38B93C90F51
A937E7C35793010F351594465B39BA5276F223DD3CAE1868B969D8EC93AA50C1
4C7E51D0D7F5E9F0EDBE1BE24BA5A977163BEC724D575749C56C4F39BD60F3AC
47B930C9E07A2D59642C9DE85EA6FAD1E7D8817812C049FDAEE148E8AB207B89
B2324191F1A82A7C499E7BF09CF1299F0ECF55EB0A2A32C5BB89411B4AF2A401
074718859CDC27C2FA78BC5269D5A38DBCAE55F6CB669DEED2C36E5B0D590504
B6162391FACA9F20224E6AD24B86CCAC0048EC7A618B3263F82A317B3969F0FA
9D5EA4676B27F371785FFF6599B61A6D32E82DD9D511B04E03F14C95A4CA6CD9
5B59A8A7BFB2AE32E9357C7766528E9F74BB8D0B9317F02EDACE2033B7918D6B
8616F1C1B3E113B0F77B0A1292E41F8353DB55EBD872290491AE1FBE95EC034F
DAC1394928930EE297693598D97EBD0720A0A7B4A5DF4EF4BE0E2E0968E64CB8
167CA1B8C40A779023AB6F74E0F1626D8BFFA96EA09CA88524837B18DA6152A4
3F0DC3C3958EFFF86B07581B416720FADFFC4AD35F1553A18944A6DB8FAB0AE0
A8118C09DC8E905CA32904B44E0541FCC7EE555335E61108D8346B4EF697DE67
7F67E1E4CF0EE2F6D89D10FF2D115C6F8163B8180378018F58C148EAD188E969
C60B83C7B295F30614B93FF925BBB2974B0B9C68C2BBA6E973DBFB5500A574A4
F7348BD31C735A1E57519990582D8F7D97F8B63D9DCD488DC569D5B392FF26FE
F06F9762956D64E9C258EB9B90733BAA8F1912F3B9AE88C6D14DB46B7131BCBB
D47CE60D9C63FE0B9620D03F615EEDAA3C76A7285F9897A0D476F35F5CC158D2
D148CA1E5A96D16253B360F34336D476FABE9A434AAD5FCF65A27F48C5BC3519
DCBC35DC1D324A270996B8DEC6D3833E76A434E05074C7E3FC8E5633D6B25B7D
69D9BF7039DE4E755A7E3BEC8A4E5929A98FE265E742B269666C75644E53E6A4
C5AC907F7DEB319BC88CD1A7F29A0A4D43D471892A674D50C70BB6EFE5740F97
50522F2EF056E208C0134EAF15DC9F85C7C06066782B715A5EBC22AD414A169D
86A2F606150B6F903D3AAAF44E75649DC410C3B8C845909BFC8235E573A2D291
19440D724C960014917EC802414651E298160EA70FD54BE4EAA1A1007ABDA8B6
085A89221C3DD5E9C759C19BAD6EFB91360CFDEE6C4876AC19B4BF67A38BBD5E
0BA20996BEFC1F8C427EBDD666B30DF5A2389F1F3BCA17132FEFFD3231570AD2
61CB33381A0D2E2FDFF470FAC3A60E61E99C76A3F4A6BF32FD4B2B6DB6B27F2A
76A5C35E24E78F7DF28AE1B7D04A71097881CB67E060DE537C1A318B95964FAA
1455264E48DAC7689EF10905E381C569DD65825089EF325595388FA5BA6A1EA2
E2536872DE92D46AF3BB3F1DD920FBAA4481034DF831FD15C01798AB04A73B50
1461BA7298B2EAD460D6E645A9ED41EE0E0282C335AA716D7563AD7CFE2841B7
0C782ED3F6D31871350A12A41AEFE21E9A03DF676671E4C953E51F801CBEE091
BE0B7B413B7EA2479E2529DE9E49C03CBE8159DB1B28D2E290826B6D01B35DDD
083F85E9CAE378C1A3B7065280D9FFEB04A02B76F1F0E547328F005CBD39936A
5063812D1C958FD4EA6BE9FF87E5FAAD483055819D1DC39D31B8417B44F30B50
EC95E26103A0DC2241B56DC62D424438A5FDBA8AD4D9B417F0DC31CD82DD772E
FEA23036A719927A4654876985FF4AC2D28A180969A76F3584D001A2EFAA2BB3
7F0CC228CAD9A485F3FEE3E0F0059D3BD8484FB97593A6EF08F9D352E3860613
2617ED6138ABE551DBC67F0151D0F9CD83A613C245E23FEE6FCC8858592AB43F
8E66FDC5A27F9312091478D102BF867B320431F7A6EA42EA763C51FF7E0E0FED
A6A830AC95600C837033968174A9406D0DFA72FD65ADF153E5CB3420CEC76A3B
43DA6743F24C6CFE0E9A7E78D540385B657CCB379BF5E238A07B836F907017D9
C0CBA503FCF625536E27B77A262A0EA1C3DFAB015EC859FFE5BB26197A05F4F9
87046F3AFD3387CF1B040DA7B7CFB1EE92816C7C172164CBAE3E9204559C2A74
87E4A41AFB16E7789686047067947F41C82A26E3F343E7359804BFB3B7904F4A
12FBB7EA0E8C26801ACE0E9093D7E2C3E288F781E3E6A53B8C121625CEE7354F
B1A059AFE21AB4DD2B43A9DA710F2D811F63DC41699FCC43330DC7AB9CD10F00
C959F73155E9D63EE7B20970C7AB1B9A8A51D0DA0ECDB917291FBD57CFAFD9F0
E1636B9DEC48FA7FE5B225283546B01ACF3036F1B5F399688F1657E41A5F4EEC
2CB1324C136CFE6C6B92958597B952552EB7A8D58BA7773CF685FED451D89392
C290D38D67FA7519ABD024B85D3002D8592C5D30B50726C7BD17577FDBA79E38
3D99B3A08797696E593C0BEDC50706C986E6BD05AEF30108F4BA192E956D2942
72F59E1A025FC31568C2EAA1D5942A479203EC01B37626F1EC334DC3C6527C06
41162B68D66E7923911921E861FECF78F36E4BA60B4FB8554E83AB554054B2C5
8C05D3FBA010846BC5B32E9ED62C6A0E8D92B8F3546CE0406A87634E2D96F5E1
F007DA0161E75DA55FEC10F7564CD7CB9AA0A016438D082D9A9FD107CEFA7B27
BA3C61B3A13D9A30E4BAD25B2FAE3ECE3FEBC9722B448E3AC5DD9FF784718F6D
DF58A8A7DA91086BD86AC776CAF3F4F2DBC2F0AA81600D53D2A0EB178568DD96
1ED459E1CD3D897776901284DE5673813ABA0CA7ED342130B261727DBAE566E5
F57FA86A7B4EE5F48F039FB95D318DC142E26022D7F85B34558E99078C5E6467
FB2ECE5B519F7F42C0A29B5C062C6CE6F2E1B611B4C6033E677C436D2D22121D
35E02B314EC425871A9760C80B1EB6A04A6B96EA9E36FFFA2CB830EC3EB2E839
D0751AA4AB1244C1A154ADE5803272A4D03EB18A47B9D091234019D2E2248398
D0BEA2FCD4557D0D226934EECFDDC7D0B0B71B47A6A323AB6C18D6544248F253
F9761EADA629C41FFA0DA6ED4BD6582E0925DDC2C0F2F0DA63D0CB41BA53BB8C
DE8CB21FF1B63CE28927FC98B3BF605F6B316C147E4148F43F68B433E736D2E1
5CBE3466FB2E3AB8CE7FECFE016537A52FD1A6086DFCDE15F7D4A0689DF68098
DC2A5596CBD0C8B621DCDDDDFF1D94F0F773B7D545F7521C2C0B0340F42BAC74
929631A45988ADBC792656B8EAE555BEB44C7D9E177BF60D64D7A92EF8B6EC98
E95591219B28B56B22AB4C00EF96552B4F2B9552C8062FD3AF6DB5E64B0E98E4
858BA701017F06A4346DCFC946394126ED6F9FFB5D6ECFCD82F5EFCA127055FB
692A5D85CD908600AA02034BA22E904A0ADB02D52114768052ABEE0CA1C4BB3C
E2002BE9C62210BDAF91429FDE05103BE44C43570BFD08BF00E01DB649764247
CFF15B4DB3DD55D05668E5507185FF581451572984FEFE32DAA9932EA81AD51F
0838D8FD3630FE359B2012D264B2B330DE47F17BA7657CD0A52D9EA434330FE2
3BB265872E7DAC2DCB6C83680A1124C383235902C1F945E3D1F5022BE5B15E1D
F5E715AD5481D56F5AECD0AD9F7551ABAA2D5871519431A8FDE63F1F016CB0E6
D65B94EB6E242B1E817FF0697FBF6E747EAE5FA7D6E5E818653A1BB60F6C920D
022C5A8E85EF76F2C6054E2A6A36A67BF3640E9A2E6A03CF7D9E36C640D65124
5E58E920485427900709B5AF6901BBE2B1585316DB549EAB8FADB4A28E7C3ADF
7FE62D3FDC18C1464E55BB3A2C214823FF848EC3E7799B016877855205761505
D1FFE978DFF66D1E9A80887CE279BAB447C788838DE374B8DBA4CCC55087E36C
1C8B41C4D5907A7D5EA702E574092FB839FA3E99FEDE4A264B9D6CB1C26F7DE0
F670B14EE2043A7DC8DFAFD535F472B8E3664A5833F31BBCB43D5293C95FAC4A
380CF056E9911E8E36DA4972876C5F765F7BC2D74B993770F5EDA6F1DEEC6909
039FD89EF18304B5FA5F6645E72CE6A10A4C3F0A0B127FD8D6DED43077D49B83
229C5598E2574F14B31C55D110EEDEB77D153DDC906FC16017D87FF4FFCAD415
056C6D8E17B7248ABAA24C19E2556716368036D626C36FB1AD0F2C90EC8C6C27
877467CFB2D537F6C79DB896179FB02B42EE2068EC37AC0DF0ED4E12BADFE1D0
0589B5E3761BCDC03987B144F9C05E79FA7959B8E93F44382F29E9D528BF050B
E6986A07B147DC59E414A9E00BFBF35E6224AF3AF82761132B5DEC2FE1B2FFB2
B9784BE80BFDCE05F0740A7AF2AB00C678ECF0B084CB2A4C4C3A66D78B6BE88E
A04C719309D47D132122F7A190F70C94B3FCDD9D858C5933C95CC9A56794CD0A
021DA7A30AD3E6568D7DA23C47C03A1729FFB544EA7EFCB02B512A6B11934547
B080C4B15A501AF895929255865867698A4EC09E85C02DC691668D599CDE2AE0
3189B0F000B5F957F3B5153E4CD362CC40613979DCF4BAF34FD2CA64B13D20E6
A288A422087C38CAF97F42CCE41FFFAA13FBD7CE641C79A0C0AC27164388525F
46B72154898DBE30B2D8C498F2C0AD33C02CA3C9CC6436E5713A61AD7CD79EAC
588E0C8DE1BCAEE4052FB31734CB698D607D5E22CDAD584FDB18DBCD702ECEDC
B0D14C8A181A3D319FDAF74301CA72C1CBB8B682C4922198F2AAD5C986230FA2
04DE24A357CEA33B2E8D869AB8B87BD1E36D13159812E892ECEEFE7634D33CD8
855271577F627EE51C8F89477AB7AD3C26FB93A62D5DFE4A07C7A91E282D24C7
237194F312E0600AC087ED7F08D9327547CAABEDA4406BFE8F6FE4FE8D227DAB
7FB5324217966BB8DDC55E04512129D180666B0A5616B6D87DB0719B4C8D917F
48A2B2501F9BA18F3B25EC1C28487B7D93621DE50FF8A9FC48C4ED49E64E8E22
8DDA8D8929CB2FD60072C2F1D07988F589698E9257CB36EC8753D1F09A9E4154
F865D267E81B2AE0C390959DDF5F7C0F7D7C2845F0ED49739AACB78506FC3294
0D448CA6E614A6CB1F3DE7A07DADF7D25D09494487AE2DDE3BCAA9623A35C50F
C8F4F535F803FE5910F4C6C3E6761B25D4244B38E6E8767B5BCCFF7E8243CAA0
1DF7E6889CCB070D0828A49FAAA9EEA78CBFBA022867FA1CB5A94E8AE11294B5
9BE135A88158DF6321BD06434A16E46641EF45F7A09B56FBD2A15F9D2DEDCA26
82BEE0C8F66029AB10A64EC330336604EF86A4429E0F90944778D95575664845
86A59EC3B6914DA65215E9A39B376F9173E33FEB9054BF5B47AD654DF28CFF2C
5A4089ACDC5EC0BD4B7BBB2ACE560AF559FFB33CBEC6A3D4D5EF380E5239470D
AF6A24F93C9ACA283EC72AA6CC7E8330A8641B57A92F2658C407F125EE256A22
FE5F3D12FBC99695B4C1B8638D99A82C5EDE745361D4DF22EFC2171183C59657
02F8A4F8306DA590B6F41E45814DFFECFC78D90BA5FA8D4FDCAE9CB05CF96B82
B9DEBB9D51643CE654A08135E3C18E2EFD404D9CD792B519BB035660BEF03AC0
67BEA20A96A8900C8BF85883B9B49F48B8474F315B4CBF1F5AA71DB1F183D12A
386774CEE07D29B90EEB7409125A76E34224DA0574CDFCE9B6A9EC8D46CCBA3A
3F51876A28CAA9271A0D716EE2362525CCED920F016E0B528CC121CED16CD93A
5128BB626533D139F5DAB6C5CDC416D7F02034E1221380DE4C608B2D4077A5F7
EFB575794B3F63574FD197DDD7541AFEBD907461571348A02CE8B97889D26081
6200E8F6484BBA3BA1B89E763353EAAEE3C967C3F65FA91CC162A18A313FC53E
B5DB75B87AC4764DBB15343F43A6EF8367EEA8C1182A77E3732C3D4B063FE91C
6F7FCCFAD6FCFF0315901081B98FF361D95AAE0417877AE303E0BA0FFD43C89F
F5DE1D0618FE5CBEF41FB2A0B190036102A66A5BA7C12BB10FB86812F051F8F1
D48241579D6E441248865ACB7D06589A650E5FC92A3CE67B0D5CFA41020FAB1C
336778F4FD6923490D898511C2AA43686C8093C629876EF3DBEEA13441567EE9
9EE12F558CD0A430679A33EA40C8B028253012739A71A54C9803635BA555422A
C4DD3F8C81B34BB76400A95A262F5007422EEC60EFEBC1B9AD22518006BCDB3A
B327826C053573DF2B6A94AAF9460AF16C5AB0833A2E74283C978EBBF03594C9
2EEEA88F71A6618CAD39EA58605DE17BDA89D193872A0749E3552B544E8F9AEA
AEE7F99AD61FCD0AAA22E0818854EB10DAB610E463A12FFF2A8362536BD2427F
9743A5457B4A46107CB744BD1792B1233996B2CDCD031D6A8CC943DB1E473B86
F59023D66329944F2E9410269E1A450C9A2966AE07D9569722FB136DC25BAC55
1D67985DA705DFB1677B311FA104058A463620A7494646D74661BE68B576DA2D
B698A94E71CA597ACE885C8A11EEEC603A0187CBF72E2DE7C42C84E158EB8EB6
420E4590B5F476FE90CDDFEAD6A86148745C1343FE1502FF71BCBB9FF3D12390
40E62C71912FAD3FCA407F10B56CAF17FB4B970D46EBE62DC47D38283CF77A7C
9828A2009591175B556F1801FDDB4D102D2BEB0E6B4D02A00167BE8DC2D1CEDA
7C0E80861FE5048ACAF37282050709DA260B6D010DB18075A8D23206617653EF
A774FBA990583B10153672AFEF2EEE94B63AAC2182A549EB61EAAF598D063184
B5E34184259B14EE7621740A439F95F2BCAF790C58C01F40D10C7373866449E0
D2AD105B2727E93748BDEB43AC9A075400EDF5C995B460A402A317B38EABC203
6DB56416C8BD2831F8246FA34DC5E17A637AB3D7EDC944B547CF74196C30150D
9C10466FE312EA04A68C18D825916FA472F197EC1083E1E449E08113D38F4175
2233B220056CFAAC1F14FA91CE5BFCE8881DA3085E45616180318569E1DD1700
62DF7B6F0E38344E340B383FE929C38E03183F0E16805B06D70BDF2598F202A0
F4AA362F6816B339EF01EDCD06CAFE66CEA119145DAE3DDD6A34A12331C81FFA
A5D1E2DDD6CEA36AE996CEDB1A3A9AE0C3E7EBF12182D89C1D13B75EC9984167
764F65AFF332A291D49FDF0A3C36683B33FC0E8EC75F87F38CCF4D9C4583F081
5C9B03B963E980142F1705004DBA2DFA061B07DD513F69FDA0502D1DEFF903C0
4E48D25AED4649AC4D866832FF020A86F5598042A5182A1B269FC5B788AE7C9C
93A7D3BE3D58C5AB2EF61AC7E214FC46936FF99A99481EE5C6A37EE6F64129AF
90C0E0AAB0A028CC9461A87098D1C7549663238800D593280662EC241D1F504B
3BA769E5D6D54A0B471684C58EE80BE78DA6AC351A257E9660943A22FDE30138
5A85FCFB3F42070EF6FE587094CFCD0E8BCB40EB6AB2E0FB132CF34654E3E476
B0184C06ABF29B4897396288E5BBB103D6E9F3592204CC6F08A082A377DB2DFE
C1778F1A6E4D58CC7FE4CDCFE033D99B1958EEDCC87C81EACA6BD994B98A3373
AFA7CC85E9858DE3FC969B367DE5A5F0EA81F945C3078B9272C789B84AFCF468
D14302B1A46E83A0C4831E765293209D071A2C8284DB8D6DFADD4AF88E6B0DB4
7BCC886CC6C220019738A35081BEA5D92C523A60976A9805EBD703D970FAA89B
A75E9A9A3B05F4813AF858BD5BF7B00F25D9EB703ECC9BA3544B8E834AA326F8
77FD5FC298AE7364B54FB6EBE7F01DDAC92985E15F85888F5603A87E9C09B5A9
654B4EE315CCD9F0BF9FA97B4424C9A86890144E6D46EEBD0BEA85D97EC7FD6C
FBCA366378DA798689874079E8866982EB05B2323D2676B6F71549271009A124
12A74286087A872748853A1B3A1C30B58DA1A6AA7CF075AB42F3599959181BCA
2A14215D87B437D23B928BA18A0DE0D03C3B29743376995FFCCFF810500C2CD4
465225F59E16138AECA8BF4EB19DC300EF3BF21A5FC29C9E37CBC7B3A6076025
4506038E76EC13C6E0FB1DA8E854E782511E69BFBD11269C3C888EA6EF413456
E68CCBF1D22961E09A41BE344AF2A76ECB27258F5C6B7319B31EF4CA7A2BEE72
FBDA6C196E5C5EF833AE810209D60D57F487A8B65751E7C6896CDD2456C751B5
D55741953D0CFFA41DB66E74B0FC1144966C0266C888A08351DD8E9BA012003A
60FB4EE7F1B4346D7BD1915B45BD1DC4BFFB026143CA21100018DB561F1A4968
1847C656073465C3098121B7B5FCCFBCF620AF0E64A852D386CA1F2A070D4CD5
81C96BA22E505A10B694293DD2F5807413CC3071A4A2A3E6A1249E100025D5D8
0EEF3974977956DCB24FBFE04B9B1DA6CF9DA9049234F154AE5E84E4BB7D36EB
29D564432F4399A32B2ACD3683F821163ED0DF587E0A4C9634B1B397C5204180
50ECDEFE3FDB9E5CEC1BDCCDEEB46436F66D3F26610CFA1B40A76A42423A2BD2
EA20C569E8998447ED06E028A39FCC1CE0AD758ADAA4CFEEEBA210AACDE476A7
9B18CFAE4AF680695F4898D01DD451DABDADF679AC2032A04D2F06F1A07EBB28
2B445D077E34E55C813378012FF986385CD777CB6598DFD42AA22C45D7470213
4AC5224A047095BB23AF76CDA77C165FC90401D5E7F3B2B6E36565A0C93FE5D9
2FF61F21AC487504C9DAB74F5CF6061A81D35D82CF6238317614D9C4B442E3FF
F4802C3B7615A8A412801709E5C2D1DF99ECF3D773B5C0CF1B64535C489B8B95
DD8E81B9F012FE86E517E95A4293F212CEE0E54DE789CB2187B75142BB8C78C7
7EB40D2E5F0D26C53E93EC1901D4F58DCF51D0FC54A5030FABF50D522BB68B63
48DCD982BC68F5E0BB0C86DDDA4FFD945CB13A50E569C40DE624990F1446A5A5
C7BF3B2B32633305807CD11BA477B79C01D496D34DFF6CA5C64075CA1ED0299D
95B65E37AD12D353AC7327F48D66FB7E420E305502107CA9856B0FBB65429257
773757833D450DD1B652270FF395F02B498DCFE4F4A219093DD5AA45D57C45FD
47355859A05543383E919647722D113EBC6E11EF80AE4E301AFE9E1340A56E74
35CB1E977D06B70BE581D500B4B86641AEA6116297F1E6F3281E5A05BC4B9FD7
ACDE61FD9B8ECBD6D6B652760BFF94E7A7B2DBEB93F3B4B018EACE94B7DE606C
FB9ABDA7836F79300246FCDBC23B7D5FC94456A1867CFCDAC24D964BAF302B6F
F0A5E1F1C8EB33CFC724F5E798207C361B17F9CED2D3D8FE7A74E85A68E84B47
6034B22FA543C3DD8C538F80633205AB19A62DC8AE6A50B90BC2FFA90A1452A0
DBF2DB480D39CEE55E9B994A97CB350FF2CDB70EA834C45CC6D8B7D907A75BEE
F4341626B1E3E32C8C61FB95E5BE1F573CA8A0D33F9097BA462F1C53717546CE
C983CE611C2E57448C173A923450DC3EB3330FDCA528AABEC7DFFB9EB2C43FE6
C7AACC328DA3C0EEEA17538E4E41344E89521C2B6EE7B37D178BD4384907716B
13B392FA77AC87A24A604D1E3C040281F8A32D7135D78FBC5034CBDABA038347
19C3ACA159169CA7B65DD053BEAD618821BC360EF3A9D7BA541DE795E85B99A7
A205CCEF15F174742B9A72677DCC0D8437E8A68EC5AB5DB7810C263ABAFA1311
94D1D7804B4493F4D551C9B59D2B727CF941F6048CFB232A6B802A835F787B2B
3D394DD44D922BE57A3EC7E7E3D3E7D429B2A8EFEEEA8A2DB3F32904B81AEA40
CFFE3197D044E30705DFEFD722930D4C3DA9662CD28F8DA28ECE70C4F0FC8D11
FBB199A4328CFD10BD391C69B9771E1ACDF06F6CDC263ECA16F69D9FF8481DFD
86EA6A6C76A3D345E725A13910891F8493287A7B00966AA3D3DE771F053212D1
A4E1E0C17991EB5B8F0E20A4FDEA20FEA0236F35D98C0026019813A9258068D1
752C4272C127DF57C383E3185C98578203F7201CCCE2AC57665A17A4FA27DE92
FCF219B7F3F1F233C356697E92F4A0E0D9843E35651D863A89CE33708D287143
1A86171AEBEC97F7755DBA77DBC2EE7410F0DC1ED4FD80E5135CFE5936FA2D79
9B1D28CA8B4F60FB6E1ADA397E00448A26E824120AED08176B394646D68ED2A3
117F6098D0FB9933CC17E595297F73CA7DC11A7608A63177F4C133DCE8729055
1369FDED389C9126C1341ACC431E5EDA332FDFC0B3E8D0C45494731DC9E32723
112F8CDF2179FAB497525659783769A9E6DB31DAD05650B0F6A29A13C881204E
EFA3A93EA9B27AF64C856DDA0735059441C9FEB365EEAC491B09BDE49ED19431
B6D91E7FB74B4880DE912369DBCCB7B8EA83FB08DB59F6C35E4C9D7584164B4C
EFA59A066D2EBC571FCC11EB164C30EBEBCD3A546217F8074EC731F21719C2C9
D96134C6595BAAAA569DC5871570B8EF5A050911FC221C08E6369652FACAC52C
EFC73D2AEF4545FD24979C8593ED55B247E782AD81A19F11688A44C5E259E350
D676D0FB1A648B3992F1B6AE3A89C32CDB96D2AA0D3BEADBC355D5E028432C00
4E6E03AC6E3EB59B6581B767FD14E8F8C79E7504D82D4CE96A2903CCD21B9CC2
1B9EA5102931A0C611927EA27684F64825146660569F9002A149A35AFBB94261
4E0FB38356679FAA2991C3DD2700D38311BBD6B250BA74F0025F4DE1485DA84C
7B886AAE3C5EC61A9C6CE191A306C114F49BD5EDE9E56618701B769A6E813F3C
A2EDCB4F388226D5AE5EAB33FE64597C3CF871D486000B4C571527874C9E4A56
0BD7401C5F824D2122BF037C4D22C51918CEE953D96B57F968391DF6BFFBDA1B
81E84E2F5C77937234D11075575FA8326A9E9769CFE9A2C559CB4899BE04DD9F
BFDA94AD8E8007ACF3EDC046C82A686056144F5486587F5DA53E3AE9FC83DF85
2B3CFECA4D81EAB0090ACB1E80B28AF2A7C7E971A7BE5E51460F087E00B301BE
BEC29974E970EFF5F4D8218EE33179DCF55A0418222A91F5BF7BEACEF8187457
F82668E1318C1B74471F4F1F90A0BFDF3852244286E6E734B8D9CBE42D176A6A
CC5497979977D005DE1EBF2B4ED8B5346AE3F9EC148A24903A58B99A38FF40CD
5D8DB463E7F022B40B32D624E08CA40C2B375B38B252B334173F947839FB36E9
F1764958834BB7B79C04405DF33CA5CF82FBF527C3EEEE4A1C8984B907E7B74D
DD2F6B28EFCAA89E6205BCC2AD0498CCC04AA5B22E06E29F1CB827A3F6A69284
50CB203C1517AD32918208040D5E2E1B822AE2D5DA835D9D105BBAB495B7AE56
BD070F1031744392DA7D2648AC8B169A072C44115140BC34BA758978BC4A622C
06AC34A1963C8848E833B00C2FB50A0DB1DE9B45766061812B09AFFE7BE2F8D3
9B978AED97839C63F89414A312BC0A83C1201EAF33E7E8C08AE45FEB6CB9D471
409EE261ED64DFED488EA9204E64F847D510D89B9222689CB0457A339CDC0AC8
52897B44F611B0316E80597366D0C9475C1AB11A2D454C38B81C1D51252C567E
F8E9C76C88477A4C3BE3CC239302F923148D7C2E6B76C96147B52C10A4153D8A
3FE72AF1223D0690DD071A210244ACB686D9171EC13659DA49553766DC86E7B9
3FAC7A6CD4EACB59CCEFA2775E5AC06B58890A739DF58715CDC0798F7CD62079
78FD170B1A01A98AA1481D257DDC6A69C8B6749BEDC29FBA5A7116CE0AFF39C2
AEF2B3F9B6FCA97DA3FA67B660444E12EDC2371AF5F77F2201853E9C260CF3FA
59718EC1546FDFC1F14E43979D2050F4BEA6FB004E16D89A58B2DD6EDE958E03
7D1F713EEF1E66128DE07C413F95AAE154BC9DD1537DE8C2634201D7F7728671
4D262055E5EABE27A5E61710521C5FED2D87707858F3738494A2B916B372F640
F68DFB3A56D562A46B84F3840C3EE2E489F9B3080A9E0032E15A21529BB189A6
6994FD3683B326961DAF2A982C1B4BAAE1E8F5665087EC8B89271D9A6FA7ED2B
00B0A372FAC41541638640478C9FCDDAEB9393AEEA4A6211BC676ECF8FE85276
16423CA90ED4FD72E3865F6AE041F124034A3CB90A5C7D360A3997DAED4354AB
656D0666221B93CCD70F3B03BE6EFB75D4484EFC7E842BB0F167F845D1C42601
86D7C6D519AA85CFB24C7A80BBEF7BA3C77A14917A1A9F02B164C91D74C2433F
79EE13FBB31EE8C44FE31CEE80C07F636E6B683886A6716B5E242410D3056891
38DCD4E8FDF59C7FFD96406571506F3B2BF8F4CFE55AB51EFA478729561E5308
37716C55B9AC353B9B9DF0623B318D8B442DDA7033DD5481041AD38048FAB3D2
44EC5EB4C021BAA3A3B27421A447E6CBEF07ECEBD173A2EE98775D79F2E3925C
DAAF78AAA1B28850C1AEA5532687AE0F3B838C3B459BE6C0E967E576D77B462B
FD46042B3D1E5F32384916DBE4B634C9168F4F9DF09BA35C98976538F537AEDC
604419CB559F7F12D78EFA96312A165F6D88847BE9234F6A19FAE107F196193A
2FD60234CA44ADB3DB252A676F80A2F84155FF11F0C7F4CDD03C00320167756D
C9AE699E2CB2C64EB7128D100B0F5803B6B61EA06A62BA7054D6D95DBCA10D86
6948E2BB1D1A80345B13CEF1A717700CE3C9A23D855A819EAE2E32F3C52EF7D9
06FACA69F8D2380071ACC18A60EB0B73CF967E4280E583531452460A58149D89
4F29E6E99A47D6A87ACE0045B4281273A2CAFC719E35361161256E61384CDAB5
7C8CCBF0F53BDA3CDA1EFC68AED2E70CD815AB2C2AB59EB0DAD286B731A09EAB
BC5C28CFAB34C8ECAA36A6619EC8280E0E99ABBBDFE7A4B37D3613EEB8E326F4
103BD6406CCF1BD857610E81930D4D194E8E73F1B67AB95DF622E1F5148F3766
64555E24145BD5BE185A4E9ABA03F05193DF685785DDD7F4A7327376EB6736AF
4B81D6BAC7C0B4DC6E839727AED988D0B7C0A984DB1F5C290B1D6034197428F1
666705492D9C12301C7F10645751F2BAC4AF890526D09464430471BADE4E7E0A
7863688BACC1AE99157A363E2D96D1B765223F8187B44B1CFC59519C30BB4AF4
F2F337EA0D4160840F66CD92799397D559BCA02F195FF4DC3A9D8FB390AB4EF1
94AA171BFFF96799F2D3716552C6675B238850DA586A8A762AE0D7DF34E55D5E
12168A2002CFE109EF03276C46DBDFB26B039997D7691432C0D421BAF04A9F91
6B551392F5BCBE4B8802C1972AB445ECD60C82C737683B2CA7D1BB89D022F3FB
D3ABB24C83F3F24780CCE1C09FB1688D700BE70BB99FDF96A78AB04B232AA660
2A398E8E57C1F6E7E6C9C20663AFD93EAE5F1A61433703962627661E216D8BF1
8E33DE5C0ECA4528059937C6139F2BE9AD14838623D74BEF8986912B76EF8C9F
CAFF8C76F2FDCF69337F4AD58CC3857290076C9FD3A4F732E69AEA08C0656D1A
0A244E647C72E7D30C9544C4379D58E6F6C06BD6B3F2AC7073FE5DB879E8021B
385BD6E11614434D7AE1C9DF1D164F5790E3DE99A2CCD4E83DBCA82506F96A30
2AD049D543C05CE41279447C66C6DFD55A1CE5F9C2C31C3EEC98D30C17185E26
86C9FA960FA7139945A754E82F27A1128C093D2AABD68E71AF777BB51E9F3572
74234934FBC57E277A2AEFC4C69266CBBCE35DCD163E5A0261DE3F9C6DFFF32E
1EE513A0C8AB6430B1B6F4D7EEA125D3D709D3DA20BEB83D890D79C63C579E7C
815677948C1CD7CD41C90D64A138870BC1CAE40DF74696F618BAE97046D508E9
69D6A5F341BC1163AB16F16ECE3A21D00835233AAD3419A589D140D883E8650A
4B96AA1450C399BC348850E936CE43807D027D82A29E65045334AFB10816565D
59FFE15CF2970D8DED34B8A702E9DA410D5BF1FB9B3848DADC7ED019E11728B0
7BA55E50415056E740191D6DC56F04651975E61AB92B94FCCBEF8D40F8C30EFE
FFC80CE8CDE983AE201A53331F59926A724D8D99B78BFBBB3544D33E41A22DE3
EBA9ACB858E45F9727C7A46C097B9DCAAF267EE06D621BC375430AA97A8FD553
833BDD2D284901B8A11B11CB2A85130E19B49929214D9A1134372AA02EE1EE1B
B9D44B87896BBC27F2CB712F6252C99D1C0D57C1507D345403E9873336969974
488723ED243050BE443E9E7D7268B5C020BFEC383017C692F60D99B78FB1C070
8E163837690CF68C701E933608D3CB171A68E90E047E2B4503C932151E84F411
1DED0C579C428B4EBEC627BC58F0438FC206354CA993237139C17E78C80AF230
9C944C0A4FDC1C09DDEF4A91029AA967FB778256E4948472DAB6BBF634F91493
6860FCC7BDE37DAB80F8091A1EDB0445BA0BC7EB3458BEDD4FC2F35C7BDE66E9
AC1829A41F0A75E505E6CF0622368F9E0AF8C84696A0B9587FD506156439A800
45933A27945DEF9058919D5ECE326AD2F36FD2EB6279BF8B1B36FE821CBD2D0A
945407A223BA132519344457D656B930414164B715A163B3199BD90899FD0368
23FFA00DF13AAB0DFBE73F3070544319AC084A7851BB35208192CC46A7BC91AF
F539F85BA70EBA4913F0E87F45C23E14EC5FCE63A53057AC87CACBF76DE371BC
3C7E7CA7A501E58C296097955E9810264FFAD79E4692709C01A7B79E9E996F98
592C8EBCBB2C527ED1C6BEE0C0BC3CEFB771948EAE508CE81F1F4BC9796DEBC4
673C5919025F5996E0EA53EA390CC7AD134827C43C08B7B723B91B0909927B56
9D68B5E0225AE69F812E64E251B71BFA4F8EF7EBBDD9E585B7A3011E370C2A47
40DFE69977AA1C986FF68E4078448DAB786BD2F2DDE7D93A88C61B00364635C8
1FC80B95C59935E2F7080ED4E61B63D6110A2EF2CD1BA33F8F267553B790C815
B7A044B8DFC448004C27CE860D470DC809F1D077818C0AD46C1051FE0A587AD8
7F1F44090EF6CEE3563546F5ADC6F23B140E66001B88125D16E75999FFD51AEC
67D1A5293A91838DCFA60D9C0F2727DDD96E6333A21617C8AEE0E6EF5EFE40B3
17D062C0D18A0C910EB0EAA47FAF7A6C724F804F406F702C6A66BF19CCC9300C
A38FB88CDC8A28A4C9A7AFC92686B2A8B9C490577C54A3DC8485FBF6DFB64D21
98FD8A2411297762BD58E6C039CD6F81D017BE7940B7465B022FAA7CD222BA4B
D1C65894C66C3AEA9107FC2B1E6CC47D589B00B9157D11A532355831DCC30C66
909C18C333043E587EADCCD230FE6634073094600D87D54A7B15C508CCDF9EE3
47ADF6578ED467BAE26F1CB7E04BD263B3372EF74C5E7678463D2F191ABE8E60
C7A2468A9EBAE3D2CECF32D514B9B1B8DD42650F48670747C49819C9CE943046
650723EF8045E8AB3A6D7958A4A9F247BCFFC4BFA4DF5AA703544097E753F733
67F760C47D87E7BA24B1922952BDF43493976C138656636D76F98336C9CDCBB9
E612AB6A29029A5D7EA20488838A9FDC1F3ED2F65E83F2AE841E4F313E359D07
59B48AB34313F7780428C7781E0D4CC3C7A1191E742B79F4421B8138FBDC9516
223BC93A22DD28E2D41A74F0A7CBDA0FFF645C0594CCECCCBA15A61108C31E81
A5990DC15F21DE145394516D2ABA2B808F737205C4F5521E41F3C9BAF8052F34
FA623034EEBF84767DAFF3330B7E3F4D223B916FE268F0AD587B244596EAAC5F
9D5BB32054EE197D25B9A53554E3376475EA236E88ECAF2CF1F38EDEAC802004
C11BCFC60B4F614D2737100D21BF6708CD3CF0E92C610134694C5434BFC0FA2E
4836EE43F9546FCF7A8BBE2A1119161B0C9702ED767A88754E1D559B7A8A3383
80179D4839C63735F6B555259200C1FE43BF45F350778D8352253DC9A47658D1
8F42DE20805ED1D02A3084C8E66134E06F6A476A9526FF2066A68344B062BADD
6D6156AB311017F7B71315C60265645048E113C9034F05ABBDB288B6BB491655
64460B0CE05342E3F60AC97E92C3308B97E915EE986FFFBFA92148EC69B9F9A2
A814C36D2C408C43B7301CA01DC15694CB63BEFF4F27815343808774E1C72609
7B500BCE9E400B3B6C72683DED0F82A2B4B51F6BED1D9F87F6A23292CB9C1157
3F6ECA9DBD2A431ED1D0A028D17CB69EFB1D784D01C036A5BCBDD36248AC4F16
436D6A45C7FB01118B4B6820B2DB5326E52F46DFADA2CA5173278A5B1EF7EF5B
67C64772E88643EBD49F912A65E9803E6F2F4BD69785408DF04F04C98F5F87D2
765844F6BF38B3D9AF43DAC1BB2D84766FFC7D3A6A7054A26188EC6391094DBD
C898BEDDEEA1CFEB8C64F48A84BBEC3A7F1EB10FC04DF2238515EFC24803BBD7
4A6C9D9F5B80FE411B299036425EFBD3A2DB11980199A54411425015629B07E6
D9DFE88C2B73787319B3AF88BBC0463FA54C0F63E1BCD7E04E9B892B812F1875
01A5A80A4A2E6A92569CC2D3E91C64002AAF850AA4A2BFA66ABD64B4FB31AA13
1622B1177B6E6CD8B592019BF21AF70E5A7D96510601976D0BB3C5019E232DF5
285C3EA8A30CBF9D3B046B811BF55C48B9A452145C64944AEE806D963E5B1F82
7E3ED3FE7AE4432378D797928C9112F7A6308181CC19D584BFBAB964FFFEA965
5F093C8E401A528CDA22BED937FA03CE284247861E124B8EFDCB1A51FBC2A916
92F87FBC37758539C219861C670211CFED48DE5EE9296FDE621784EFF764272A
A630966363E3DA657FE3D1E5B3F60296DF1141EF4ADD35BC8FC30867F3DFD256
090B26330CCEDC4B2FFB4700B81B5EC9B774A23C0A93D8BFDF0ED10167DEDF5B
C5D9747A70BD74022250E1354FE1597B02F4B5DC828DB7400B7F9D44AF4026A4
B26C47B4E0EA32E575F89A83DC9321294FEE46FB918273357AE846B3AED17DC7
3B0FB5410678269EB99867AE955760B3E37E1684F83432D260DE9DACB8F4217A
0B88DA4A36615344CDA2F7A6DEA659507CF33414AA25520F2C09CE97CDF4A998
FA944BB9F6B8581993DA594B7C57381B2ADADA9F95B37DD491D482EB40BF81DD
C46D10B94FB73A699CFCBD977F9925E40EE2881532AD525190CA687C57476517
3962A3524F5DD2BAEC1C1E79CEC2CBFB11CA2DF171143D199908367ED04A6498
F6FAF302858568518B60BC25F75CBAE64E80D5C4F1414B532554C589FD7BED5C
17D316FDF977F704281AAB610ACCE69B60CAE0F76E69A6E344962B51CE45D7E5
C791575DEA93B1063892E18036B1D4AFF73CE089C9C3960FF97FBD632D3B320F
1862E0E5947B9C083E6B7C96D31993905CF3A809BB6785337E18BA87A5F62A8F
3184AB973F249B384604FA321478273FC243504379F09E11BC4E161A423791A8
83BB2E3F7077A9822603E67A65318A2BC318AD051FC2C1D5DE5432E0A70B59C9
ADF7D0C20905283577DF784716FCE72D616824DA9AC519E20FA17A7BC54C6139
CC3D1E5755159731B988C86CEC6A6CDF44AD83DC169C51E0BFDC09EC3A227D9E

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI9
%!PS-AdobeFont-1.0: CMMI9 003.002
%%Title: CMMI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI9 known{/CMMI9 findfont dup/UniqueID known{dup
/UniqueID get 5087384 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI9 def
/FontBBox {-29 -250 1075 750 }readonly def
/UniqueID 5087384 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI9.) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /triangleright put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 73 /I put
dup 76 /L put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBD07FC5A8862A8DB
7E2B90C16137614CDAFB584A32E50C0935109679E31306B8BDD29F1756946A67
7A7C2D9BA6FAB9B20A424AA0E6F4BA64C2801C2FB5A1156CBEED0ACB95F697B8
BC2A6E6AA7EB1F9FD8E3C9B1A16697EE1F0E7400421A7765AB218FC837A49365
82DC6B2C877A7DA84A81E6126EE96DB25C17A207D3020A045DCDAA064360DFFC
E3CD50E21ED239D2A6450D04F879A26443ADEB6A20ACC504989876476C7D1A74
91564FEA1F4CC2C8C8FDF666DB537F315AE1886C73CB5B00E67E7B398A6C018E
540EAEE98BB8136C4F044EDD63C33431D2CF9740F051DF365A4045D9D8782112
7BB5D494D9235BA98CF2F30CB119F5A904C32AD04C960C43FC1F5FD8DA7D90D8
93AFB59F3FF4F796481AE2A7548F948FECFC6C127C4D3F159B08F206AE8C296D
EE470DB2F879EA79475E029D22D7A8535C09A18689DB0609CC233E5199C02756
972CC9C94D9FCE264DEE5D75C8D651E4E2D1189AD9588CB815722BB5EE3C379A
6F31C2E6AE1AE4CCEB29766190AFA20EA937114978752189F1A9F42B39483149
796FCFA123BA9CCD1D9BE28289660BCAE16C40B5B504058D55CFCBFB4F4E3D94
DDBF39F157E63946534DA81C018B1C01B9F10DDB55E0A5C2B3985ED1977C039B
D6755EA42CD09E27751E159C30B93F376DBE61CD3AED34BA36A768F232EB3B80
E3E6B77C4A48D408217818E398B83D995AB6BC871F20991DF57313D6EB0C793D
0F28088EBDB7F38DAF7E01AAB3476EC24D7BB38A9889A7D3038D930FF4289B83
F54A7BE1E2D98A3822098D2E4D067A0D400C20C0B2B4BBD74C13ED1B827490F9
ECF48F8C3994C1C5AAC9CF783BFA4F307528F51EAB55F961808A42ED53F00C97
72A432EAEDCFCFB622389BDA707B6ACC9433B065CF29EBFE93AD14B8ECD5F47F
F073F11822C49B8BE924CDFA6348C3A75E9BB9BF3F31C41716B34794B28CDAC9
4DB8B087E180A9B3B17680F73D9C12C8D86A922C948093629F5D7F542ED882A1
692F4F6696865E53E3E2DD43B2D5E8C989CFAA5CA5C4C5999045E170BDE9921C
BACD6F2863F5553EAB2BA2D4A9034729EC0C4201DE90DA89B0A27C5A5C974109
4E37BFB3F46B3A506169FB0C68E1CAFC844419A8D261A1FD86A3BB78E33D5FB1
CFC687A5975987CE45155E5FDFAF0CC5FD5568CB1C26212F92E88255F0549F59
41B33125946DE43436BEC00804063FBF03EC796E3361B1C852EC3038D107F80A
9198968265D5488B26D7670B22C2D75EDFFD1B7B4AAFA36DFD94640C9D0E2D20
5BCA18683EFB91834A3939AB8EB60E2F09655BE003582634C52770DA9668C292
2E02929D812EE2B0CC65F020064AD5BDAC5F5693B30508F40ED8E20E87149BD5
8DD41AFF83FD1944804017DC5A04512E593549FFFAE501131CE2FDB65EFD0B8B
33809CBAEE411B3941C241550B9C30DD28088708F1C0CC3125CBEDCD985EAD28
03313741F67DB5744A87B381147D5BA70AE1145C27F794854628D87D6C1ECCA1
749E3465B950175D3C3F40E344297BD92D3190041A4392033A79BEAEAABB8DBE
CC14E39612F43721CFAE6F79074429221CA588AA2501DE520A464DE157A03AFE
3C082FAE7628FC0C57FFC61D0330AE6332D20FDBB09BF36848FE05E782D6379F
64F9C82C45402481B0A35989027F9756BF5A79DA2D96E10F39167ADB4305578F
90B509B6891338FA1D67DCFD61804AA6621526B2EE4769589A2646581712AC05
DA6E98D16494F07D612743058F54FEE516BD89A8EC3E03F9D7F905175D3412C8
F7329077FD6EB25213F3CAC94BA0C3363B759401B6EF7548C7D709F3241D030D
4EB46A1AE81863C412BDDAEA6084C37143A4C5E41BC646315B1CD09F934186CF
49D1D8239E363A435307030BD79536B50B723A39DD763DB539F24A10DDA12BD4
E467339D2D6DB177D6FC539FA77D2DE4118EBAC161E928749F7C753ADEF86117
58619F1155C563DF2E11ACA8347908B98113AED58FCD0394150EEC94B7F986EE
88BF7171D208D8F1774B1DD478F0C2958AE372D257E7EDF0F6B5D6059CC4D5D3
B00FCBD2E9CBE79235B9A5A3E943CC27AABB58728C95C7DBD4F4A1F8A4DA99AE
7377B0CC0BFBD454794398AE0D5F7281771FFE87B25A819F36E692286A42D776
01794A43CA9BB30FB8FFDAAF014F909A369E34C2F6C75B7D4EB9DB0580E33F46
19654443AFF8384B95600B86FF8E41FEFD032355626D60C7507C058EF832DF41
194B48A36F11082D1DCF4723E21401E0C7447AABFAB4639B26E3D2730E348F55
53EBFF39CDD03E06E2FA5FB379603C879EDB7E1A10F89695C9C47DEEE52BE0A3
F446F187AB9D7E93E6F9387F21129034F36DF40605D28FD526AF82CA9D232BE4
412567F06B38ECCD496EF40A7B243E46C9FEBA4F1BF4B1ECA029C5EC239353D6
C0B100BF7E7DB33BD1277DE104F15AA19F37340A777741AD1AD693BC76DA48CC
C6F83CD84591ECFEE375979972B0FAC4C10B625E4BFB261B9FFFA83C31DA0108
4FFB6377466E9739E0EB64424BD9FC7239C7DD834EC6788A0F97FE714AF92831
E1BA36A8A9E24739F1DC82DC26CC3CE28C210AA7C569B19E1784D663A0CA4E81
AFF43E86D6F5F63778847700072CEB77A4EB946DC1F23DBC00BCE773203F76DF
00F0B085F31420672974DDC642D885E95BA6BBE43E1CA8ABF464D9881CDECC7A
E98E31B9754C9B72A8BD5CF6D4D214DBC3BA7A0CDF6635953F5AC1E7639C4A91
C7AECE4C75CA3389C348F656FC2CC96C84C85A926237B6504DB51937C9CFCDAC
B75C31ED570D180757884E27757783DB2D5F35ECC48C496CDA342D49AA947BF8
2FDAD2F19DFE8CD1C76A8FA08F33681F3E12E229D7DAB45BE3A3F258B5ED4980
F15340CF20D965252843E026803E8AEE736EC41CCA82167401977AB719AA2F50
0B791EEAA82027B3C712D2EB9D14BF8F94FBDE2227609BCAC41EC08DE2BAC023
28352F913F7DF08D4E1C66E83F764578B22B4EB7191E852B91ADCCB1BCFDB1F4
E63DFD152E86FA9DE9BC8908130EFDE29CC4401339C05B5B9764CF8EFF14951A
C6C13AF979546996BF22F2B96D3D585B90CD27DADEC78914DA48432C6ACBDD42
20EF583FD41F2F6D6D10C3DF7DD077304B5940BB0462656E306CBD91EB9B756B
7014B1884A36201EC582FC9345C386043DD2818FC301EF78791C1D7854F8FACE
5DE9801DE9F59D5B4271E003AB897B2EF49501589D681D59CFFD9B03F722EEF4
74ABD29997515DA3591496B62666744EA76DCA45504F8075C0652D6779DBEAE4
90430C2945FBD60AD53B51DDBEFC7ED703C418B4B244C8FFA5A3C1B7600C5A55
3EBDB93C16AC191C3A28EB2279BD3F0D67C826BC6A73D3C0AD02262368AB4621
98A1605F2887BC5880E1AF2780330E0FD01D7CAACBB0F008A42C427F38236066
54799594E515B289044BAC4DADF8B3686B4372C5110201221FDA923F131E07E7
93C44BAD406838BA4D1C277EF74098B8C0EDC41EEDD58C195D7DFF5FEDBF96FC
19CEBC6C3006DD2CBF76916B4298BB915663C2F61AFD7747E03A03BD7280197A
9DA590E3D081C6F53DBF94E8D6FDDDD910A70AB18A0F6D48A590FFAB314D6CFD
E3FB20C1F3C91063F00726A2C13A3D48323F9854839405E5A29D66A43E6E2B84
A8B3765F1D817071D4D6FF42BC785C2D11AB2B9452F141696CE19C6AFB9777DB
107D6E22D8CC6C26440BC48248AD8805C4329D46BF433741CB519B21663392DA
5DC7FC9BF37E5BC396BFADD7263D09F6B4D69594AB386B7BDFCF3BACB97A0E08
22013E716E642592A20136CF9CFD61D4E515D80E06A4CB4FC9D9B916C93CEA95
B83B98C48CF36C1D02291D4F5C0419338D64E33C90C90EDD2BA3B96D70FAFE0D
403A060CFF448D3E28A9B1E3916018465E86095BAAB4706CF7ED350D7C554789
D7F4FE5F180767DE8739259E68CF142040BE1E2E8C6152DE3417C1FAEA7584B6
20781DC4A9796431EE713DAC4E713C839D7A4FDC8AB6BFEFFE767AFD8B67FDA6
943AD387E5D3BCB09039ADB64ECC2BE2620C6EC269E708DD06C311F450099E33
AF46AEC644222E7DC4DBB9371EE12CFBC4F9B27AB46AD1DA96CE006E1DF8291F
A550A93026CBFFC1087B134EC6EA76F5E109CDA58FF47338A0039A786A575F70
B8A03A4F9C8D07A4C856C77D9BCC8E3EAA740172D0C2D0A15BA35C9E5717D7FA
2691774DDE730BB9D7C70D7AE103DB8D35F3728470C76EBA0E670634E1A0BA84
2FA102BAD7271DF2680D86A4CA6FC353869987700E5E3FD778165456033D624F
E9B3E80EBF431ACC934AA0357E824B8AD73E222B510DE8445C55C07C8E5DE46D
E478F832BDDECAF2EBB11941DCF84CCD887043FAED9AA90D12BC8CA9A0C8D94F
8D3BF1F80B14B6CAE6BB1C6AA405AA64BB94D5A82CFEA548BA070796A02F9642
87326D066101435AB9EB40BA9EA9E61B363F5F5E3B924369796E8B78DE3414A4
2B79C6A13ECB2F34E6299658D07D2B3DEF3D4383CE009A927F0EF5C196652842
D96B857AB5E905201E7E8BA21A5EBED1FC6863BA9A1A6E5390407F75055E2EEC
512FBDB3E82CEA13663F1A1944DA072C765D8CED06AB461470C5723BDC1271D4
4D1D049D3EB131743F1EC9A6ADDAA038ACA2C41D139DC6A84EC3C61AC7F1E559
6155CC2F49171F6E07CF56D721D9728E87FC7DCBCAC46455A3694C765FE807E9
9CBC2D304AF37E0F28CCB22F239541B53A4D24D09C662559267467EA487BD33A
0BEFD4899B581D20582930703A868655C31BE935364CA6A95FBCB22CB714C040
9718824DFE97929D0482430726CCB5A5307957DD2432A9B6271E849148DEB76B
FAA290FF6D0B18DC5B76407852E81C105EC6CFAB0F620C6DC9DA555A33C167B1
430A8BC338BFC7D75B7099CC906AD923FA107C74D3FBB719D77A4E5A685FF9D8
56424EE4AA074434B809D894ED50F6A60A035C5223EA25DD8983B9B34210DABE
718D7B2BEB293FF1B63CFB1CBDAFC69552963D90F5E3FF533A3FDBB626E9FAA3
F3C119E5E01C7BFF832A033C3515BF049E29558B1DAD652F2888E339E67D15AE
95F9BD14E3253DFE9072B24C0E7E85025B71096AF51C86AECB2921126A43156B
EC812B32B1164BD9B2B947D503C015616DBF2024F5C8CB3236C1DCA653D661FE
6B1C19A22D272A176B7F1B7F9E67AF40DB0EFD4940E58B2A050249CA4E55CAF7
6ACFD84FB46FEF952D18552B3972D79D808B4C263B8C7E1BB647A2D03E102867
630D5C3F2C917F765A4F6FB8106BA6A9D0093E27A4CB6049C2371287D94B5111
6E7020776EBD744C6C920464BBBC0AC206033E8240017F8CCB112596ECD7CAFA
89950CF43FD87ACA750C03A778A37FBCE9C82C2F5ABB135BB02DA8E8C0D24475
3BEA9D79372D0022FF1ABD378C151417DBC69FE5C9CA38D23A3900E34BF924A2
90777ACDC37930B67DD44A2E76DDBD9B89598D5F626BFD325A978D277265DA47
38CFAF16E7FF1946E15F41CA73F7B4B02E5AE8FC4C37B115BC567E4EEEFEFC34
EC8974B1465AE57759EDDA28DD38A9210871D35D331AE1BE6097C3EC21C770C9
B25D040B2ECCC3AEB1EA1BF99E0C2C0F192C13BB9152CFCF75332E03F9CEC376
9B8C285A35F53655BE38713E09AE34BA2DA9C06FA42A6FD2D00CBF2AFD2BADB9
1571629C65DA38A431710CF5B01FCA68E8B8569922FBC3F9B64A5509B6F677AF
1B97E91FFFEB6308AB68AC58F9BA43DB5E764021E75B56170EB44C2C0A7DB86C
62B8982256D3621EBE3DB3994DBF5C5A14CF34B4AF3BD5697F8E3203085DE9D5
84B0598169760B925463E93DC87CE70AF4C2DF0F4287D2F2069847BCCF7A37A2
AD451D5ACE4DBCCB2E14D5DF38B226952E7446BF87BEC736EF3D5AE793304618
D66D3299AB9F9CA1D13F134FAEDF36750046E27706C7CBD8E0877BB6276E5196
BC2A355D109C0253644918E1CC11B717DE6FBDA201E769812752888CD66268F6
4ACF4A9449378F9F9923D584BA1B51F33663BE7A306887BC14A37E3C5A4654E6
531D6EB63DE3946BD8BA95CFB037991174F36D61D842071E6625605CAA350A24
FE551025D10871FE0E2599A63900C8520EF4911C53A03897C8BEE152451708E2
43FCF4E700C583A5E8DBCC03BF9CAB864DBD19E1760945DEA0EC0BA38BEA8256
D3A8D4F70F6685A99C6BD2BA8B412A26C002D76138CFCC7DF6802931E5D97BA6
0151F6A4C572235B4196B22B7B2D14B32886DF0D2CA8A277ABAAC53B63F64CE4
E4C088192AAB674497E8AF81961359C389B51F4A257373D907C615030BFBEF53
DBD99058FD06E352450B658478C10454AC8FC0232B70D5CB916981978053E358
99D322A07294748BA427FFD1E45C909171017B52B7C742FD77A8560852D819DD
8DD53211A14D7B2FD11E42941722FD3985D627FDAF87EB57326A0D290B5077D1
8A4230BEB40523A8565F95E0D44F036A571DB698EDD9D94FEC9512369E5E5E73
A3CA5C142617944F4F99C0697ED088ACAC007FCE06E5A6EDE7D0E03A3399DCE5
362271BC31533866BA79FD1FB3F608B22CCD4111FFB1BA35D920A23AD157C6B3
C3DAE11069D5E46DEDA7158C6478D8B8C0D9DC237CDF0CC6633911673C43FB79
E4F9B7F27495201E5ADE66255BC2CBE9D9F237DECB62A19D62CB41A1C92432D2
07F0629E913A71B3F1AAF8B8C5AC66D3C8605A48F8913E39C859E163DB1DBC8F
0ACFEE80A40B6172032E95A76B752B873FB4DF23CF3A655AF1A1B88C8DC156C6
190DE72973950565454C0A188A33395FD3D529A88F2B578356DE8EBBC12F04C4
5B899F667D9E6F3A4EC6DD8DE71FD4C2E2B6D56823EE4E0526679D71FF1B868D
F261489F06F97B010CCBE640E2F57BA3DC3332B329F7958394BA9777D833AB50
005E8E9232547104065ACE33396772B0E0BD66D2C6CC54DEDD071E444D8C95F8
6F88B31E20FDB80F77C83151B7E25BD3736B4F9BDC52EE78C41E9475E5A6D94C
D348AB42F5E36B4F167D29EBDFBD43B03F77EB296B06A36880FF17D412E77EA9
F2E7C25FD05E16BEC6732681EA21AC3FF6893B93FC09316A370CDDB86D9E6087
F6042C3F9ECD742778389170F5F041329782FB9F9702F7533E51F355F71825AE
2BF4F8FE50D413AC9A20C41B42537FDBE8DDC5A5C793D3760C1EE13716068752
F0AF10812250BEDFB4D7133FD58F4587BACD572505C84A7D3802D27443175FE0
0D89C3398B55176D8642AFBAB5CBCDFD6220C8488564B4306D74A58CD2921AAD
73CF803C754DAC2F30A5324886E273064FA51781D5BC596BFEDDCE3982EA1AA2
62CA7BAA1B16C6EBB99B2AAC4E6C9CEFB3D10F19987045C4918DB239E6E63D79
5F44B9D097118D081153AFF96E5EB39CBFBB99A3BE30909F614869031358EB98
F07A97EA78AE50375941B2474DB46AF3305F2B208D45921F93743A6CB8AC584F
6BEBE25ECAADD5A789EF60C9F54446687E7B030DA3E5243189F02BA46BFD28B7
DC14822E136AC7E40CE20458DDBF356488045C95907363864CD6943643BF0109
EE027A3091C11EA392EA91320EBFEA3B857370AD8EB86D73F035A476F7058222
E8CDE78CA1AA9EA69A8AA6EBFF3E67324C567B914134DE042D6F8F18A9373107
536E8D90189917D343F5299024239E2EC1D2D177D8211BA44AC3CE67694563D2
841B62F8110E87700E6D1522A79EDECDA6C59DC3004C4C3CB2DFA31AF1544E5A
4FFE7802F51C8402B2991BBC188AB976B4E85B124B81A226930F5F80E1D34658
2C2E711A080DBC1EC1D661782A37A121F9F469BE383F47BB8E249300A4E2A660
56BB18F8C35B4B830993FB73790CF101C3BB9BFDF16CE498196B69EB18BA4DD2
95682F6E109B03CAADF1C109B7FBAA43E379817760012E13BC8E613700FA17B9
7CF678908EB36F200F6BAA8972A24C05CF85A5FB787A31747A2CF7EEB6FC19DE
FFCBD75C8065A8991E38C10077F1BAFD0ACD3C2EC4478692CB7AC11368F3C6C4
D18E16D16280D0F6C15FEB41187C73A78D4B07363926DBDF264DD03A9C212ED3
BB22F81033A0EE59A1576583C724501F278C50A484EDF227187BD09E9DBD30E9
5B506B87FDAD66F5E28FB2FB173BEF8827E743117AFFAE7DB3FEFCEE8070783D
83B836C15C644E7CEC1A22B409174EB5A1205FE3C4D85AA6935551A0D6E6CC03
91ADB92C98290DB05EC4995FFEF4D2CE4A4029730F4442DFE42F76E1D6675E2F
0DBD7CF78A014CA9366B3672E0226869496C7C90355D7F9548BAC2CDD62EA42D
4EAF8EF9862452EAB399DDDEABBEDA01189608264DABE7FC5A1009BC659998B3
A4C7B5CF98174FDBD98494C37EE2040E922185A1F8267742AEC2C6F6A9C36451
665B680DDDBD590007D348FCBDFC19906038D6215D8D87337A0EF96A00610C53
2C4B02F213EB831897EE14623CAE18BC17D2918983986EB56A641FCEA52B95A8
E2CFD77323BDD37030845162058C4D1803371CAAE7B59C833F3D24F029F29533
53EFB67FE1A1DA6F20C075F05EC822BBE3D97ABC509916FFACA3D3420567A88E
4AA5756F083B15D8545C9D51DE01DDA2331DCDED8133420698E7918C8C1583B8
5EA4FBE667019581B41F17DEB924AB243733249073E3FA3D83E9C3A216C44F16
3BDED6D56C3B6FE3C16131FF2A0F0C36936CDE252D99D3D48F709B7A59B01BFB
C50B91651B7DA7D31741107CEAE4625EBD6565D8E6D5C557D4732CB5DAA4B7E4
0A25F2D75D9A83AB39E28D8B09FF68A4568A12A3B654E890285BAA4655F4F302
43636C332F6B5DE459FED712DD02E1A690D859F1AFE5BDA9936166601E97BD5A
798AE05E7CF97262ABC5B9A5F9D5C0D57B46067907FCBD0BB9E75A0FE866CC25
7F096C68FDCDEFD5D0051D4C1790A1CAB741FFD2873D7B0C87F1ED122B35DA24
C59BEBC691850892B2128A8A2EEFCB01B35A95D0E9C39C6CCA880A4903D92C9B
2EBC46FA2A4BCAB9A1E553CE1387E96CD392E4CCAC8326D988C5CA5A3AF28344
463C6B0AFCFF2D44BE80E9388232E204CB166E01C3CE1AD9D602F65236BADABF
E1B7DCFBA0825DABBC48E890EFEA79DDC4D274A1575E646A65289FE28186AFEE
7FF69E5ACB184537584FB8C46F9B3186EC9511B3249756D0A44F57B6C157640E
5A70D39C52C48FDB7CCCFB4AAF7CE4F5012A7F461EE71AAC84EA08D9A45F3753
0E3F4EBDF74BED12B2F089AF3EA067F20BDFB8611F4AB30CC9D856E08174D745
14A86005E19A9C332D8D6AB19E69BF51BA0138DE1B617FA0E0613C3DC7107C0D
86688A54B84D4D9315709C0FA7F421912BEBD943D2755A6369A84644B78A414A
E91661D0A83468B75F379FB2CEA2DEDFD6334510389AA383F397571B90095021
521A2B357B3F9B73DBE2D87EBA9ED4E75D08B546E398353148AE7C132C234817
39DB19B23C0B74CF8AB11EC6790DA9A60323FEE83FD8C11368B4E6AB6709D4EA
9CB496A9A4B1B638002907A53FCC78F01A35A6ABC7572EF04892A06ED6E6EE99
EDFFE7C33BCC966A2B1E92A2DF6E3FED25F36B7B83393E9B755C083380A7DB87
83C14C4AF8E6D3558ED8909B8E4C2026E8430498E04EA15DDAC0B3BC7B14EDCA
0588B7EA070F9C8CD57506AC232712E1E25A292469C7E25A363954AC27BCB0FA
86BC65699F99E914277BFFF867FC7FB2AAD128972D6217531FFCAD80BBEA2E41
C54C50D263F6BEFD72FC6D2156993ED95F27E40D51F08D9F24D0D4BB4C7EC366
B94D4697AC9D4DFC35C1E4902BF50601C209078C2E03021C0FCC1355494F5F58
AA97790B6FBE894F58C033829D0C8AD7AEE5BCF2D51246FD27CB82819781D175
39765D07751C1C7F5B3457DA62B4040976E4766A0A4A92661053176FD614CB0D
A67D1282DA6C0E9A67B4BBA8C7523CA149E75C9FAEBA72E2F4087A8863FE1900
937FA109DB52455CBCA463F3F2DC46DD4CC414FB43AC7638A06B8E210A16170F
0500460BBCBB2359D4B8B70D006BBCB78ED465C9980AAF7F419C4CC985B551ED
4500E602A01672E164E8837E5D91291876E5B4BBE326973693CD68D33A2AAEBD
1C98B063CF89BE47F3076288092363F258020A22505199F0EA3D44B36990DCB1
F183ABDB0854FD9231D24D0CA1992231B482DFC7FD3D8207EA865E03B57DD2B2
93DBEA3973A96FA63F0A8289271E46E787C043BA721003B21211C7AF6B18AD25
EAC672AE6D3D4D68542E3FBB5F57DA370450BE91E8415847CC1E8A41DFADE7F3
2BE3A3680AD586D094F77B32F04066330BC00FF2FB0FFC652B0E987800964439
C6D9443AEA2EC919F912ED575423D1D9B1F54BEA11EB7FC6146C96E982428FE4
92304CF41B24C638BC3485A1A71AFA7FF03576BD65FCE39BD8243B0B120D51B3
F4B327E9F338D29B7DD01BE57DCA12B4AE25CB24D0E8AFD3B443EBD2FCF6F859
5DBDDE31DAE2D44381A55C76C094E33633078A4A81D136E44306ABD62ACC46F0
5EC22D928CBCE613CD462A08AAA662DA03F4E9C6BA1DF31852073361630F635A
E581FC54410D0E30F53D38D62E717A6A22231C29EAB47A43D085C816DD875100
BCD54AAD08E7F9D741E310C80EB325525C3A3BAA48E4B513D1CF0CBCCFBFD947
D5B328761600EE672DD10EE2CF3B026839D3EE1DD781888AFB773B05604B88FB
4D66F7CF2AA4A7CD9B42AD5C2B0B1A7C67C3FEA49283807772D620400E47EE11
1CB26E7854170033E2C5A0EF1A3AA664B9D4947D3296F5E2C3952EA388C830AB
7A9777F2FAED58B3CE605A8161ABAD1DA8C054216BABECE5ECDEDD706F646DC1
6715B534CB9FF51E614AEF744EE23F9E89D4C08CD0D8CA2ED60CA51B661775DF
A7863E005256665B35AAEDC7E94AD114046E60E465ADDADD113F2A767BC978E3
65B61DAA02ACB3D18E5F92FBC13B83CE816966314C03D3A450E6C73976C5513A
00472AFFC4A88DC9DB242619CEB6528E3E5377C82C08CED9E3F0C5439497A340
538C0E4B2343CA14D387DAB775ADCA9A41FCC8A85659D709457F31D47E2C4D52
EA20D86B6C52A58920739CEC2A9FA5446CA4122B29D5045F7BBE4591CCC95CC3
25389090769FA1D14147423D469C8CBE6019D3FBA9219E804D7CB7B9AC4A44BF
41F61F3FBD8701BF299D21AE3E0DF2517C0D68E7DF31B6E52C1A9BDBBCE4CE85
6CBA9955D60A8689DAE259CA141F75AE8BA7AC58676EB6B8B4A33DAE3E7B6AEC
1D6773A8C7CD4377C428D01F9DAAEC6CFCFA1A55F5761131ECF6F760E7E944D9
3523B21259722B12C8E070FEEAEFD1F5F678798B5FA9BD17DD43FF4D3B4E1CBE
A6AEE96CB0AA429286FFD7C63DF80B5D5C368DF0D62AC2F878B209B3AEF4BC45
24F11755BC7B93CD396D52C20EC88EBF9E1B309702A0AD22D295BF5DFB43782B
DA2C3C8F01133C377F456C5017AA282F70BE1C4020FE93A1F37A66BA6A8D371E
9C9BF5A2E1F05D842E5B3DA43DFEF6F3167C5B4F49A3C29536F64AFCB77F6B24
62A0ADE9E6F20A6A4B8D691D2B8D6E946BFA542AADF7D5ACDF43118ABDEC7611
526B432006F9ADCE6802087F2FDDF1D3292D75DF5707127729A615A5C9A8F452
6F72CC32B98D522421B967ABAB0B8BD391C8C4EDE6D6B267945445C012E4A2EE
8820018CB67560017AC5B8080E532F3F4CB9E85158C8B784072604F5F5456D19
85D013632C38EA95B240E035718A2C2206EF9DC512226D2B31F7A6B1D03F0B95
4FF484E833A798D88BD149A47A3221FBC740A2EC64B6302FE0BF3B6F9ECFF273
9DDF2851571C8C18B490A4A6D72ABB84E36F0585C82155710F5D56B4DBBD7B1F
084DAE95D9086021DB39BFC9F871637C75709667D16D42DF0B946863B1069987
8F53CC8F427C3561639C4E6A403562F311A4E4A909FD3E55EE44327E5702ADE4
A5EC128F506DC51965F189EB23B291437C6D310A1F745DB7037C3608ACEBBB23
67DE24BBAF62153A8C3A1034EDEFAB0D23C651B1B67314E5A2748FF0C0BA746A
2A95E5BCF12EE4EBCF8F5D6193E61298A70ED7A56EBB1123DF368DC6425A4235
9DC17BF104F7BABB340DCD00CFDD67F06BDDE453ACE026D47F591B91CE4200E6
F6F375D85B17D9D6588B0F7973A794F27B2D3D33C9963FC9FD7576DD7C11B66D
2C634BDEC4FDE9D9C93085A68ABEA00FAB3C920A475DD64E70122F16DB3464C3
00FEA94B732CAF220BA65425B9436BBDA74314A1F62C2F82BF870060E1BF8A0D
7717374F7DE6794CB1E4859CF38F6644F74EE96B0140F8BCAB0F3624AED20C57
9B4D8989A4E8DB1914FB6C259F763911EA95F519FAB99A578AA45A71F49C849D
F88A693F824E8037915029140D16316B36DFDFDD634A8DD630D03C92FD4A6AB7
D0BDA937471B6D490152521E5CED3849C5490189BA8A0156BB12AAD284394119
68A7353D1465D150095D4857924348D78D1B08A1CDDF5E73158BFF931E8A277B
9CDC92359323D09CB54EB3C3246D9D1804C3D78DD8616E1901D55649BB228C91
669943C43CB073D9B20F119A0BCEBB9E7D1D591B8E7F59EC31AACC7F54D0B1F4
4284703832C39EE3C7FA369BF70D0C6A9F2194567D6EC62DD624B155A35EBFAC
30AB95A79355FB1BC17B5886944B185A6CCEBA7E353D51BEA0E51F4CDA8600AE
66BE77A593CD3BEC8BAD3E6AE20AB6993687D8467CC35C44E8DD48AE4FC82971
CA16D56F0CC90F8E5546C669CC6C762D34C1DBD735F613BA9C0052B73719BEBB
B5FFB224C9EC686E822CEA7F9C43B357EB179FDD6CDE362C385852857FD9E6A6
1BCD9D81B3C53C5B458E11DFC806BDC315E1F86F40F7ACADE18E16B684A21689
6AE2CFBA054B8D3D7574247BF8CE92D043F9EA0E265F8F8BA6A71973E52E55F8
32799CB4BEDDEC6256BE3E3D4677889220A65C3DD97B97D3D45B5428D96412FD
82FDD98055FE51554EBE08EE2A24F3C78B5760CC7485FA96EC4ACA51B2EEC5C1
E5DEA600FF909D39300EBE5FFB17D3092A93F4842815F72A879F48094B224E26
874B21F540821285BCB95C83AFCF59E5F2ACD9616EE281EF903770C90E96E23A
249FA437F5058A648D474B32017686B778905223202A9FECC2CEFA71858DE6C0
92136A5C7D089265588927632BD56390EDC7D886615830DD5408648DB2297BA1
E6E053287472EA176373E3E9F9C79443CC2E0E69DFCC2C5DAEAD8452ECF45C60
6FCD6A07E83E29D471EA577724CEBC46F021647D66BE637253D32E84BFAB4226
2224EAE689518DA13889FDF8B793B32A99040307CDE31EFC1ECC1B80122A7132
C9C59E92E7C96289E469357931F3C2300CCF5CF2DD46236751F139271ADD26B4
5B233E9E8AAFADA1CF1BD6A391F715649199C2C2BAED21348A755249FE2F96CC
606508BC98D929115F7C369D534E6E4BDCFF89BC3B192042060BB6C4576C4B52
4D461594796AB2D679C00A9FBEA268281E5EDAB9CAFCC6D618DCDB743E6F5256
7B2B7F16579F177A75AC46332622FC76BC05F68FAB6B4C007E9EAFAFCD3C823E
A8E6360FC5ECF44CCF0D9EA4D26426185DC7DB1695295A9A77E5EBFE46CB9534
480C769E988143FB7270ECD2ED5DFEE82B565DB99A363CE78EDDB283F894F87D
AEC85647A42FC919777447942AEC2D5724AB705EDBEAE3E68882221B1FDF686E
03DCAE5F54DE8051B0CC88122A6875497C3B380B0E92D281E9038525F366EBCE
29E521C9121D86B01E144354F4356F1E97790A1AF34048CA4B17A07CC1446CAD
9D1C59EA78B6E2D86BE0AFC435F707360D86A6335F4E0CC5D56BF7D7711DE0FE
276334124A793601B734056C3B26AA119F9D8B4F46EF628172E6FA1AADB02BB0
46C9DB4C512147D6237D379062DB60937AD2DF33B76C00CEF198CEB491BAD552
34B2138512B07406EFC995BF59C8EB95D0E29D0438747F4A09E17177535E47AB
173E89B321B00E85AD43AC5F81BB44FB50B098198B2EBE1AB6ECA03309E9CDBF
9BA301A7ABFCB2B849E97A332FBE896E29A65B0EC34465E1548872D6D9587118
0B3C6B7F544C5F534A9880F578AC979233A6C350C3CFC18391A67D589FCB9838
C466D5AE5B60A5844508367A9BDA9934E3F89FCA2ED87E33787254DECEE3D350
6FDB94129DEEE0AA9090CF60972C990666A46171AC5A8BB31DE720D93256E264
79C7A5B6E982521C0226CBFE82CD68EED290DC29A444C213FFE84441C169602B
28F862F5D1379BD617B4A6C7920FC198ED5978A9E2124089BD545065F4123D89
17FDFD210D6311CC07BADC4852F517F4A08554BC8FF3A941D321274A61FB54D8
ADD44855A438604F2BBDE0DFD2D0C7D31C086BB62E54E02820FAE8ED44F5FF27
E3CDCE25DC475C232439B7C00FDC0ABF830D98AD95D5B26E586723BC5308CB55
CC154B0D8DB14A02885DC6261075549AF362149D768969494F93679160BA21BE
FF89E0BB168A28C06F5F8E8C215708A8BFCD861AA5F8080B53CDC56326281880
6982C3F94DAB729532E22F74CEBCE9383E2189118E6F2D0225987C96009F5AE6
E8F9504CD7DBF5910D81CDBCC7964F82E05096119D68843CF7BC7C61A0596379
6E986FB1309F13B42DE8040880F0FD36E18104859F87C21E4C0981AC9FE3015D
0E2CFEEA4568221FE2F4CD6044246E408C5AC5ADBED08F19D78BD418F4BB31DC
093B1A13A5BE6260085D65267E42A2A2613D0C557384841DCD61D731B6A2F08A
36C0F2D4EA4D72C2EB9A569E584D8EAC0CF2C0F991BA372DECC5655AB524A9FF
3848FE0BB8D8CE6884F37E292400D07FBC60C23582BE1220BABF096E2404869A
8ECFF678F80D3BE33A692E7E774EED2FC365649497C569F90B5EFC40281F0338
52B62EC16F6EC04322C6BF6FB2E69F36C8CB1F5AD32A77442438788053A407C8
95FCF7531D31DF14D63D00332B858D2D40789EB10511396927B7A2A920C556D8
05ECD3775EEDF59845CE2E3F2D7518FB24573D421440AAD0DD73DD5E5AF108A7
13F951B58B0DDAC82269BFE16B28A9ECB985EDCA8C75E67C7ED2BEC574E36A70
997E5DFCE7C7D2D27E5DA046A5BB1B3756B8F8FE51FCD0312E3F87FFD7A8A50A
E27B99628EFB5D6C5284120E33BB70F72F26A90A55340DF77B49FD9776207E0F
53041D4EF7AD2C7E020675110CF5243342E31DF7A57D627BCBCEFE142FDDD360
76F8B0DDD0301537F4E6C4B45B9857F6BCBDE12E72A6955C4642BDA8084AD38A
D1A55EE93EAB6D138B7E42247EBF1E997A128E9A4BBF072370A8C3599C2D0F5A
5DBDD00A0649F93D0DECD5B2F1D6EDD61446CD47FE4A0AA39907AC096DC2DA0B
FDDD3FF6F076E5360D29A28EF1E18D8515147836B0D3FA826F5D8CC6553E910B
C8008D4B97E24EBEDE1B2FC0EC93826355725FEBB79204A9B4888C5EED49E2F7
BD7CC6E70FB342DCEC5A1E8CAC11A84DFE3F6C86998BF3FAE7CFD22FC9200092
4C4E89E4DA8DDC29C01844DAD1F1FB958327B21D770252601E0D7D03BE7A3276
D8D80EA08B0054580B24252AE8E1192B785CFC6BECD816D2C03BB12672C357AD
75908FADEFC5F51310ADBFE7298FCC187932E405A393E15D6419683BCBD7B2E0
3FC11606AE005B9B65D2E840112D72109C85C6CDB653A6B625ECD7E4A5B109C0
1BD583F96658DE942901355C580254A59DA5C891D974CB584C721F1E68245BD0
52EB2091948B787384613C2D7E9D729EE5EA01EA219D7BB359287A998F74069C
73ABD0BF56625DA5791D99AC84D7993C6B7BAFE3D7B66EBBCF413FE5AE3DCC2B
FA5994A61941370E7E5B2B95AB08372D561A62899470AE9DD807D2ACA57AB522
F05F3575684FD2CCEF84B1822DA947BE3675DEB0D1DD21B781003B3C666EDE9D
E2758268B4377FB93925FF05FA277498321BFF7DA564A125F9E84EFC98F59FCC
5DE05808CA05E45B42D338449EE28635D57CEAEFCB05F3ABB54C01141818D6B9
291F17453BB5B10CA5C26A01F08F847177F433570F431F224676B53973D0EFB9
B668C77D84A7F1D1B322851D11CB0DD32EE741ECE7F5F32AA4721D4FF98182FF
9E0320A08777A117C17501BEA9134EA7C238DCFCD3AD96649E5E82B7728E21B5
A8ECEE47FEF3601D3A70B6B793CE26AD7E9771F00D4BEE024B8F11398966D17D
53F455F70FE833854A2A9AB85F05F2D56073EB651A475881917E36B994B6D1C6
B1D669AF238C91718F26D4C5780AC253A1629481021BF3010BB08649E5F0EA66
A6B8AA0A6FB6C493F3ABACA10A3B93D72FC94D1EC83EDF38795891B91F15E4CE
10A94311CEA2C09F962C7306489BD0D36149C9142BB1A300ACECBEC2CF79D9A7
8D0CD8F76CFAA4D3E1E1883D5C6926562A0C1EE2F6896603072ADB652D7F9EB1
198CF8137B7589DA02CE58799FE9A7CA94480C9DAA244225398A73F230EDD89A
133D1627E6DD19AE5384959E77CCA2E6D377D0BA13640400F9802B8929E4E57B
2DABD4BCC6313F9FE77D6F6F0D2764A5310E8749CAAF498A6C54626F32B7A4D8
776ECC0F185B68994F882A46DF032A38E09C7AA08B0D7E94A5D75C5C83B90722
F24E456A0E2F3CA21869CCBA0858EFA3983B600B2C30CB42A3A651BC0204AB83
D6B5F87B3E0C5573D691A385CD98895177617C0B121C17D9090BA739125B4945
7E42F9BE80D3F36BD2CB0EE0738B94ED5DBD6B6D75BE6073898E8629940942DE
1271A628146AE9178658A04B7224E3B34DF29BC0AA58B5BEFE5BE698C60369D0
18D43886162CE10AC8CB6924C1A7E36485B997CA59BF23FB1A2B61A8425C7BBF
E129EAB8F20D870FC1B36E853150D0628ED65496EE45D1F3A66E66B2F3127C7A
3AD182386993CDE99EC790C87BAC796199D9D98C148A219307C670A0EC3CA3D8
828124DD6F496D893336152422D210B7AD2D44483111C76BEC541F6A3CDEE35C
8F2484C8A7C692C09A313EFE2E18E70E49AD6228EBB2E09B203C560756F87B17
F70E1C5C8157384186A03ACA575F2FDDE4214A99AB8E03EFB8F0BE907C298538
1DF6BFE706580477C50098EED71F38EF8FD3B77DE6C6D11565847D02C4F924A3
43811EC07BDB081982DEC02494802CFE36C17030AFF437BFD6EB5E60E6744890
281A68C7B6459D78E6A8F5FEA1AB2F7E0E23F10AAC82D81759297D0AD1FA155D
4494D23A87D6C9C86522EA7ADA96426B5C85891CFB35156DBC1D6B5A6083C69B
7D8EB1109FF0335072EA79F91ECC5CDE0BA26AA32C279A6431AF5A1745938F94
C3932E0A4E7F5AD2D96A08D0EA33F5879C03A988A54AA65578067B52C2ED2A79
B1196A6360991F18BEB933EF2B6968ACC11279EE1EBDFC81309FF557F9C14E84
71CD92A0394C0A2C06EB00CEFC4908883BACDEFF73B33A031E4BE1C7694EEE0B
EA98C5EA79B17CAA844B27BB1BDCDFEFDFF04817961ABB4B0C8C9C1C1ADD745B
02A7C2ADF6BE5B401DE904A6CE9D661286E9F0639A1E1B9704B4B736DC4F92F5
02AABDF70C2877B728167A9191BA0E92E2B02861290B12BC39561AE4534AA901
ABC9529B5B65895478A4AEF60898B3C41CF34060D219321B9C3F5A23761EE48A
917F5C19E5C10EB745F5350CA67093E2FA525FB2379AF02D0B084BA000EAE02B
75C61F0E12EE84EC813690047DA8D74468BB2CCFAC7A93CB76C09A0B4B19A054
AAFCC4C0E3D7DCACD173385390972AA4525DBCDAF83F66651F86DE35B93A6A4F
6DAD7509F1630826C8F65A21B29028F99A378FE10D4E7D2255945B0BED7577D5
C27BE32081AE0E7853C326E44B7FF77DEDCBB53CDB2C2A2DDB83AFF6BFD7FDF0
AC2F86B7060449B00023867BFAD782600455C7AED2EA03CD8FFE6362C4CF2826
7A3CE3E7B9C200EC670082BD510B7C7ED6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR9
%!PS-AdobeFont-1.0: CMR9 003.002
%%Title: CMR9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR9 known{/CMR9 findfont dup/UniqueID known{dup
/UniqueID get 5000792 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR9 def
/FontBBox {-39 -250 1036 750 }readonly def
/UniqueID 5000792 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR9.) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 16 /dotlessi put
dup 19 /acute put
dup 33 /exclam put
dup 34 /quotedblright put
dup 35 /numbersign put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
dup 126 /tilde put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9AF72336CC4AD340
15A449513D5F74BFB9A68ABC471020464E3E6E33008238B123DEDE18557D712E
ED5223722892A4DAC477120B8C9F3FE3FD334EACD3E8AABDC3C967C61FF003B4
B10C56D6A490CE9594D57A2D431B9E5E10FE3D8832E227A7087611431ABCD029
85F4865E17E17F8CFBD2CADC97E0A8820E3ACEC873F31464466A9545E967E53C
DBDDB8478E69063FBB891566BAF88B7660A4405B16834761F041CCF7650AF955
F9E853AA9F5F4382E1FE7D0C5BB4023818A2383F91249D48CE021250EC9EEB1D
2835E18FB73026250B32A8849067D5E2258797C917F998F2D4121D96560C5FB5
B5D3471216639A8671B6DFAC5E3554EC36D9A72518525A795590C74DD70DA3A7
78BFC43E51D6F2BA52F17D4DD00D389D3983EC54912AFF73684A8A7E345537B7
E62361C04A47859DA084BC72EA53512DC54132EB2EE671793603015652EAFDE3
41C4B6B679BD60AEC5153EA0D2200CB1D097DAD770F5F31E6FC475A225995277
B867B731D5401E2D02B85BA85158C80FF7E2BBCC42B98AC867E67D25DB656072
55A0D32AB7AA483A5A9686CEA4E2B3031D90D84DB3E2DEE7706C91BA81CB8DAA
700E5F61E07D6998C9552C81B66FD10A10033D49EF3BCB0FF22ED0A3737523C9
8F851C61C4BF8A213BF6EC70C956AE48B5BD276CC0437C72BF6515B10739919A
F00F6ADD2798CB211668842349171A5AEB0664D2C44397E55A4A9EBDF54A3EF4
FBBCDAD9DAEF4B0CAEF7112FA828F2F8D9F633D37E5516AB5ECEA87342EF8DC4
3A50548490F5BC9A8A1F98AC7AEAD9D913BFA10CA86D73AEB5BACC1FEEFDCC15
B3655522CCA2C772E902FAB2A6FC153597D52763EB44AB7489FF061F7F58E8F2
AEAAF4D17F36CBFC00D3C653F335D14240C87DB4339DA9D30A5BD1F502BC9013
461B9DB2FBEEC01BB18990439A0E9CA6576BC9CF6B1A3DB9386C4A5D4AA6A5DC
CFA45FB75F22E10ECB72565DB441A194902C91427B4F676E531C661F7A2C3C85
CD534D1C89B6779B2EDC8E44667B992C20C70B663BFBF680A6CF4383EB7CA26C
4D1F06B5EF4025BBE65795F1EDB5CCB97050872D6C07BC2974F905ACDB7A765F
291365D6C8152153E7F017A25FB4476C60FD9EAF9A121633DBEAC32F62850223
D6418566AB350F90F4B35F19598478F76B63E347D4C61E203D4DB8ECB9889181
C387F4B663A502C638761D2782BB96EAC81A0108D7BD6938F67FEBB69218D115
D8E89CFABCE15C6ACC7FEB983332A51A6A73CF4E341574F366713D7FB29956D9
9BF238A87483D37E526A2EA2F101EDD34E34CB92730DCA7235AA0027189BE405
2DAB4AA021A30C28B26C50808E1E965C02F6212EC7C72F5683339425A7739380
A422E6191ED8453AF0CAAA424AE44DFA7CC5C2F6EAA8D73A5101D8E9517DBCFB
2858D0E8ECB7DC430EF23A9E4428CB7DED8D035D6050251AC101A2D0E884721E
2F21E573F948048BB8FF888911C508CC198BD750083B339500C426AFCD5634A6
AAAC1C7E91249667B231BBFC64B4317192FE07FE9DA0DDB5E517D097AAE46577
9555F29D45C67CDE9812CAD03F220B20519F2FF32DCA56A554D4296FE2D1F3FB
B209B5270E0E695EA5A0EF1144957CE045881AEB8D05D72CE57F4D34617AED67
0D3AF0472CD8D60933651626550366E300E72A9C89ACD475C2E2ED9BD44B472D
9DAFE943F8E02A6DC38E447EED964624C37C3130E48211CA279BB6A0BD59466B
42F3D89B5746F29E084E22CF58395AF0F29E55113F3A3F2F52CB3A6DF3D026D0
C81754B8E2E4A15F6943BE9D0087D5166060734FD07C4C57D7C7D90E8C9C1F35
623CEEE3ABAE75E1A18A1E3B50B7266BD2D8E812CFEB4A46B856885B185640D6
B9C22179551002B94282F57FB433B7FF157D2F0D240836B72AF4A331668AE5D4
E6B85415F4E8B9D2F9AF90FAFAA0A3866DF417CA5A31348CF9B41B8F5F4D2F97
CCF7ADE851B5E2E2F6E319AAF5792EBB9DA2C6AA8B73D889F3CDAA42932CDA7D
07A7E59183CD89520DDFC36E5D513BFD8AD0886046585F29B4D7F42CC0C27AA7
53915AB1167D292FE91957E94A57FEE2D49C20C9070ECD736BDEE0F046E60350
EA539DC298156A4E0D019E7D481FDDA6861E20678516AB80ABEC1F09B126BCB9
52E8272A06BB6DD87ACFC423B4A4FC9A3DC8DCAEBB807C5F748F1FF8B17B8B88
F426206BF1B7B7D239D26BC3CF0776C467A98CFBBCA5FB6145D5900137ED19DC
D002F10704AA680EC753C22E29AAB15712EF22AF73D80820A1EEE953463D4EA3
81FAF99518D4FD0F862A324FC44C4B9542A92C5B60CC983CC8F647CE5BDB4D6D
B92B380E0E5F7208A9CD91FA9A469548162C761C1BA05AC9D60B766764D821B6
B4E17F56CE455F06EA1EE2D38FE47581746C4C5FBA63AEE2B58E877D1A8FA83A
31C972D53B64E92EEEA147426A92CFBF76FC614119C6E9C6476FD6A069C803BF
E949FBE50B5AB1F1463F9747E8D353F7BBD991C4F90F920BC9407D8E24720293
846D052214E60390C3CB926D38C83AF697425D80C2B4FC4706615B905516B733
46ACA325CEA68FB21B2D17CF0B68BA4DF249368625CF83441EDBF2B86C957C1E
44CD722BD2537CE84FBA07EC7AE15C840041B9F7F3040072E6084CD55B301C08
A64A53BD4D3DC30DCAC6C152F316ABC59B8EE978793EBD568849DCC2A75A495A
BC83470D503F8E389F54B4A4A31624E83C601B43AC1E52CB811FAA7CA6B644A5
1AE0BFD4FC774C9C9DFC2769ABFA9C83F900BE2DD4010416053A1D4874E6ECF4
D86E44B4CAB15D53E5630C144B0C15B58DAAD785BA298B1893D1B09BA5D40344
6678FD2D17FF6674433C976D6DAC659175CED26139967C9B2B9CFFD78FC2570A
E5142141C2888DBF2DC8503F9137CE7CB21A1EBC2D65BF33FCEFBC85C9CB736E
24E8595CE934AB032CC70BD6A3B0F3BDBFBBE185512FDB7BE3D4A6620478453E
75D044BF770B44C9741E31985E6DAF5A318D7BED12B02A4BCFE60D25EF12843D
EFC9BAE2A3F2EFAD66D7858E83EB46BB09D2FF8AE9C43844A7001C86ED97AF51
C511E3A89A1BE349FF5215D1A57843EF51456B9838133846F19BE79AAA5C1AB0
5F400E5E8E7B0BF96EFCA3B8F0894BE589F2C9FB6C97BD16D38F0A237CD4F034
099C41F85C7E2C7BEC8E02C4F327306A53B4B48B26A8926670CEEF96F6DF2281
7C2DAD99EF8B81BBB777227C2475AE7400DC393D9C0445E925DB1E955950F7AE
53E9AC4306794239346A419F7B5DF4168382EF5956B81F83BD4BB7635B3BCC84
7D84D05AEDC02D14675D777CD19B08124001A4F4EA96990D96000C082A12F00F
7FEF793A7FA69D56D3A38D012168C5458B667190AFE80E02C816CAFF0A71953C
D80B085CD286027E2FDBB05452AA762FD7C813B2E19A79C74190E04E746C4933
CE1E300CAF5DD53B08110509BDA404EF07FA1BC5224BF1205DE8E0C3276A13DD
866675103B960C5F36644F96B4FAC16F5D6E91F74629B318FCCC8E8CB13EB76B
B0B7B90718D913A52A04732EA3667674994A325A7973C601A7DDD50F658E0826
ACB8E53D4914B0274AED98D7BC3B2B7F9D48A7ECC2F8ABEE05CF2C4F2B90360B
B7DF779EAF3E103D1D83EDBE32DDA873768D8C37DC10A5354A94B4153049AD64
FF3E0BB51AB91D7C0B4134D8731CD0270DAAF19BED9EAD800A14B65B68EEE89B
40DD624111670DDC7C030DEFE0D1B96420E249332445C155BA96231C88E70643
D526BDF3CA1E05FEE72CE2B881CFC01ED780C10E89F0828AD55FE29043BC56E8
2750A6DD15AADD54492F6092618F4CC6A31766B17FC60766D18C307EFC9BB787
39047DAD6B38419EFBA46B4E2C932F97451FE78AD75FA90DE409FC6DD46585D2
1941F5ED47A8FBAEF5A917A240959E8D9F9917DEA3247D9CAE6BF7A88DB4C4A4
F9F5A6DCE542420A032FF3392FE0F3357B51F884D6181583A554F75B1DF192E9
253CC828FF06B0D992D5316435980B044BB191508C7C45CD90F797F88856424B
14A5707459C50EDCF3E3D8D1667AAA83015405354CE744C66D9A5728F29E0085
6DBF740717FA0799E3BCC4ED7841588B496A5E549B953A7FD288B4A045DB611E
E3B2F35963FF18ACCB1C968BEEA2CBF52B3999AAF89A05320BB2E97F52CFE06B
9F10E3A79865A3059A957F97972D80ADF678A36E2B586C101FC6AFA4D137C13E
EE7102C9B8EF78CB057F8B7476F146E8FF5C897FD5503DD198128CFF7B5FB339
FAD0AF0EA967F77B07B367A4AC9F668F8BED99B98E87FAC750EE045602D76C3F
289FC9D97694C96AAC0AD1BD3FA94DF2CBCEA24B40F47B9B59E54EECEE7AC4C3
A3F5D19160E4C1EA830D57FBE10D8D46AC5CA0260F22FAA45236F0F542BEA9C5
5A88F878F68B36114E0573900C65E305462B22A3429A17C7A567694414DDDA46
5F30542B8FD4F00F6C295B2E8D3A986B953D96822DB2ECD48E8BB1763434E652
152EF3717F5E7FA10FF0B01D9F64E22C5DBD7254629658887BACEC0ABDE972EE
67299FB84A05B3EFE22B6976DB4CCA384232DDAE38C31623A4E39EA2E82C1EA3
BBB68F1A7DBF405DEC37CB7203A895C36A44BD2D63F45B3888AF91D37B510A59
3C921BB44DA620892AD87B665F69F6FA510B071ECC403CB2BE2F54B3969C9E88
713244BC97C1466DA8216DA7600C221E7E7EF5C789D2E12B36422023A03E11BF
2790FD6062FE6BF62F5010A92F0A104B76E255A0975E04F6F20F760881BDA7F5
D834D1D328B6EC19AA7D5E5678A84C74C82553DBE8BB5765E84F5A8789032143
6020940B4B8D45FC3433D356E28C25F42D0C19F911213D85951B2B00D01B77BB
A4C72E964F9D95422BEDE582A05CD52E03D28A996E6CC8FCD910CBAB728073F9
F9FAEED5470FFA55930447C5BA816F826F983D53EC9941EC8364B3060FD74C95
26D4F5CA753B574FD2FA4D1D333785241D8741B79E628BC852FDC35478C5ED9A
C1BE88C5EE7302816E65C12B58EA16FEDD4672EB3E24B6EDAD5DCE263BA8A970
350B651E5A9F3C281D85BC3F44EADD0D93402E36489BA5185E7D388974B0B700
70575188BB610CCA20F081E2CBDA13DCC6F72567962ADB342E02C1E763B673C5
F7384E24C6E1730A3A790D690A2103AEF88E0C1D4480DC9B25E5C8C9E1919C95
F83320179B4C7C4A26D559BFB24D7D596FB73758C9990C451E77FCDDD17763B8
9C30A9534E3CB6680D3D419D4B70B0B0A0D160FCCDE169714E373F65B7144CC2
DB9A44E041211E1517D3148E65A2486CBE5E74E625261CCF65392FB4F3091473
F9E8DF327D59A58558E5C9F7190DB577D5DC658F5E36258291C708B3D224653D
064BB6079F91293FC733710893AD1C96169B30CBFE4E9D52E7EFAE4AFEE68FEF
1AFD5E7E9DFCE8DE332B0FDC0514F9B3090AC85BBFB527FD8034DD33E9576325
A8769AE09AF1BA792447DDD932B98FC9486B39E0B04DDB3EFB7A30DA0940B33E
E27490E0E841E87B1C90E5248A91742ABEDC10F43A8AF0F9C5B4A4930B1AADAF
01874B9AC3B8D0DBECCDA6CD7E96471FAA15CB7F8A599C5746327CE392224C3C
40BD60AF97BCA6FF6FCAB2FEA114D7300B89E91C3BC92D5B3E2C83BB37992D8C
72F661EFD0AA034C738C019DFB79BF40651A1A34BC1EB9F5AAF58F8B3DA32645
24AFF8636486F08BC21533B5FF7391B0679A78DFDCB03DAF6BB7475A1D51DAC1
EE4BE9B986655D1FDB6936445EF99B58B303FE79F11275EEA96A9F6808EA8775
D873D1052FAC93769789C700F20EB2ED6D15676F6E563A769CA9298E463FC311
83281483B1C953370D196727A6A0E66D32D9480AB1B6DCA77868C1A2D5DB6483
5F31EB6B18EEFEF1CDC31533E69B0AFC6B30FC9912DC89BAAEEADC30BE14F448
1A6B70D36A5D9B01799BEEA686066114910842D022EB464A9A1E8F0A5628BA69
AA9A1925CCADD44703BC67A89F3B48E4680726DC4360274185CF3C8AB747A8FC
4B928AD62B092EFE48B01E33ED756DB696171FDB775396BBA138E056F71EDAE3
7A1E4CC272B8418114B0E81DE0BC43DB3C133167344488820A92DF10FFA26FB9
65FCA2C87D302E956DE6B4FE145145440C83DB43A68F8B29A592B127BDF49063
B7F11E155CD4CAE305525BEA56B7C412A6260426407BD892A3F2B444AC3421E6
FB6E6425EB5C3053C5644666B80405530FA0012B54557327C98E0F4F064099A6
4ACAAFC1870359C1B6FBE7606BB8A26026AE20C212210449905E628AF1B20490
8CE908B7EF3E3DB551C85AEB0F7FEB6A8D215B97998E5DD9C7CCFB2A9402B8B6
1770D4023777D4B45A73F471355353412C51D4CE71FAD1E0AFBD87B5F86307F3
10D0B94F1194EFFB64AD5DA54A4200490F609CA8B912E149F8217ABB1E9EBB3B
C4470E7365CF5E1E761AA1945044B225BD53D142F6588C50E0644740F7DD55E4
8F73201E5354A8BC78339211AFC4935F44701FBA043AAC4BA4698E9D7700029A
C79F992F62627C91EB855F64C4B251718FDA71EDAF082A0C7B00550949D617A0
7071FB14F05620CCF2180941341D8E60FC88823438FD728A4042AFA8B853107F
852F631518B61B234565291B5D5B89DA818DEE3AE3B68A2869DFA63255CC882C
3B16BBA08FCE3632E57FF7A07F857A1F0FDCADAB39D77960BD827CCC8661A997
648BF5BEBC0FD2286C2A112A8DEB9CCB6330A049170D5D68EEEEA011D3EF3EBD
855236B9380087CBBB6BE24191F728B7EAC5B50F7A547AA0989B7C7D3437DBCE
1669341264E290646F2C8C5A3ACAAC7CB63DC692FAAE13E9B40E8BD39FE16A0C
1660CE66872D061056C04DDDC265C024BEF8B7E3C3AEE76FE5C9702002C28BE0
B180295EE00E567FA2E5CD1638226D24A7C732E1BD8103B476EF5702768689C7
D4FCD47F2AB94A2B1FBAE6ABF87B09E7713C773FB65CA83F7318035B332B9F99
24A2C8897527021321D003AAD7C273E4BFA2710B9BB26C2CFD3D9A5D7ED1096C
552D50028AE2476FCD6D12A5D0A897521313ED1A3A8456A70C16EAA50A3E6733
6DC89FEC56AB54A579EF264377A103939D5EE00A90B4F2206D0023AF9491FBE0
800C6540FC945199E20E945F46CEEA2E885F6800B9DF042BCEF4291A4B1A62C8
6A7ACFF872B25FA3AE69E0093F3D0FF13A3313430C06F1AF94D500431566F659
E8C859A5F80F5BD2E85C8E32603D3745628E8FE6FBC50FA68F9C3811A2BEFEA4
5852CAE2AE5AAD3230ED050593BAD0A9581EB7B327C6916B8FC348F4C23E6FA2
00FA28AAACCB3091C1D83F7BB88672A53A2EA3B8C7C24374E400C57F0F01019F
E52D5C47F389D4C9AF126F4080F9AB8D1C8F470932BBECCEC72A9796F6E965A4
82057DDB43D68298A00880D4C2E2496F26F015FD83C5549215753459310339B7
6B2961EEEE74DA31FEC8E2BDDA42D4080A32372AC372524BDDA580EF6634ACE3
128C69D04D890DCA337212B109585C665AA83EFE47D5BABC2627A86EAD11BF7D
744176652C7F9497785A7A06A994ED8414BBE8B26E74D48CB83FA24AAFBDD507
84A90195EA3D77BCE8C2BEDDD1DC52E8164DF15D65B916EBDF3A8A76849653DF
AE3CAF9561AF3B705F75B9E5DFD6758DB65A2FD54683759912E0D0035CFBCD86
5D239CDECAAD9AE5D95377E0D3F61C2AB7EC99ED28D2B4A7B6004A566B43CECF
7E35419EBC2A47CC76393F4778DA801EA75B4C1FC38062AA77CC4EF0E6CB0C81
9A797C01F89BB58A957D3DAE33E4256B1F5A7D66C8989C512DA066D6DC771548
F2DA3B490834E7B4CECD9293A5DD581A3171DB1C41F348377A602A2DDB80C0CD
7B960942967BF3983FCE91203F8C465362CA8E91B3C759943797C24CC83176CE
2D044CC07FCD6CF9DD7FCE413A0B2CF777529685866C7855509CD57489F07108
D995887AEA9D20B3CDA77BCA95B6F655020E2964AD82AD77382DFF4903C680FB
2C666FA0A35C4C85E87189C909F4B6A0C788077270ED2C2B0D838488F9DAC159
7864727A4F21FDF43764C2E9B8BA9A8416FCC45247C82FE6FAEBCE13C1E3A49E
269A4690D0AE927362CA09840E5D802CFE2BD403D853D4FF9DB92D17AF722C95
20AE6E9BC0C1E5143A5DB4A439B103686497DE2461BB90D37C89627BECC0AC55
70A57C2909F2E640F991D6F12358B5B114CA693BEB191961BD78FF2392DFF4CB
1D7AB6A7B88149FC49EE895DCB134D1F38F37B025300E6ECA15FE23197600C24
AD4BD6B59C91D0CF4083BBC7957EDE6DFA56299A52802A64B2E1FD8F680CDD53
397B02197B6FD6BF35BE9B41605C32BDF1D475B1288CE0F5FEAEDAA325B40BB4
85BBF060B969D4438A98DB4BA2BA2CD8A143B14BF7586AF40263AF65D5BF84D8
E2205AFBF3D4BC3AACD79A48157258DF2BA832668C9E6A59AB334F22CB8124BC
827B78EEED11AD7CA7924F6E7333901B8625E9546365F9F845E184CC0594188D
C4771B8904EEEBCC24FFA0D5EA576DC9E9AB838AFEECEED5B387AD8459786AB6
7559CFF6A53718E4BEC015F01399ECA7FCDE186EEBB9C5A9D408221D0A374B96
DC8F3E8244AC2847637FBD2E1DA0599DB8C3C4A22B23D2574425D453DBA5596B
4EBC7432225817E45045C567CE67A400A31CE819C6D2BD022A08FB0F4E237EB6
A2C747CF711307E39831361D53684B4707D50AEB690598764BF0C7005F650316
0BDF0504B2BAE0C1F913CAB9E674E252ADBCD8B2D9D890472EE92FD723FB30F1
0F612AF3AEDFDA0706424EE94EC3BFEAED8FB39E77FEDED6E929E32FC6589C9F
8D1D21FD861AC34696126C95C045927A179F4761FA14EFAAB723A7C816D4044B
144A8B728AF41E008EDD6AEB024E2BF55F8651158393C461970BE07682870C70
147753E076B7B8468267537C4BA99A0BB3A6AFDA32F13B3191521CEAA22981DD
9B4631F1869EE04CC4D86B10EAB91C83A0C0182737ED317A8898253D922EFFFA
D82BC993B88B9FDA9A88A5C007F39E7FC2A676500E19CC0DA0B141CC4F4CAE46
E1430C17DF7BEA528DD00039AA5569B8FDEE99E0C0F7F1D0C83E4EE124F3FC7E
116F45C027B2645CC0E65C04EE0553402D1377B2BFC86E6C48D68060B06DFE86
4E6F59850A38526F91C5780ECA383B1BF965219C6624E5D6B3E793729D362EF1
C61068D2F56DB810151DF13BC2D008CE89509AF437A2ECF2A65A729857563F04
9824D9D5180ED4D1FDFEF5DAA20D1130C769FE0C71802D03E0C4B5D0A21DD2BD
972182598F875C9C782EB31A60EF3275528CE316C30FC81D57384828CB8510AA
BB489BF46C0DEBA17B68ECA8E317C53791117FB712B683A9B716DFE95B22B705
3F6822855EE5E45D21DE1CBD7460D3F5B265EF0AAC299B0A3174D3DBB4E2D556
70B83E584B49E7C7BEB3B39E0D31113ABA4C4528E9DAB2F5F4CFA6215CD4D151
B6435D2824DAB055A1FF7DC632986D59674F5FF4DB9D9A3D7308DB418E6E775B
AAA568D83B462FC0BD103BFFEDE61F07D3787856B23E7B6695477BAEDA580F55
5C164BB3AEC1F48F4A27CB1675AD8F922EEC7955F981F57C6D8EC774601DD46F
2C66F566BF46C25E86514073B55F4CC83D93AFDE39CA0CDA540CEA096120FF0F
E3A12B0F76D10B7C0888F4FEDCA5AC805470BEF74C9E4F13E5BC78E501E95E44
7A4960197742337818173CEDE77EEDCF53E3A64FDE5CBF741CFA9D1CA3E9488E
BDDDB52F00C076C6B1D0E93343FBB2C31C4F8FF8BB1846EF3C2E073B64561BA0
2B8DBF15B73C25574C0FFD50235E88CE140E26C392220832FB06FB1490EE78B7
171B945C5AED6B266418C48D348D542E9358096446D3F32FC2DE3216EC264B4A
7C5F85D8B5DE106435BC4E349C88066E0C4689B4AB0C03A95886B7F622D5A2C8
DEC0BA2A71A8F4CCA46CBC2C0E86645F017938BD4232F7991AD1212261127FD4
15185CDEC3E88E4BE74296130968AFB5284A5BC983DD3CD241A8AD2630F6BD7A
4BE2677D6E57FF156E91F149C150FD4FF7FA162AB7BE10FBC437D31470F038E8
AA2E882743FD751A6B7C9AFE6170AF87939AAFAB5838CA714ABF0575C4254E34
6B938C8921FC7632F6F25207A74F138994F8A2E9F96F4F8462AFDC4A9828B04B
090643FEAAB5CDCC83BEF6255A02E7E82DEB8C2FD43F2C55662355F3C7CFB92F
51F061F163249DB43AA2F2669B18B2D7EAB2EABFDBDFF58BBF6E592A3355CA6B
6DDDFF3EECBF4817C133D90DDE8B277EA8EA3C5C9031869D725745D737501680
918DDF36F1EB6ED6394ED9E0C7392036E3F267A0706767E6EB23DE15663F78DE
C0F0F8390F9CC2E0FBCEBDF7BCD75F6DC2B28A050B50C0974C983C13CBD08512
429BFCC30F6CDC410B0050768A1B95D44A790435D7FFF5C835E8D78BF7D75412
64844F2E650953D19F549D0B174917B2684EF827C40DB9BC024102CA922C49DE
848A53677C475CAB41A0CFAF181C5D0F0F6F0781B942612B8FE564E52E882D56
46D41A65F955940D517A38DFCDC83091DD48B362659FDD31B8BDD29B8028E2A1
ED733931DB4F806A876E1EB97EE70BD59E0836F6FBF15700B64481639C463260
B7005593457488ADD1ED89E0D671664A0FA72533344CD8AE75D0DF3F331602FE
0FC1B8CB449349A0DC3879AD565B240BD451A5C611A52AE12A46F4A9B27F7E0D
2EC990180C194A4C5078497EB98F0AAD27EB497D0BAF47A7B6955F2B602BBB68
FD35B2D0219CAB45409A27C1915FD7375DC754DF31E6A850FE9808263A44DECB
29F567552D584B696EEDA4058F5C7BA60CF9E65E3A0671A4FED94AFD56A881AB
1BE0DF4FF30954CEBE063E771117AB7602FB9F5AB364935E476CC45AC00D5549
0D37F60951521D587FE39DAEA641784DAC0BC1DC7B447135BA54598C22CBB26F
B822D272DFC0F6C26A2479F8CCF5E40D815AE501E2B20CDE652FE3B410A358C6
8F65018E0B54251BE568B27070CA1C9D7604E917B98FB450372DDD0B265B5EC7
5FCF9C6CDB0055A0F391A1AA4EEA25FE79F95C98C6B30F5F4DD4E52ADE01F205
F6384B448FC94A2F0954089FB90AFB03B020E9F19089CC1BCC944C52CD45B126
8B7AFB245DE6EEAE80AAF71BE610D55648CA9473738988F48234CB52E9766AD7
951BE28F03A597C0EDC0E9F1F855AC1A54F05ECEE1F028E1130AEF19A17FC0A8
9BBBCB3D2F5EFCE4D55D8D8B8974859EFE3BFAF2A2956C2BF469714C3F10E211
DC7DF3F80C84AC9F389781A6A60BF57147E244E36A5F8B08832DD4ABF11EC5B1
347CC67CA9C9F73F7062714118C569AA8D0689B260B3CE01F5B22F7C71709382
5C7DC39F6E0A428AC9EB445D83E9F3A29664504A5336296289FE21281C90F93A
3E8E49B7F8BA08D99BC37C4ABA6ADEED3298070E4491C14BDB6ECF5ABA532046
413464422B30A9CD57D446D84FB68CBCF66A445EA127584DB909FEB05B4A5BAC
88B8FC65FD9DEFC620C7F676680C8FB78E30ED174F359CF6BB5DF61476939116
805353E1FFD3E8C955366FC0F7536AF7569691426AF1CCC3A5A5F7B9E1F21153
3157C2E52357CA03D1D7F810B8560214293227B09D351FB89240DF6F80DF6FB4
8FC194156410FAA7CA98CD6352AFEA59177A4B47AAF475C2E31BB88B7047CBC5
4CEF3296DD01598331ED4AB27FC52386F1FDFC29E02680890A083908298EAFC2
69E86EBAEE715CA6A1018DAB61E0902226126EC6D0052D6D0717779050E04E23
D0BDC632366A6426763342838FF6527A4F2A6CC37F2C7F25E22B94C8876399CA
C998B9CD1478491874F13F971B21BE839DB8FF1D228FA4C2BEE9A64D32AC3FE0
908BDEA48ECDECCA671629BA53432E45B36F945A185369F02747CECA6598BF7D
917D1AAAF13FD64A8A58AA10CC36CC7B486512D8B725C2D6D9AC6EF9CB9A498E
C168878372022ED98C6EBA7518AD263C80B4548C3F856C9DCC64B49AB538C181
60A86930DE561B8D82A57FADBD15471A9D28B387CAC0180B320292C605D0AE89
B5202997153475066A0CB96FB289DB2D5E9D6F786B1316A93B2D0D5EDB0DD235
F39A5F67FFB81049233512C183FE8439E0DAE1168205FC70574D6EE18B4BBE46
764EF7FB34630A20812FB66989F2D3F10F5F88CAED82DBEA3B60379834AB433E
E6DFD509EF24ABBCFBDCBDB45E848BAC3ECA8E59C8448F1850B89AA557B5E799
AE386AEFFDF8D8D579FAAACE7A064F987A7C391BB5BCCC788701317E50CC91D1
A40A17EA9E70D93BD708C2870E1E3D11F87E9DBBF45948746E16EDE923091378
A509F99B88B2102C325823DB0473EDD298EF3687DB1956695F5FCDB616F45FDA
CCC16AD7A6C0884CD2AC904A961138F02E9241FDA7876AF7ACB6C3C8821D29E5
07A211942675274EAF3E29D870D5AF699B288A97C6C0D15856893BCA196DCE17
1BF34625A9E5592FE7BB61AF8A070A668CA7CA93B33B7876E07BD1CA191344AF
E182025A55890DFAE70ED77B0B38039768FE5B0BE384C5A06C64AF24DCF502FD
E23CCF5F209BE97D8741F5CBCD1E0EDE8A7AF167813E056035D65D0BE5267409
74C6FAFA4CCEAB18A8F0D4FCF142E2EC53C778F67781E51AA4F6B27368C295A3
8FE38338AD9581D398E7ADEA6BBE34E939D33651E35696DCFBE32E4363802E69
C84B6E7C6AFD3A5B031885BD97C359598FF5365A7A5C376EF264AC15329ED6A4
38A7377063AF4839A260A347682E02B47B362724FD052A1EDC5B1F3810BEE5A7
A4792C1A04DBC65CB66EF2354047ED6BDE6A1E5D18698628B62A938AA406DFD7
DA05FCFD5FDBEE9826DA01DD4001E3617CC22E6D27F2D314EA4E8746917436BE
5809C6E9D41209C1F86E78F23799F84409F94403C0E042FC3C4D6E938F84FE8A
377BB80451BB5215C38FD35729892B9F0EE7C7BAC61DE0B31D4F62341BD722C6
3AB121110B67C6FA2B5AFCEC4783730EFD27F6DF07CBCE0369E6AD7853F32456
632518AE06442C6E6232A24F47D5709EA8AC357304A8822F07503FCEC8D1F768
6C2D825B2FAD49B8DC01F799404A991D71F1B3CD4A15AB0405620512DEEC4078
7ED27EE66BFB237E32E654B5D35C8629491A31BC59895A7262726B6C17B35CC8
F8B9C32A55BEC450853242DA8622B85DB0A86DE0395871BC63DB3EF0C82E3FB3
00B576D4DB2D94332DABAE82C0AD369F3A91CA84F9987784738AE8F61B270730
A67ED21439BD26E69F9068FE91150E43DD5E77CE956CF1A0C7129DC32B28F283
0CD2F143D9092BB00166B27835B754D3419D5AA9B5AF8105A8766DA05D638CA8
71147284D3DBBD2C05E9EBFE98C56E7A8090D94F2B6DD11891511779322638C8
A2BBB8257B2D065BBFD85CF5E3CE7BDDF2E19E1D1BB6384DB173D65D40C2DA79
41AE8AC05C3E067DAA83FD268117584FCFC9DB7AB12EF599E45306A2A7C8BBDB
D258C84DA97F2D7CDE0C2EAA7046B126AC3F573E192CE702E6594DB8B5C38AFF
AB5CBEBC75DAB18DB17B23EEF8FDED5531DABAF03374860DC22C4772147FA9F9
95118F5D8AF5FBF87704E722661D12D2D126D228E0CC09DA8F5F1EA70E472C51
5FAF26D326C7C2F60A48C0743EAB4BE07D6EB1B62F57EE0F6F30F9C2ED5790BA
16E5D256F6B5352085C6E047E724F0FD03FB6A7FC628EB9E239A6734BF3AD36F
AC399D49BA70499B0ECAB2C8A19930554FE9C9F61C0810972E7EEE279C267F42
D41BD98726CA67F6B1B2D0F0DBA133C120D79B44C0F974ECD37B031144D5DD1D
67934543DA94888D8FC391A71D62707F992149E72BDC563EFC7B775A19826FA0
1915D4BA6DDF77AEEE69AD32B7E7D79C5C2F664B0B2D911457EFE4053B272B4C
6D442C1CF637AADAF17B7093FED7A39D938E871DC97CADDAD8AA9C00D30ECC4F
5C8E9779C733A97FB14F2D5163CADE45AA46E669E7A4CEE2261FE5A044383362
010F329C082F61861CDA71AD64BED46432A25C7BC1EF4447A3FBC4A3C784E1AC
5D6FC9391179F08A0F226FFB11D83168357FF27928547307FDDA52137189BFC0
C255B2C56ED8AB62091467537A5DA619B246AF2311AD24032D731A865A9D6167
1E54246A91B3F1C0AB76648D00C6E550D7EF02EA734AE6B674756E7A5B774265
E0D05C41B246EF1741F740FC179F81A8B0132753682164986416974C660A27F6
19ABC02FD087FA1A2EA4C2EDC2A0221F560CBA5BDE01ED3FF0D81D78CB3AD3CC
528FCC5369C40CA9AD4F2A6327A7AFC803FFB7ABD81A8A1D967529629D5CBF2D
063B8B946566EAABD3413F8D64845F97A360647D4FC903988F87F4BC580C2BD6
66D6DE0FB795146B86B91F07CF083F885C837F1735BF56C3BFA9A68158946FF7
D7BBB897BDBDB9C8B9274FCBCF1F94AE300592FC06ED6B2B1325961D2437FA1B
8FB244168FA54546493D01D6583F9BA744306AE9F8D5BAEDBBF5ED4EB2025A30
9DB409EC04393D53F7EEBA670F22742B43DD2C37ADAAA7506A8A9EA332D8D429
260F2E92C7807C7407192216C7F77DD3CD85C5FF69D4B318018FCF729C99BB16
67CDD1CC58AB75318FE2FA170274B046F9E2F0DE06EC7923FCCA77B14191C89A
7DCD100C34EA9D002353831BF8115FB29EC127330DF74FE100B8B78ECC15D30E
FB5D77C69204EE2C87B92F3051B881E63D3E3A4A1D71B5FBD33113559ECE9BE4
325C143EB8F2A289EA98FE5F41D2193C7A8CB9503BAF73461411C7F3F76C14AE
6D6C545425A768A19BE3C9A2EE605514ECED8A714DD49ED4BF1C7F18D94778B0
D0E4B96C724A7535828230F80361330885CCBA26065B23B6B277E63F7B9769BD
5868822EE31F1BCA8C254F4FF266228FB7DEF7DA48F9A5969939342B7EC234BD
A39A6D5A637A28A11182A1342D4E85176D6350E581A1E9426B94EF92AADEAA75
1C0E61170FB8A0C9A9FB37B1C5C09EB19BD2F7D9B7490507FFE7EF0B74226D76
D584AE7476E226823FDC61184B6B0D06BF557D8A1CD53F1CA39687F3BA2A1841
59A553893DF27660D5B46D863A5E0C675A5E8641EAB6FDEA49EB6C097AEB26C5
6C595E56E2063C70E40009D1B64736D7C6AA675D3BD63598951ECDCF4D362FDB
5C07E0F612360B4D3ED785EC76D5252A6164496059B1D5F511DCE3DAC2E32A2C
FE15D04932C7164D25551D73417C3B27A46E8A598D5D7BA9801A11137D5CB748
E33C1287C284FFA01334F193F1D9DB4C73D5AF9BC2545693A7CDC102BC89B654
23DE914135EAC5686885ECD440C5D4472CA2C0FE3F8CAFD8B92D84F415A8ABF9
7B444F6BB2D0D67E6DBBABABC6D34569AE2937DC4D647DA2774FA36620FCFF31
8F1820AE7038E6979498E1653135734D5B4303923AD5D589E4C9762646398212
7E931F5016764F47A33CCA56589878EAD9C8BEE5FC42FAC015611D07F26778A7
DA3F7048048D60AB959C42C33B15DAAA8139636A3D0CB08246AF7D1698B35984
2AD7BFF9FFCE1A500C2A5E6ECFDCCA3ADEE87D61ECD4CD669EA9B3241F425F94
09954DF1682B719EB84C0E6706D7789EAA9A1987455EFA183DE4BF93813436B8
6367FEBAED37945932FEB65A5EBAE3040EFC7C86748EE512ADFD4CB1BF12A7E3
B15CC647B1AC871273F0121B6B7EBEBA24EF904040C697E841A26E3945F3FA7E
70F1CADE32626ABDE2212C1DEED3F3B65D84398F2962F96F579DDB0EBC02B4DA
2BFBE886BE5B9FB237EB9EF2F891DF61F87094C804334E8705E26A4E00DEFE01
DF2DCBA19FDAF7EDD550B3E859752FB5761518C668E563D7BE7B4D67C3D6ADE2
A44856930C48EE55ACE90C725E2024FAE7C8518A8A07D79BD4E74CF1244DFADB
63CFD7BA5233AB8DC3783458A1E9EA14255C6F499FC24FFCAB01A908C816F761
5B2C4BE134BDBDC60EE74524C4EDD898F72222EDB5DDE98785C4A53184C12486
167118D6355743D56B65328065734B398009852126400FD8CA01E3BD90332314
CA23E4D03A6FCEC59387157D1A16E39548FE529E3FC631106DDC22C711FDF8D7
9A0D3A27920C9E2471188164C962EB0496F83F1DC8F938C42AC9DFC9C08F544E
09CE180E851055A86B71F7930B4321213D6796AD3DC59A89B99E2BE50AD755C1
11DC8B71C71209E71F6A5A95FEE8AA957EC4816D7A5FB48A7A1FA126C4A19790
94464F7F8E650297CFAFBB224D96256F8939AA94FE0863EFB2735AA4F297261E
3D61F04457EA7D25748E3B29B815DA50733CD753AF12343FD82AAE027B719EBC
71C4E9D4370AE20EF6EE187F3A08424BAD2A76790BBBA5F070CF4CACC5BE86AF
E4AB9E1D04C9D5E3210C6C54060B454FFC3BF90B41E29F1F6D09F0F37C6D32CF
116C00D2E6AD78DF06404E2E04F40E88B898E6CC726C5A9F1B500A6006C0AA99
5C7D0820FF62C4862787DE1CC455893F229137F3EC2D81B31979A83467E9A783
C5E2B877D0F32CE7C93C30AF15B01140767ED5AA4CA991470B1F003D85449670
FE3E9281A4A8979CB9C55FDBDE399700EE2915F4B95EDD1E77A3550EC260031A
34114EFE617ABF7E5BB8E0DDC9B0D18E1C6577C688380C4D58FF37D0C9905911
C4F1845D2165DB640F8917FDA1B43543D116C628CD32CAEA6124C96BD0984939
BFEFD366C911F1984EA81FD69FC13A7E134A1716FC82F0987B4936C62C8F1FBE
ED7FACD53150AAEF3DB628345E9AF7E9392E2D8D78D990C5F45FBB3B6B73E80D
38E2ABB2462B439609F52D1C3964B73959DCEF5127F2CBAF67C246E194A797BE
72EE0F4D02EED883550660CAC6678AC07A2832552F8B3DAE52CB1AD406F967DD
791A1358A3597304980BDC5CA977CCA05F8EABCA3628620FB025C8DA331E1013
45F41BFFFD1FB21E8F40459EC2E7626C85C2601D5247AEE0E5233FB36C89CD9E
08FD471AE5DFA674EE37A60585620619507C2BF295183C8FED37B3CFFCE72F32
F4443E25483E98BB7B2AACA8D69284C0555ED5AC17D09AC2AA5259DD534D4FAB
1544AB98EA7D0FB29B23BA6CE611B438A73B11728EEF1052030D21CA171BF11A
7AE7CEE8B4AF9024390C534E26EDE6C95419A8B0AB7841FAB38F47059F30C8D6
B9AC4368C911FF9C855A72394141B8C7BB18405D81C1CB76E2B073D8A581F046
F4A4EA18C8C3D584D5ECED58918ACCEF370EA97B5040FE9EBA008C15B60F3842
4FA42032A6376D231490C683693F5A8934435A41942A74C95DD59FCECEA2711B
A5BAA5E493080A310F264A6F181F748012C9DFD3C19A5CEF3896A851344E2E55
224B620234B3A26EA95AA62A22124AB7F766FB78F027A6E41AD45DE984FE1E00
1AEF91705CE9CF1FCBA53FF4B0B389863AB2FC2C1083D91A0446BB87EA3DB25C
7B6E8CB696E895F0F5C9951F62B947F3C66536EEACD527BDFE34796151A0118A
1831DD517FE78071A753C29F8F2CB99F539668635A43E7668811FAF765613A08
EFD9ACE6F0171A7E1C0EC89FCA2E31405B5DE574FD36721632CB9C56DE871BCE
4A57FBCD6988DBC8F7C6CCD7B6DE8D520355DB0727994BC89331EF93764F782A
036B606BD457D0F5D55419D1FFC9269775E5DB7A4AA1BF150E373526CF5501B1
19F24985788B3DA2EEA83A39C13C65F8C0C6FAEEE1203B59AC66BBD08BF70E92
8A069B2018D4F5DCAA1266597C63571A5C162F581DBADB3CCEBEE916749185BB
4F636181F0C3A20EC3C0FCE6B7173A0D08EECA1EA7A5354620647C442F53F25C
CB8F54EA2A0E39FEFD6A333578DCF9ED6BDFDE0A61810EAAEB5137CAB52F641C
2E6C4926317B56BB868531AA26D0D5C24FA7A0A38713EC53D29F374C4961D5FD
8E129834228F2DEF262CBEF3C6C416D938DDE3CB08F6AECD20C62599D260D429
F929B5F113E03C7926211000539E3997933446CE5B4EF4FDBC70A40B5551A0DB
4776F643174B7AED256C2CCC3217CFB71D679621B06D1A8E8A6D893988B96CA2
D87391869234C0F1012F58691FF3632EBC044A330EB8172CE939E8DCD62CAAD5
E18768407DB89CD8BC6E437C7801946DABECDA8586971A2025704A057098D345
4409692EB96BBE3A66AFBBE97C493D8DFB04BC4A97E0A58BEDA01EFE9027C2FF
531A61F11D2B79E8CF744F0A87350CA4DBC5C7236314A580ECFA55F43C3D1A85
B84C0E9C86FFAAB54923844FA1DD374D4CD3BD92A0C33E3A6EDCA214F6681AB7
F350B212F62062437EF2082EF3304EB0AD5684D22A6F3C07876B387181052FC9
9785712ED03140966BA7BEBFFC5C88432EB3A267F7280A975CD23B501D418AA9
EDEA4420671A8E7B164B53178D8047D766062A08501D58FCD68763C077C0C1C3
6EFC0FCC2FBF7AE4FE1D5B70E193E2DFE60943CEC52ED5F5DC4C9BF7F5931F8C
90B25BE983AA9325371549809FF4ECC814995096764BA0A9A1468C4FC2683B42
51A579F142A3746A321CDC5D31F05C62378C105C32D68DE7DFC4E498EF23AE1A
FB810C3C4CAABEDA82C46B768020B57D756F40070343C68DF4ED361C473BC9C6
321199E4567CD6020D3596AFFA7038D0B45D573CBE6235C1FB2B7FE8BA3984F0
DFEA95BA2B24FBB20B3FA12146F35F6BE6FEA565D76FB30916F94210DFD577E1
D28782773C669E1B83911AFA9D06CFF85D89B8E34E20DCE933E323F323A39449
E49CA50B80C974F1884011909113BFE6E274D15C359906D37A40CAB48F881E61
44E9051315FD26EA08BD972EBC0532CA2D8205BD6E10FE1621DC8C990303D972
7B616717F0F906CA886F08AF7C6AE252C4BF524EF46D1E7A1D5E3A427BFEEABB
F19B93464CE5314F5139B08EC61243934E46241C9776155C054F7D143FEB662A
9AA3DD712EBE3652F5ACF6014547FC10BEEC9B92EC2DD5CECBC207E4E99AEADE
0302D686551AD4315C5F4CF64D20B94FE7EE4E12D925DE7B89235379E513FEB2
5CD34CC864B720B3E1AC15883DC5E5AC48898ADF969453D66AD12BE81304B891
C60D17A03377F85CAA2D575C6561C422EE9F020BA05E146EC00C74DDA63E7DFD
3F0EDEDB27F03FF8F8FA74394296F0DB533B84B95C2125123D6504DD71AF13BD
611F10380F9325BB33F1F892AAF90A143AC84B17A4175247754E6701A35BA316
3F49DD573C4CEBB6BE49F17A6FF785088B28060B6002F2D901BACB9C00A24C30
9E626C19D764CE6A51D5EE2931571630F56286691EE78CFC52A1C9515316645D
728EBB317F8FC7C3480A73DA5D53D2845565287F6568940B4F7A5ADA1B9B3067
89BA390B7844DCD7A2E20900F9C54B84B977A8CDB89160F33D48BE8A5997446D
12E74600F9A694B2FF94A7999BDC7F90501CCAC3A54ABA398DC57F2699B56F92
A8962ACED6B9569E0CC523E9E8A671006FF6E13C2659B7146A97383C787210E4
1B0FD6D0BF06CBA0E08784B3BCCF8899FFBC369D0B02831B20D6C8378672AA86
36668ACDCA0E9BBC84D6F4AC490AB109D5F7E598C19F39D67EEC72C2EE74FAE8
DF65086FF3B20DB4551B54E58A14A5EFA8983435082FB35F1A116286068056A2
B2C2E9F011C82A4DF0B699DBA110F4337D5C920C77E653F1A3A1DCCF88AAA77D
6293B3B3A3BFAE74F41E64461A55C0BF4D71B09C8BEDEC0F5D6A5627AD37D2A8
35B91456B852645B108D1CBD9AA4B3531EF145CFBCF052D839A7B45D89689AE5
B7BF5273481E5084BE5AEBB0BFA599DA3B7F88C95B7E44DFF6E792CE56017DEB
1F524ACC4ADD0B31ECF268BB22272D360267DD9F01367522FCA4919546CA5D2D
B62CB925C1E8FA882EDD2644EDC96F51ED51A679962B6144DDEDDCF1137950AC
D11F1D008BAD6EE4401B373F4570D238C52F72C9268FC7C7F3C94F8A2A3E7772
8465E17EFA84810B65E80B9094604DC776BDA3B0CC3D16B4289A5CBD5383CA20
C64760A9F8598136DE1D706500F28348358DB72AA71BD77015A37F8FEF3E88DD
DA701A98F1382591FEDB10119F1FA8EAA32313CC40CF96EF3E058C180201DBE2
F5DECFCF073E07F1518D9D997584DC17A1F3C8544FD51F09FDC8E3BF67444C69
EBCBF320F44FCF5A4AF9A8FF022487B4E39D548E8FE36FA8CAD2C2519B883B51
07218F9BD1AF4D03349498942761A695F2E07721ADE876C6F5786F88E6B61788
06DA20F282D53421D31E290348231C1EA4F4683B35F1468A73AEE91586EE238F
5EE25F6CBF7AE83A5BB02ADDBCF4E54B638317BAB427D2B3258E7199E0B3B48C
515CBB59ED5068A12EB232B68E2072A8FE38BCA7D3217785E33C922D54AB373A
82A64DF1D9F0EB0B970316B843DC374BB4C173E4F261ABFDA5FD7F0CDB03EB0D
6ED70BFFFF0E00FCE3415F292DA29F74FA922343BBB4F53C2F4604D1B4596CED
DE691C8BEA8F050B5EC63E51742E0AC01E4B4A6B9BA142E923B9445F3110D1AB
672112D44AC6FD6149826D209097EF92F44EE7FE11F6C14D333D42496D804D51
D0B4DCD63525507751528CFF73D7111EB053AE0A556B3FD8CD002BA1735B8CDC
AF47BB9812A9ABED087019261663079BB6B569DF977D01E1E418E1A5DA49E11F
D21A85175806D87FFA8997B463B062FB0D3B64B58FFEA82DA44DAE0AA388C8CD
277E2EF012C9C89D1B6D9EE99EE52BE8049AF5CE5821AB87C29F6C69C1AAF379
C6B5C56539AA5919BBC103F589D692221024CB828809431EF131781162B11E79
49C5C418C353999D3169513368AEDE1E15ECB5AE872C148B683DCC1CE3CF75FF
142BBADCB8AD090CCFC4670C381B902C6372B85DDA5D5071DCA5C10C698B90FC
D41AC3C5B000F2AF644E301EF891732DA12159904054F87BC1DBDC00F55E9CF0
7969E6FD0598C49A542B76C396FA0B238548E6D2BBD82C5AD6099FD8B6D5A5E8
EB2B1AC5193F617F0ED44D117E1C942FEB33FF8506FEB589A929B17D22F43C83
6B84F4232CD063D74BBCE0127AAF28BAF7CE64143C8633C9372CDC0CE17FEFF6
AC3018612DD2EC614FDC1D7247249BC5AC6692876DB4B460C81E29F9E7204240
73FFA8B8C98D751E259A9492DC2844ED7CBC933F720A895AE74803D3516C3AC6
B9CBCDD6CA9143E2FFFA8C4BB37DD7DC4766442AC05ED63156A452CE08A38686
71BE4DD4A7D1613C92E66479347A98595CBAC92F0EC425509C1A01BF66EB21C5
08B9ACD4ED0A6196F9A93DA75473E9804CF7FDF86389327CB500064CC7E77072
BFCC88677C76D88C2AC15D9538D268AED500EC97F5679A85383B395131E1C90C
DCC7AF4AD93658D4AC80E30E2D2F470BEBB6F2B973F0D1C246DE79596C9EB809
D18EBBCF135BA082936354DB71CE442CC54A5BBF58B08FF2E7860930ECDBB92C
09D342A8F2460E25F460135C63B2D76F24F83A203C71B469240B5ACDCD39CD90
1E5C7C5746FB5061769D4BC247374887C0E560118DF5704ED921BF4F493E67E0
40807380CDF1A9CD42500080BEA0133D088CCCAEB0240CE45BEB50ACAE2BD56F
C65D0AFB5151EC4FCA9DF7F1491FEA28BF740734F0FD3316E2A063D0B724C84D
267ECD64A321C4520D448CBE7238B69B69A74D112B40A942796505C48BD699CB
888EAEDA9256EA6F9CAE93165189E33D295259CF7948015CB46121DF54E6B555
ABE5F8A728D27C4559ED27D02A97D00CBB811CF85C43C9C1D43EC2260570C1E4
4F8236F55938C376740C412EE91CC71B4C4919D8DBAE55D5451F2609AC6EC0D8
4EBB92569856C2E0DE8CEC1AFAF039593D131D7C718ABC6F057AD619CF7BAA42
833A14A3CB8083E278F4529819DB929AF3D8EF4D24753D3504C65C14E50636D1
2CD8179B66B846C467DFF4E39F022AA1BF16C3706FB06CA079A292CFA0BF8C46
BE716D03F59BCE106A4357719BBE27FC6F424828C3638B5CCB3E66AF390EB331
394A4561960F2A22AF9E5DEDF038F2323CCA44FAA199C6C22AAD09BE09D079A1
F8C1FB7946094901F8ABB7E42599EE6516B040474ED52501B395CB83F61A4E45
C40871EF988E96C4D1AE3AE4C8F93FC16FFBC3F01226E712F5898718E313C79F
22C44BC58201713242528C3E02349A55726A30AD8C8BE0B112677BEE94F02D09
CFD249876F1C6D84E1F5BF9808CF5AA1DBEF5D1BAB219B47733CF6B56817B85C
D5024806CB2B7B4B51FCAA9F3D737C012CE8739AC3ED9AE4499C39190ABEBE24
AE30A0B802DDF324DC5A3C2FD682A463FA9A73DA41257163E1D1981788257DA8
19CE9BCDB0162BDAEE9C8AB64900721DD3BCBB01F70845B92908D9DC74F068AF
4A51FF99E7BEB4BDAADB7F2C8B63306795894C09B87AB63C5DAE7FCBE5017A09
4438D9CF7F55E3669229CF361714911D2101CA188297DC6E6CAA613964833A98
92144FC58C8D807C743129422320C7719A2392545AB2CAEDCA5A397C70F7D24D
9805B5B08FAC9B1A4F1F0591A9E1B07003B38906529B727FF775A8B23D0A8481
3C932B78638221640FA26A43FCE336B5C4E2F8ACC60554107C8410CABD16B6DA
1EE595AB6696C113F6D266000435D86A7A87EA9DCBB1855BF6318A014E8DE3EA
94785702A19C5778347243A53EA75A8B6AB766DF69E65809B7A1A5B0EE899163
5CAD38BA958DF664621DA6D5DC571D2C5DA1C6EA96B69797C094CFAB46B5A50C
98AED045F6B7D70010DA26A85569ECDA77FB2EDB5064659035C5905B2B9AB0ED
24B17AD3B8F6BA9A0E9D23A71F7DB52D76C31EC20EBED71C7B1192AA3B97DF22
038A3CB4456CC2DE9FB29B5FF789CB56B7D7A06E66942310AF455585674CC448
5EDBDF4DF59F8FFC91E3E054DFA0E412F394900E1E3E411F8D99DB14FD76EC11
6673066517E1A2F48E08042BD173AD7476D2EBA2DB9547643D32C80906867152
A8CBBACC9BF136E3CFC14D8D087E4AB1D824AB5C54A0D3B6B3AC06525A9A691B
E540BA52B7B4DB9AE919BBD7905BF5F3B228049C74443EAEB86888547186E837
5BB8F361DFDE62CFE75C63D44F2889AAE94E893ADE6B50C72CCB1497EB00E0A6
08A5DCAA3895E5D52FBB9789F28F80B2DAAD34D18BCA6033FDA3AD777346C555
E826237342A61C05CE1BFD3AA2563A0817C731A3CCC413F970FBD33DEDCB9FF5
61698F936DADE5357BA977544DDC83759912E0D66D646084A0D5AF2D15E33E6F
D01A337A9BF215CFEE1B6F3FA89C28EED8012DFB294B89754F77E35847B33D9B
6201BF2D455F03A869AB6FD2486339DA496BF289C264DBE5AEC46665BEFDAF46
352050BAA800AEF731092CAE1EBE207D9E0D838874C44AF90362A8AE7D6D036E
30E6AEA1B61F0720C0097A0CE9D7B2467B4E698C197E265967E43FD521632738
399590EF5CE3F446D4CB7A47ABB340C7B49B4C9E6AD98B976F55251285D98538
963E7D80AC087D088BC3E3F45FD4EAB081BF62C73931D5190A5300C70EE7A00C
8D7F69823BAC1B0B675CE8735B7D61482B1E14029E9726BD531B7882C7B6BCCC
0E535D9C9F263F426DBDFCFB6D58888B4DC7BD433A75E274C0D58799F7C17A41
F0FFAAE7F5CF10CB3B9C59C4A0DA934414A906CDF6A09CEEB481E8667D9E518A
EB61B89AF3C76474500EFD6500A7FD29B5AEDB1531C8EBE7CF78EDF7DEEFAA05
C56728D6C822952018B5E88CBA2712852CEAA3EC3F45533613933F149089B118
A8B86601C03B33556584768A0386B4A84A6F8CD242E639B325A5E92747301CB3
ED417FF4C71B1F75E40DFA2C4EABC68788CEBBBA77A43DA4E5654856578277B2
29212DF3723049A564948EAB2CAF9C2B86A11F225CF10CA6C848DE11C38F02D3
2A695CC7C5B595D64F691A732144E3BF32B7578CA54736EA08399BB8955F9CE9
059AB7E0761DAF5CE094A109CCC1B06ED16BA8F9495ED8910749445542E5F0D6
D3505F837BE0A19D4120395EF4E0F8134772AC1BA162CEB53CED4DFAA7E105AE
F8870DC5D6E86FA9F3D4C4211057DF173AE7DD06F4F90390C81061FECF8A54A0
D7AEEDA589D0ABE3C4861E468960589201153B541E5823C981EF2EF61930AD14
3616256222622739ACCC69BA5F10155CB263E45A7183E28008BAEA7443B6D956
6EBBFBC6D7D6B45A3DB4EEEC73C0EDD2F3C8DA72149AE80B5E4BC403C045637F
ED169985AEFF6BF83D386A2B50C676EAA98532FE8FDFA65A74BDE38778116CE1
63E85BD45C277AD81CA443E0F59F3F3C1215584389562919EDCF4F6307F13623
917FAC915F216D6AFC24BCA221EC3B1A1DE6649C231393ECD89B41D69B73AE66
DCA1D9AE07AE23E7E7B806C96D7407C412B26B0E5B892EE8683D156F15E60139
48D393B26E7EB9DCC99DAEA41B65F7B89D0358EBDACFF88D84DC384D92AAEBB1
5A2ED3F73EFD6397D16911DC0A8B11B074FABA9B460D3822D4FC097E2DE54F3C
0FFE1426ABAF6072D8EDB41AE58FAEBCEDA9E314FAB71AA8B57C903C98028E3C
3096F6C1373E5459AE40AB107F673622FFCF4B28919D52F7140A25E111712720
D9AADD411E3703EFE7029C7DAA780B3A35026CA7E556B6945CF895AB99C7CD8C
75B355416F8ADCFDB2046033270B6E374C05F8C94CF9BC8375F8409049D661CC
A8FBFC6FE1A7BA5B9AD7639D0A4B6A182FF15B7582242593CF39AFC060096462
3498C7ED153A288235DE3A5529AE7ADD9D41E841F40973DA127E313BCB9801B0
D2524359AFE89AB810FB979290D41DDB1470CB5483D7F515232086D70B119D3C
48789F26D7251673142438629C533F96E544FB296B1FC32AEACF09CB8F4CC6EB
F23534D373CE717C7F7903C54F4796914394D49BA6C3014E8B445F2F9FBB26CB
384FD1BBB6AFB2927C0F51C5711445527A6ED34A5D0CC055A923A32C5758493A
C364279B85A0E6D1788E18389E000839EBC250B20A0AC828883E129715EB642F
4A3DE28EFBB9DC55142BC3E93EBD4B9C243B7D3703968DA946422A7EB485A685
35F107C28592C9A11FAE6B62DB59B167D6BA8106B70DF728ADF67085B536E54E
2A64DC4D1E0CC13E7ACF320A5F50833D1C85336FBCBBBADA4D3E51BC42F97B15
70ADCAD653E3E6DFD4491A2D9E3E6183DC00E3E5D31761E24AD7BAF6CF2CE7FD
C05A1251113EB844F9940A9ED687F2B0F24DAAD6AFA1F951CEFCBFE753ED9672
E1D1573C36A41F29D7EE8904B686A24A5077580AD2780BC522AE57D0348688E4
A9945860CC4FDE5392C5A56F901E505D027AC5F322E94734D4D916DE29EB401B
C30CBD30ECB7D11A699B292E520C72FB32BDD91BA70E841159D5E73AB969D88F
7402B910E2FD43397126B3A121D80E15AE860C18AD7A4661FEF1F2C78FF635D7
5FCEF18947E5A9E38DFF05BA2A6AF459A786EF0287A375D899E5F8FA27BA3B44
CD10B8600C7E0975ECD19366C28ADD3A7CC23F5CF000A0873490E577D3517485
53731AB6BE07DF73511D751105FBEF80ACA698BB223BDB4B9D006BE80859CDC6
36E9823A25FF1F4A0ABD3641BBD6037DDCED3EFD8CA2A3675E2A8791813B3EB5
FC1BFF0613EB96C16C9A5FB8D1C21712841DD3102F7FBDF19E2F7E9868DDA6E9
6E63E228259DE39568616E3F3C7A5A3A5E8DA468B3582C085704FAC72701264A
D3E345A382E280955D5E09AEA505F7660385FE74EC0E0CCF2568B8D8673595FF
3488CA43266D30148F07B2FDD7C23EC67D99A554E64ABF5421FD917C9B1C4363
5DE2C9A36FEA1A2C7BCE7E4BE77E7DD2201D02F6F6326D1C10B019FFE601E96F
50253A28D2A5E46DE88E7BFF4661BC3193108B6AAF9040AB03491507150C340E
4AF26BB1D555F18FD1CFC661AAE836BAC95B931B575C28811ADD3C3B2707CB11
B19257DCA4985049892FCFFDC0DBBF2BE73725B2020C5CA548B17ABC8E965835
7B406981DFAAA68E2C48269A406FD91FB09FAAA5C3846C88E72B3316ACFF572C
0970DB180F93EB00736B73DA8E6C3729F1C31583391F662DCCB95B4621E51758
07FC80B827ED4DB2D82FBB3D48C6A71DFBCB70E3E7587B4E8B1827915A563EB5
4EB3CF2E06E62152C7C7F56AD61786E2302E72AEE169BDD1FA66CFF3865149C2
16455276ED0FCD4F40DDBB82E2AB5BA3E184D8F4400C3EE9F49BA9B232A2A31E
A94F99DC00D93A4263C709ADB1987E156015DCDAD6AC337ABFD959F302DFBC8C
B98463B24CE70EF7CF90F9B8C36FF50C19023992B73DF74E53BC70554EF6197E
502FB53E1F2BBE2AF063BB36D203081CDAA98C0CB53221326140134212C838A9
CE93C145D30A8D626C54354F698DBEE3C9DC72D487CE9E367F0DD4D736891894
7F4443F4F12610795AB002B8960AB0743CF1CCAC5C05484DD46828631DB01F6D
B8B0C4B5B3DEFC590072576834C3EF3C9B288BD79A370E326D425A7213041215
6ACFE22C78A85B66CF6EA4E0E1121D8A3A67C6E10CEF718A80364D2966BCE7E1
FA1E8CC31A2BFF080EC9DCCD734C22B046F5BB0C2485236DDEA7AE6E3F2757EC
5A6BA27A486A248E5F5404444B11BC24E522BB70471D713EEB56CB02FE4A0FA4
33C9BA2FC76D569C3A03EE2A5FFDCD3D098635F04D67E521D6956DD9B0EBD97C
4FCEEB9C2AADD6AA654CBFABC3DE24B590BBB2FA80B48ECA1E3B1A39AE6D2376
F7E4E2864CF15FBE2456E123E118FE6841B890D0524642AD72A7A4C1AB13F4E4
E8562E41698F560D9B4DA900375908F098F7C68B2547BB9548B0F8B9D811E639
297826017B7DAC52EDDEC4C2798FB2F166E0EBE5B1FE87E4F46AFB2A183DB728
5685136DA46AD50432254396B4658352EBA63C493ABF53C3FFC9B7E07F958806
52A45D728A495E6BC77D1E7C3FB73A1FCCFA3A398997AD4BEF5DC46E226FDFC9
0BBEC6A8D4ED3C223E9B4B2033FD8048715C805DB2DFD472C9DA7355A793A8C1
A0165BEAB4F5BC229B2B76ACFC6DB8AB1A92005A6BBE7C484E08B3B860319043
5F2192921CD001E222997EC58F8897FBF1A532E9D3BE5E9048C7B25D21988411
6B2208E614FD7EAF33BF3F2BBF41441BDBF1E8F40206E96538A83EAE1AC2ACAF
838B4EDFC4C3C202408765B930E4A7E20E10A0CA39FEF154D26D37DF6AC55438
05A72C242507921E828DFB4DBE1C6FBF764631CBD720BA46757E0B38DBBBE629
97C61E25DBBC9D38845EA355862AA9F6C47112142626A05CFFEEF32E34E6D8AD
54512B2931E168C3DC175AF4B09367BC32458534AA8B1BEB52416521F02C1A8E
228CF924E84F1A4DAAA860EB29B4F09D2CAC95A1B4A2ECF048DAEA7D8A5E5758
D3F970DCF3FBB23BFDBD99FA3214C525084CC6B73B33FD2D781FBD3150AB8513
4582B4AE8355CDA51EEB10D44A58306EAF2C335629E18329809A8A5A6DA4753F
5DAF7A0C591D3EC2E52B6AA41F52A2132E4C8606CD2C39D997E67D1B27795FD6
E4EB10CE7B2A26CB586E5C53D7B1BBE1E7B4B947B6BFD846EBFE7F052023BA73
8404F02605C01D6C2E604C0DF38E73C6FCA5E1AB175966BDB4B76E24D64457BB
65E44EF4916418376A0445A613A50EC878B25A374A34ACE4D4A4A890B44B574E
CD781DDDBECFDBB950A9F8A5B8F40B840205A962BEBFF37107C6B98C5163FFFA
EB403801CA43585E80425E2B4BB39A3E5B3B349867833AFC18FF56360FB29D88
7628D5B0E3D89364B083B455A9CD65B4E2715C5ECF7E3D3EB984211DCD84588E
267D4E538DDC9B77770B0A853CFCD69CCDC225869E426E9DC3657D6928C1571A
91BB942FF755C0032EBFEF9F18EF6BC0B8DFB329B1A25DAD021DEB7765CF57D7
079E73C3D8CA6B6EC24666F11B3F91716D01129BB1490E60B83443E63068877A
0EDE443BAEA82D1B2A4489131202953D8D75B05D9E7FB7E34EAB79046CFB95AE
71D657849A252C5817B52882E1B67DF1B7ACAFEDA273C2384B4D0F27C87AFCFE
418E2BF10A0B55E2FDF60E2CEC2CBD45C9DC3D1C0CF477BDA4D1873BB826B181
DE53BBFA1C88D2FD195E29EF73922E4974FB80494A1DDCF625543909F215E025
8A3F20E50631179AC4C58AC59E46599A38ED84FEF5B6C8BA4DB19579B6938C2C
76CE8715C4C39D55E3BE293C6B7967386925234E9A093246EB3DE734589DB860
3BA607D70BB096886534A97D54E9EB5D29275C589F29A3888AA8D03D23BB0B84
A39577095394EC70F070D83D4B53E9DE8F4C772446E27A62F975D6E1FCB6957F
0E143698C13AD72833CE7839BD9B0B8A934BD7E750E0CE3EE3FEB8562503246B
C025DE880785D8BCD259008CC6BAC56822A6798ECAA5330E468C1605A709DB9A
94198FF32E84F9127884AA58E93FE10A7216CCBC28C5B7FF347BE8E184ABAE3E
8BEA56688BC9100E3E6B44086FB72F28D270F1CFB02FCCB88BEC1B0EBCABA7C5
7CD123536C4F27088BE380F016FFD5D13ED53449CE3B8E9532403783D2D7EB76
309210E96630E7D7C97C50706867ADB5411A35A47A608C60B8B6B9AF28D0BBE7
22B3044778184AD21730A925408D969D42084AA61A7FBC662FF32A1C2B7C30E0
9C12AD2355DA8E720FF1C3389771CEA6807E4392AC2F893A52D5D4AA262A78ED
48D0C85553376BBE7FD9A00772803B2E38FD32865C89755B95B023F0F1AEC444
EA4DEEB6D6AAD0CBC3A5D23CF7600EA3A380469A48CCC113CEAC0754C46401E4
14998FFB008EE506FB8550125E03885AACE1DD009DF8B818A91BDA19F7737C26
3FE44AD65EDDA5B466A2B62269B1D3CE707794FA611B9951D6A21D04D34B0280
EFB3028124C8226FE6DD5FDF30E84D1F09BE4984A1C4D9CB1A57F680DAE8BCBC
6F8DE48D8B9BEA8F2517F0565920B525061BBB35E6B971DC6F1F0876CA16BF13
3FF7E053494A4E0348A296B26C62AFA60B00BFD43872610E1676EDEB17ACEEDE
A651CE89E9DC7E8F146957DFD02FB6461097F6B843C2823A25CF1F92488A262A
75A09F7CAB2FBBBC4121A4E000659EC5A302B491459160FF8385E12574E53CA7
8BC402021DEB1974E0636A5821BEE938CD24ED3EEBA9C102C40045CA8CADBEA2
C40180AEC5E24E224EB8D2AE9BC4A393D34491366CABEA40B01A44D421CE2217
7482C0838202EE8BB2415DA161DCB992B609EC057B97BC1561F35B336EE0B016
EFB1F6736BFCCC2FAF61E8938D337C5D1A2E055DEB3A7955739F1676A9FE5707
EDC1BF48A1A1E458CE4CA3E06A7B7BEB5A311DB67C76FC6BD47324B47C81CE0D
BAA56C091F588ED9684AB9877E78A8DF0DCD7F2C2ABE2D98A237A17BEE86290E
1F0BF1E524613C4E79339E153F25CBF760C0AECE6BC82F4C821597C593706E48
D5405697AB0C548AB5D0C6ED30ED85EA7E6F26EF7EA7E4719AB764F2623FAA35
8AEAC1BBD4463575AE659D29071E4FC6F415467AC1003FD1F9393A2A94838839
0CF43CE9868D33E98BBB52337BAA26DE28506237E7349094686FB6465CABB87C
6A20EE75E2685E93A08414E5CEAD55630D3F6908922AD9E61C4FE9945365E85F
03A5D81716CBE5EFAD4E89EA93986BB493FA356480DD3B020E5A1FB309DED0F1
CD63BA12BB2AC7EE4CDEC169E574371466ECDD00749BA1451C2D6B88601214CE
622B279353E28C23FC6B9562D17B2552E2AA75FFF4222B142CD92C35E93CCB83
EB1CE6D8D8E8F4492B0391B09C3003CC006200BC16BAFD965F4BF4DCED682412
BF5D59FE5091A02CC3F3AF953F97F29BDF890BA8AA7EC971E8D679A99BC2C1E2
FD6A5F1F66DE5071DB9AEE75A3447C621AF01AC95639FD7A5B540E4A770A4540
25E15261164A55BEB1D61BCC55CA3F5778D6575EDA92A33541D78761EDB99F82
A20BCB7B7843B10F5ABD242713329F25629ED6FE07880E6BDF193479383E0DAF
A6DAF877CA13BC2F0D314CCC56F6EB2FF81E429BCB3D8750EC40476FBBE4463B
6A1DAA7FAD54F295EA32D0D5966531D91F182D115BB3ADC0148ED6989D2B4B38
D465DA4D272C10BB0A00001A13888A1E4E79EA3DAAA21B2AB3AEDE3EA0351A58
14A2D81D5544FB3A678A0DF2DB3AEA18BCE9BE6867386C445D0514E70DA8AAC0
CBF7395685FE9EA66D89767FF335D7CF3B56CEE2BB09DCDBD0624480B52A9938
07855D313EEA29C7D9F0563B4900E006169A5920F94A4873F5591EE6E75168E4
6B2A602EC02C153E354EF6DFC55B5D53B4C1D07E3C77E5426F8EAA89A9D7381E
2997D27DBE1203E4D1FE8A23893AFA3A20A06ED175CF61C90D2AF99A71E80C19
7C37610A75DEC881B071B9C66CA36A082F89769CCF6C623EB277585D3CFEEFDE
B618BB47CC0F89EFC5E7E1F78447EDE114F1A61F8366C81C7DEEA4C1D90DBAF7
EF344A9CC368BC2CA2E912D696BFBB3AC36B5272AD0E181A7130A9C793388626
CE391E9EB33E05CA7B26560B275E25C971931F5BB403F40E3AD6CF1C7CD8C10A
3A110186C181DEE7F4BA1E3CF901A9A2DFAE0C00DC7EEB87D88C45E9FDBA6863
DC6FFEFB25C0BAB8A9C291912E2E6E78BF9845A291A94F4CD13072AEDD4C0D8B
2545DFC7A84AC9909DA866F3021F1CA919B3AE02065AAB5CFCACB8267B706734
6414F28E1D4D92D2F00333DC6F6651AF6445BD39C9C052583F764B0BB2D8E9E1
93BF4C6072C9E3382580AAF4CD2515537FEF278A073940E01EC9DD76D209E48E
6A96C5B657DFD23A4BF54EEC4B46BDE70C3CA9B458E69364A8A8EC6EAF995649
5071434C8A80BFB19C8B8C9917DC35B53C1EEDE0EB3EC84A19BC45687A3892E6
6B341E04035EA9807D16EFCB36A37A648D192FFDDF2C8366A01054629FC351B9
F5A1F7DE7BF1E07A8DF18103D92AD43203BC03B165257E60F5ABEB8B373DABFD
0315901081B98FF338E7CE81975E631D6194889B6649ACF646BF871AD863AEEC
42BA95C80AAD31F1C5A6AD21529636DD459B24BA8861A895747F4231AE3496AB
D752BD7FDC7E1229C707CD509FA246AD007073F03E214C33B627B3AA5F0248DE
1323E4E03C56177F92D06DD29BC1A529CA920AD6F91EDFB425FFDFD586CC7E87
76289DB40B7329C6DAD080F4D6CB02389B7250DB8C1394A9449152E996F48BC9
8E960DC67524870BC379418AE74932C08F7E64FEC074CF4DED483EBFFC427DBC
688FFB47E8ED46E54876A7C7AFFE8236B7538C72C604F4E571F4C4B09514F359
507F2DD63976C02DD0046D464C766905C877F8CAEE74B8C0992D410AF8CB0580
4FD133F8DE428B57483D74DA51BE99996634C77B6801A0216AA6E1C2827F4482
396EACEEC937CB6C02CF3F46D5DB50552E6E5704886367761196A7684AEB23D4
F53C9AD52D1F1EC70E10F22175A6333E5EFEF0727E350829DC77BCC7B101244A
B5B31F5B525C2B1897C75C5D18E44D01190BA0A3183F1D97B17A41226C1AA1F4
FAD8236E7D3A6A89CF46FCC9663A4597AA82ED2AA56F5760A034196D9BDFFE15
D1BEB3E9256B864F587E1777C35C175EC404E74D26727C98487067C820DCAC28
DC02F25EC5E191523A208E49901165AC38230D8EDA4AA0527BD8793C028266EC
916B8588286A3CC42877676918408F2810BFBD88CBAF04EDEC7D5C5186C7CE0B
115F4A2903CC2C0B1391050BACBE246EE553657FB29F145C48CA285D9FBC11E0
9380F956C854C044620BE9444079BCF347474ACEB084A346BC39C88700392F0B
7079FFAE3E64F9B63733F3CCCC77CE5720EECD5E1B83CB0BD079615E744A13BD
D29168F3B952A56395977CD239FA788D27E1A1DE0A453FA7BA1567569353C6DF
DB49BB8E287F035ACEEB92C8C039D24728159F93FE76705A0CD7B04BED1FBE09
9ECF330F033A57901611EE50C2F3A2046E6EF802BFF71A1BAF51A11DCD40AA83
14B0FB949E1BB6201B9FA5C27A23905A98A36F81BC613E9C6E171C49EC6CE64B
DE79B8A9E5C7E59D79473C8EB4E8DD6EC320C47FF5CE08373412F64F4D9B5D76
4DD39372E0664D88E2111444DC8B09268D0BBAD934403BB802A2A572FF4B62A4
96B5A291D98B1B58EC7BFF6C7DF09B7633C4BC22BA2B9A84D0EA23D54FE99594
EF854D4286DA749A1575CBC95379029433154AD6D5341777EB706C179D07FE80
D50661BF19C41A32CAF500C67B9D352503AE89049BC976D3A430763F6E12D49A
3232B2B30E86D5FB31398A9428E484023D78E9DB5A87F378FECED1F150C61E42
1E414B2CD00B28DDDF8E3B81D0846BDE777DC9A81F32709239E5876B69FE6593
F7DF7238E62922113766300CDA1D708D7C6F76259248B0961A90DFDC09117D82
AA1A4AD15460340E459F183EC56DEC075D17BF0A1B0B763CB591E9E382B3D688
AC7CFA272A70FB294750CAFB73A450FAB98EAA78ACA5985C6253AB1B8D0D4077
B71C3109E0AE56324144C811C38E72F69A496A051E35ECA99C2274AED7807477
09D0E1E011F056936B520AF29D91930291E2CD77E6A92BE3245E73D4728F55D9
C56377776EBAB2E91A1A02FC009758DA8E8FF040EA590690FA54883752909A42
F36FF7ECD7087963777A81FB85EFF2FB5CF80DEEBFD0424EC99CF000F1881FE9
68ED23AE77238AEF89523752F58EC7855C26EB8C050F0190801BEEA7CA97FC42
28B21502823F76C09E14B622CAB5807C2676B1FEBD89AE6F1143DAFD0B0991C6
E66F72653BAF225D4D40969BB758B223DF98C091F4F0A78C33D3AD65C4C98335
5EE2310B2AFE038D9D04C8338E2E428A2547FF88417B2067
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY9
%!PS-AdobeFont-1.0: CMSY9 003.002
%%Title: CMSY9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY9 known{/CMSY9 findfont dup/UniqueID known{dup
/UniqueID get 5096650 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY9 def
/FontBBox {-29 -958 1146 777 }readonly def
/UniqueID 5096650 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY9.) readonly def
/FullName (CMSY9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 2 /multiply put
dup 3 /asteriskmath put
dup 20 /lessequal put
dup 26 /propersubset put
dup 27 /propersuperset put
dup 30 /precedes put
dup 32 /arrowleft put
dup 50 /element put
dup 56 /universal put
dup 57 /existential put
dup 102 /braceleft put
dup 103 /braceright put
dup 106 /bar put
dup 110 /backslash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A580F0834F28818EBF
F29D3B2C7C9AFD969BA6D3B7429E222AF78F6DE00CE2C8008A5966422936DC5A
DE549B458EB41026E123FE75E703E046F665B7DC78298A145548DEF8D579E008
39279A5208EAF898A357DF3FD9CE4450811F20B454D86B2947BEBB11EABFC62B
187B12458E022CDBAA6EDF4A89D79300F635D8CD973E35FA8D9B1240B3D30D72
4F30444BDF0B51ABA15A181A3196A6CDF9CD1D38D64C83E745A767446641991E
23EAE067609DC2E84B44D923CC98407812813D5AEF0EA21E560B31BD77D735BD
E35EAA564A570DD3294C703E16BB9F251D54407269C8B23DEAD063018D6EB748
4204A415AAC8384025FA922E7074FA7B8A6C31FD3761E7B2737D4D9C9992B7B6
DBD0CFDBD87D42E1A451FC5C7EFAAEC65D10D278470DDF42DFABC836CF15D042
6900E0DCDD36E7153BA186B8358E74F91A1D43D62EB0B821C0E97FE63F1586D0
98F01E8F6B6F2A435343A25CDD80D3AEB42DC8E5AE02F8837B84EE5EB508B02B
6980D2349984FE1A0D3ED12355D556BA483CA078B7921FB336EDAFC22AE05C1C
5614F5025B890009272DA8C838B81913C872A54F7E932237FB1BC2CE5D64CD04
2D320C8E2E610E9EE36EAC7C28C833F8A14048E751B61D0CEB342CBAAB34D104
311B421B8CE4D903D2E2518BA8B734E2637E2CA55426C4A87EEBCE637F8D71F1
54626C52083262A5A9A3B49142948BC1AC0B7698811AE81FC3D3B1C14E6C274E
CFD6C480514F3649D7725A0A14C82C9D537B1C5A9ADC816340B8B4E484AF55AA
905EA936A83FE2BE788D084469008F407447E0077417096333F163CE94CD3098
4B9712EE23120829AE2695EA63975492DB2615214B11C87ED0ADB776ED4BA0B1
40D09D1A617D4F57EE1A9B05C8D5F42AECB9C6AE67757DE6307B1A9C467123DA
773239976AB0EA052B23F263031ACABEC9EEC7A43ACD0DC2D7AD66664FB0D937
6A0F463A173E8B90B2596DD323D2350435D9D31B638112D70492F44769FC0C6B
40A291FE78AA598CAFC19E5AD195BE7264F0EC29305D36C7AB8F2A733797D75D
94C8F7AAFC49C13C108F514745A394F460294C6F3F44162BBFA878F773A5115F
062E934253B786DA2B9A6E8E843E06B97075BE99F21B330D6684998C5C340B72
09D69B655097354CB682D42120ABF5109E5522ABEC94D05E7211DACE8737A1A9
0BD3EC16F48798E67C7C85560D79366504BBFE5F7F5EC1B05B9F68F98149A02E
E53F321C213456D802C01871E9024F965258F71215F40EA71057C15E349F06A3
A016BF1B7E44DC4766FC92EE500EBF7C47D36B1EA34981EE6FE38FF4903466A8
C9020B91CFC731642003AAEB145EC0F13D6281B0838BB4236C220F6F467F7DCB
C79BB9CD5B6A180DD2ED7F94DA6B5CB833E62E898BE832DF601BFBC8148F9430
C8AC459F23EA2536E301C9DFD3FFBAF4D01E7853B60A69B5D012DCC0054C0BA2
1293D3B4EEDF7C5C78118138544A60FB1A500F72BA39E63EF5D97D68369850E6
9B6336DA577128DE68FEB71877360D97204B5F3C06E808BF95AA6D6013524BCC
85CBA9FD2CFEF383645E7E960E7AD471A6A3B8B8C3A0A0B8464836499309D82F
52004FCDB68997BAD9E4B5B881634FE1213283B6B19308BB67F2364F7ECD5534
467EF07CBE71989FFCBC6224417C0710EB3EF2676B9DE846E7FFB1AA6608EC9A
76C31724A19ABB2AD08CC102F5DE8E4E513F90A53F06D440A66B000CCAF6AD12
6F4B161B56FA5FAED65A24FA183B84F4B45407AA69624068EE0E3E47BBE973CA
C72137823F1D676131C8CD5070092CD73FC2A93E0480310E21CFB14C031206AB
411694AFE7B639ACF35C28705A115E98BC69C66F6C58E9E79902453798D76267
29B780AFB6B895B34CBEA51530E8300569EE4D500527BA294282FED81F730A46
6ED19AA5AD45852739882216EE937FC45D75116BBDBA6FF4B4423B398E383CCD
A7D705B8BA85076133E823300C3EFC9EB9399575F5F6BBF868265304B299AD77
B6B4EEA04C83E163E8CE2BFACA65F9DAAE3AD2B0F8DA1F986E6A12DDB2AFACD2
217E37B093F46FF3E20E587A9490401C2833F5844763FE2C528E151214E8CA95
018E1D8D47C9EB5FB4F0EA2A6D064680DEFD2C5489298F83B58EA7FA8CB019E0
671028C59C3E007DD86CD247889ECFA6AD6DA2433B02180DCE6ECF9E495D0976
D063A61B007233DED5E3F351D790F26D4011582735A69F37E7CCBB0AF254B925
B378522B748BD9BF152E2187DEA12BB168C42AD8D67D18567393B35DB2AD8403
5A7093EB59FC276525B8796FE81944F7F03349BB077110E182A61754ADECECD8
A5255DBADB523F3DC251A7D97F17DC76281CC632FAEB382A972D60A15FDDA57E
2F42AA338D889B47F6A3C1FADAFA8D11D63EF8D0C8C0FCE61FBD8AD34EB8DB3B
722BD86CE5B1268F704ACE82A39466DC2D96C9849B9422567FA5E728B17FAF61
59A77E9B3289DB807DF54D076139E3DFE176C3131FA4540C1542AE5AD6200FCD
B92D5DAA77DD4D3022049B6EA2A037FE96E0CEBB1608C663F1373246FA74D70A
BAE7BD37F3AC23E003204FA8270B4514DE1FDC5401B69CBC98A67A5CAB5505F2
87C242B6ECC86E88EEF44B9C79DA5F88CFADAE8B4CF437A7CBD5E0C01A9BC479
E92EA48C808820C567E74D62ED7597FCEC53DE9A0B3EBB9A3FB50AEACAB82BF9
2AA56D029357AAE016582592972ED01C0ADE565E87607F17BCF4983E3321F606
ED664B9516D404B277C2C1B0F873D469D64A9744D9C1897125FD471E71BE060B
A3A617DC8D812E184664BD83EC74EEB5197611380F2D859E1A61A14404493D04
B5537C04541E557CB5039905F37E72B762EBD2321633E12C38C409338AD5AAD3
1A507BB2B8F5235F0614D0CEC2BE44CAD504C9B2CD3E45437A493A33B9BF8A1C
3FE66B1E673449A54E8E3C3470688E94EE4404C888583F7C96B43A592D586D25
8AC1F206EE5FBF3AFF7EDF9BA91EEC6BABD573D455E0AD6802E7E23A662D4F12
FDDA00EA054CD331DF86C099C4BE8AB4EAF5D8EC1BFEFCF50302BE61E6FF26D8
1E88C544570E8D6F7D875466C70AA91D6CCD4DF4BBA34FC67191D1692D3FB76A
66F114152956A5E38345E7495BEB1A389B7D0A59624ABA784F77C1BF7728E556
F9D97D71858D61624C22C6914A3A995BD75922A2C37EF2CA91F923A4561CD3D5
2DCEACD9C3A65A9FAFFFA4822E79D6D89D6366DA6362DB16FF061840582DA35D
E4EE8308040C2DA5F298944EED470D6E4E1FF58DFDDA96C20C85E2DF2652E12B
2EFB8F890D301E8CE777678FA786E552A62A60DFC369AF4BDC069F5457FC86F5
1FB1A38A2222EEE86FE1AC9A8227663AE33217C1F381115CCD04D2F381A27E97
36D356DC64615AD63E1952B37AD4F967317D76A6DEF039CE8446AA634086BFB7
7B0B34F595B61ACEB346F51ED10ADDB7B852B5B2BCFE416D0435A7CAA4C9D9A6
152D9AD938F39E9756AC752F1604D884992BAD768C720C45479F5AD8E53A4832
1B44D6109DE4460A662DA6081465E2BE02ACBEB52259E046767DA24E1416FF44
D5AA1D303CC4249510D703CC6CD0FD7DDB078A91089FD86ACE1721F875F019B9
82D7C5B2530567F2306F47DE90EADDCD12AA1C693B1982827DC36A74C86474B7
0A8A2E084CA403AF654E2F8488806B943E38ABF544ECD45FECDC441DD970B180
FF3FFF1A50D5E22216B240A527F95DA1E43770A3867F225DD2A8AF01A965E06E
A063997C4CDC0B16B52F9B9C8B0DBA94F88F26A7A01E596DCF8F33DA3DA5B02D
2ACF771F25A1372F521A80B93DB0337886FCAC0A2E8FAE0D7E1E0C31EB43AE3D
B4C2020F322A9857A9EADFA7782CA70DE7421B9A83DE1873EED8D096701370B7
7EC33B9C104E9CC16DF8C80ED24D1F91677E355DF037621ABBB75E09ACDBEB82
30F1AFB82FAEC4D9E2DA93303F72C1078679EDDA35ABF2AB38DFF091AEB273CC
5A7B29C0164977160CA75F62BC20474C7C1F127AE7E4DE865FBCEF852698AB80
B61340CAB6F86017FEF570104E46B6FB3320E78D387CC58DF1C4FAD8570C0126
B6F54AB5BCD47904A9255366AC9C88576456D3CF605822269CC65979EC3CC740
AE3D09257BA3AC7A364A7F5EECA3E658AA20B53423553C416D98FD8100D80A30
A1B19F029B7473070D7C60CDE51BBEEFD2B45B1C82F4FE32A5BB6BB5BC32BBB8
F600ABE893B83B806A5435AE2B40E5CEA9068C6ABBCE73C9B3533520439F28F5
E171DB1DD90B2EC04A1F36767B2B97D4EC0FBF217D4E80ADA5383BADCD7E066F
5F4B23738A14F19AC7D765119AAC9AB6CD0A8AD4EAF8955CB9F5BDB0156CACFF
236D24E8A12AEBA549FAA9D7053D10AB7094B5D9B86FC7375E245EA8D7FC64B9
859A1A37C006E0449AA8DB8B89730348C71C7E014A2EF8D871AAA856407C33C9
392720173DA60850938D0537564455C3957631AC8F8C0B3B29BF6163828796E6
0944C3000B990715188203B32BC4E3FCDF173A4A9C78753AB7D76BB9A4C2DA4E
3EC638753D6FF6356EBB07D0A9E8D3F50EA5451FB6C836B9E5EBB8F1331C8CA0
B0CD271AF316502CBE87F652B5ACCD43176AAA32C6530C69E77E3C85DA496F3C
06980ACA739DECB5D986622AD81F204579218660EA791774C2D11878DE23F858
BBC4ABC7EBA01B7FEBB32BC914FEA8E5720731FD43F8A5CC53954D13455827EE
9C7BADAE8322E77EE7413D6C86E6D378FF8044F50F529E765A1CAC29E8B1D91E
CD40F70F2D4890E0FD04502933212D5AB176DB143831958605C1667B8841E770
CB4D513DF0C3182C23CA653A7A714B2A8DE29D6B203F5A9481E0CF3FF073FC6F
476B0B205136DA43650A940035A970584DD7D06B7CDA8E960186158B75FE3917
9B1D0FFE45EE1606C875DF635B80F5A9E5B67A6ED748F52A53A710A45AC20BCF
FC96755E685A3B0712D5E09D860986C61C631A8D2A505C57D57C1D4AE78C552C
DC5C9EE15B82A4C3020331B78FDEFDE53974C391F375E8118EB7B2D23DFA3F15
389043EB6F33842C82B896073760197B13D3DAC172D77779DF517AE31BAC43BF
5BD6F75B59AAA59C7EB81B776FADB720282DC06BBC9C33AF5AC0BC59F6A0044E
3898A4B5868EF32BC4F980DD863E8EDF6DE3E753A7B3E39F8E8BCB3D3BF14EDE
3395E73BD07440FCE88FB28A96878E823C1E5519650F2054EC2CF733EB8AEB0D
510E5659A3179C3FA8E31EED621BE0EA648D76C370C3CBD8043BE206F28699D7
5871DA483AA5D3580CD55902C85DB9EF5CF5D3191738FE64DB42410F5AB8ACFC
CE07E524BECA5633B082F4793002A4A7215AD1BA31159A30D72AC60EDD0B2BAF
73C9934C85C5372B47BCD3ECEE463CADC05CE8352EC1399ABE2465AA53E5965E
79400336B1F5D1401EE2DA5807F9701D1086DE505F6AD4E64DD4F3E5E90CD64D
FDD25E6FA03B679597CFB8C5C1F03641CEB7B9B40787E70BC6B063621382E3D5
1287365426E44A2EA208C26155CDF782F404CA7B3C6D379103EF4A51CA3F1343
22B04A0B55CE5A7633175838B9E50480E9B80446CD3B541362E7A10BB3C58A42
88C0FF580B4A0296073F5B6505E4FCCA5D4BA2F7E8D59BB04EC9ED4E664BC2BB
8754777594DB26DA0985663D321CCD13FB261BE8A771470DDDA783493E452A87
D0AD01AFF8EDCB7BB159F1408FBCC52F126C46234CE6BEF241B49472102598D6
91FF2DCBA2CD0E6658A61DB3591EA02E4DF202954B655C5A3C34B14CB60CF9C9
2A6683AB282DFD79B33FF3A6AA524582F174F11A5568159083496B242ACD2770
0ACE8473D363AC11250E5DCDCD3CB2281B71FCEB8AAC1367D0714796AF3BF01E
80BD4B05A0A45E6CFA6C672850B9DF113F5EB15923ED885A0E4488D4914B62A2
FAFB6A63F8AF0CF0DA498E1BA68C4150B6E59CBA80BD17026FA09920006D2075
BC6F1010D0A10648A20D8ABF8137BFCD6A5DB3606F6B3CA51E8A4645D32E5966
6DFF7537F65DA4268A86BCA5791C21F5FA9F4C2F1F6C1AFC4D4BADFA63609C4F
5F5158608E6FFD9C5BF00646C3AAB983DDA5E37A9C2EA81796B161A06201FB6F
8EACE87008EE7A008BFBA69AAC04D73A8C0447FADA0249D8861ED405537E23E7
BE68C4349FD64A14E3A53D6C6484E704BE4AD5FA0269F56D3B752A070D9872FD
A5CEE543B413F13CC4CFABCE885BA4533EA0969FDADC14DE6846B330552CFD60
A75BC8C9DDA76102E48DB6B81975A1F3FBE182CEF410841CC6164AFA0CE51FD6
8E8E6F0971277052E21126909B5EE51508306B886E945C11DFFE1C91BD0D79E4
554CC7D6A774C9B98610A1E49C3326D62F157CA9D89B56699F32DBB9D49C716D
CBDEC052133F8E18E8F3D7A59008398AF3E4E1192CFFE4D0B7D2ECC8DE2ABC1D
4DF7F2EA5EC0DD756CB2FF9F95FF10E506463D3037BABD221C08506FA603DE1C
DC45A5998921C4023E501DBA494C1F41C0955A761AC3D5B13A88EC4F0BF40756
BAE8645EA76027B8AF74726521DC129B9AED4BAE67A511EA56EE9D0D8D30C7F6
FA8BB890375A263A0BC4E9CBBBB8F8F8613A43B10E964F8CBD6BAA2B0BAA70C4
4CFAF6EBF4882B610AE13689823D37B046FD26DA85BD96B896CBDAB6662573D0
2CB87D45A86A016146513441BF7A748F1E9C2AC7172460EA628BFB22F9797905
F6DF6749F13C7F234A2CE4829D41E0F53EF3C5F52165297AAC4B5AF4747A9F53
60370B4C0110DBB42C25308F489A856B6664371FC2126BAF4710790021255653
CACDE1B9ED6AF5C696C3D8BEA4698DD9045B3004A5C4C03EA994A5445C9D4EB9
865266850047E28F2D82A08617E9283FE637CFAE4F7F261CC2D616A8C746EF23
7360553A6B434201944C04B1522533C61F615A20BA3678AF8D4BAD1FB548D82C
72D41699FB96EF40ABBABDEE633F05B4445BFC4E6E661DCBC8EC473BD2BBAF7F
75F7FC86CC7B1F3A2343EDEDF6B5F7E98A0BC4443E21611F4D807FE7F597A37A
A4DAF8A8E6D04FEFB320E0E25C61E156A72A3E4A69EDA04B0E3B72B69FC19E63
AA33A682663A8F37F4FFC1533CCA2A80DAA675DD723A7E13D9DAE3BB0F5F3E07
99BAB9B9BCFB29B73FC76EFA02F4F632690651DAAEC2B3688B636F0FCB156047
F8EF7239716BE5D3DB2FD1DAEEC11DC2D65CFBEDC1C950CA737A04FCCCA509C4
7E47664E160322366F70CCC641B9B49192AB839E0AC609AB2FDD3783095293C3
11C56740FB50D23AE9FEAF66DB13F35367B562F15161AA270EE44713881B2387
7889FD10198AD4D750390811714DAE7A8DC6F5770224E93408F8CCD4F8712A9B
3C583C983D98CCA7FF9DDDEF8AFA292781B1D7089336CA631413EA0728353E8B
3650EDED7ABB6E5DB5B85014A3A9C4C76EBB664A5B3E0F3CB2ECFBB6294F5C4F
69EA3AC8C071B122B129A28E04FE989DA9670EB6246806A516517DDBC52DC001
4C027D51EF1F98506F21E63D57FEF267B913F1ED4770D892239222F3A9035C35
FFA38D1AF3ED9A8C02235D7422695D30A2F801389DADF34CDC489EEB38089B6B
026D884EE1C24FE5785C383B988FFFEB5459A1644CA44D353503AE117E87F956
393DEF6C47D4E1C5B1A33835C9B8E1B98809DFEE43C4D6DBEF1C2B1ADE4B8F13
3B5D224C25927433D5738B0FE019CB88B1F373E4AC2BDB5BD86887FCFC55D65B
467B57C65B8040D2A098AB773CD92E7209B2CCDFC5C794347FCEBD668B69D6CA
3DF8BC572DD635CA720B6FF85C88DEB19A25ADF9EA03487D125544B2F519FB38
55614947308A8A510FF245BE47E1F593095639E91B97483486C2A0775CE1A080
9D5C2979D409E4D68BB6DFCA0130C086846BA1B1B2BFE36AF9E311D31CB4D124
C5AA3DE9B5E2972A4DA72A6BCFEC4E47AFC480BE37CA7D4588DB4957DD1E286D
45676C9FCC9C894CFD8D21F45A072A6D5CF9F29154154A7FDD41ACAE124DA8A4
942074E5E6B2DE3B1299F0A1E6B43480FB520E08468693268E4DF9E0CCAE59FC
2A788EDB101F05D6C63C6B1A85CD6A38288D1C1A551889A3D80A0C931C8377E0
7B8DF4BA5D60BD0108C6CE90294E174C6C1C9EA20C071397DA166A46A34D0D16
C0B18126B7CCCAAAA1D8E4DEB384E84DC022CB674BE0F52C606C6A9B49D53110
4D32CC103E137D4DEBFF7A5BCF585874F70E72C9830032A7F9A20980509303C5
551ED8EC9231B39B5FB61A8F1DFECAA0683EA0049B6FA40F0A9A82F8F3FB2F60
19856D4093BECB5A5ECB69E7FE0148E7802ECA32F056EEB6ACB243E7DB91DCF5
39A8967680144FDD8728BA4F707ACA3D07B8B577D80F667DC8FE40803C139014
17F23746535C9E809CA4BA599E76A6BDA18607144E9A7C71B40F50E5980D0C4A
2581C795182654CAB7839C8F3DD44881BCB5578F784518673E0B2E9590738FF9
EA077D4A18B47E1040846188611E97681184A1A39F0B9C78FF3A5CFA5F536D93
EED080DEF7DC1DC786242D3379EF5C6288EE330447C3AE204AA16B307126AE41
793DED550DFF314CCFC3F6A4A7B9CDA2DC32B7DDD1DB24C891DBDB90BC655B97
31BE2399D81521604BE019A51F73BAE6E359916359667E555B49F1C69135CCFD
D50D6F4762DA50C8A65D390127F4DF515B118A0F5D31AAF7268B7519BA011D62
6CA54FF2C75C00DB1F7357F1AC9EAFDB2F0771D71F074178370223855DC1333A
2703D977B705F305B622529E7F2FF434988F015DC16A2C92D762D74141ACB66D
BE7266081B2F19F2138799737AD4449CD4D9DA8E0412CF169FFDAC20698DCD60
6297056E9DE05FC7D1C99FA8FEAAD87981D6DA7253C9EEC434FCFAAF97CC2F07
2078F77E2F408CD1A3BBD41A16B184DF51B5E3A5A5FAFB74D48ADB5ED52AA08C
E0EE2C58FFE6EA877731D336B7A0791DE7B16B863E220CF83B9767B1FD704139
AC8E3B2FFF2D163FD9EE075454F29B2A0C5C48019A4CBBB9365F94CBEAB33CBB
15F89E4D62EB763E159381FF74F6A6985AD67E6AE84D0D33185417E7822FF86F
90A826E52A59AD66E3428FFFD3F717B2D5A809A66FA5AA9E0754E893C33BC711
D5FDDCDB18A84ED529A36447BE82C08296FD257C66FB3F57E22AC744A1FDE78D
9AA4308404F93E83462DE10C0458DDF3D9B2BA7143BA20E8D6D8489232A22742
FA9758EC30716D7003D503378891F9BCACAF4A5576C6142BE269028334BD8FD3
FD39D4A1C7E52B30CB24CC6793777EFDB3A1F7601CBF29AD70CABA0898146147
3D841C8FAA83F60CBC4AEBAA19E916E392B3B5C5476947FF768F4F8F52F0A870
21F79964799EAB5B65CC35BE46E23A8D14883A4C43BC98EDC9933EC29244D93D
52E6882BF6D133E8B8FDEE2CE7D01E55B42B6D4AED6E086891EE6959C71604B5
B1A119C5FF807FFC40721894BB7ABA98EBBA186BD68712A2C033531085E9588A
DB63BDBECC4CCF5D149A12C99E9E446441F26F7B3EB923B57ACDECE9EE757BE6
8F4CC9A2E6203768B31E1D8D769132A592F4E3AE4AA277486CC0EC0364CA4541
3F44FBA6489394F4D5E6BB196B67F0AB84A69F73C88A33D71F90B34B28CCA729
27B1E21F2F276ACD5E2891445DBBFC00FBA82B92139F2455A8380954888961F9
26B70499D02A3C5D9247DCC59E67DF56C8161B32EC4C527C1643AD250A5865FA
47FB12E237291CB6084C2BF2CAF5CE7E36D7B4B9D0AD576A2B4975958F7CC2F1
E3B37A5E7DE5AF8BADA0651EEF154447705E17DF0113154610E32BFEB3F8FBFF
71A89E4D5F2B97EB83E7867C4FE50599B22B48A92ED2C9A6DBB6CB0E17FBF0DE
E934204B617CE584B2D5784F435F098D346360387A326E7894CE37DC906C93D8
FB2D22C38AB43D98D92408DFDA1E4AF80DCD8C6379526CDFFBC6C0F58BA86986
B37CD17A60882A40EF0D7C416ADE17666AB95F3E617887BEAD99B9236D34842C
A5273B3261326810C730E8F3719F067A2DD059E1B76F934EA0AAB9ED9DB71231
ECA8B67B60973EFF654A1D78B19D2CEEB763F4E02A5A1B8F12F3842A79416B04
9EE9CE061003481A898095C4C17DFDDE419459F0C94FD690C3433CC1AF74F5CB
6006EB5BD2A35E16CC6FBF9CA63E69CB3FDCF17F76C62E6CFAA24322FF55BB51
C98A4BA95210AD112E6185C786E629B2906E91E233B6CE282FCE92CDC804E403
A9771498FEE04B8BE7181376DC848ECED89D6BAD49815AD4646742761EB70076
A2A5E38BE8DB80964C6906F5735FC4117FC719BB1AD143039A0460EE3CC97CB9
F1D9DEC11C073709468D9A1BB9FF5344E807D10AB086B894E1E4CF8A3D7D2726
9998F96E6058F77997100EC07B7D842A9101AD3B278EDADA3845B369DC29053D
BDD2F29E6056CCFEB2786AAFF08E59FF2A6D83FEE73AB0DD27B31392E7368548
A5FFE71A496D1CC717FE8536086A4CBD2967A05FB03834C8AC42AE15190C3854
560CE84509E9FBB11489B9E687C1DCC6119E29EE2558D7843571A91FD8B5F6EC
309825B85A91345C8F3170522CF418B1013E8E7AAF7A6D6C4B871619FFB54E49
D0116EE501993C6EE6343FD15E6440AF63614F9A339046CD35EDA4632F8AFE29
8D1C58A38056CD68694DFA7ACA0725F9DB32F2C3A8A651CBB7D295BBBD6BEE18
3D378652C5BD49981551C31F102A7E3DB4C20B5E946417C1EA1FFE1DC519EEE9
A9ED3D12D37935C0E21394129DDABCDA0DA19638B6032581AFC1D67A1CE3C20F
B49172433A8A4E87B7A5C16BE2EFB18F8FBBF0FD60C78CD01F53225B626BEA63
644C2C332538A7C35B63E38CA2879856F0899C1D9B0FBB3E6DF0B961968D17E2
D2A863933581E4A00F53DE0D2F9D2D58D8B21CA02F9BD94B714A767A563C36D4
C9556C03DCFCD5A6890D0052D99DC1F3A1B12A316BEB219B824FAD9DF299555E
34634B52F044A5AF629F9291389BEAE67D45574A84D9EF52AA6F5EA0E3DE3D2C
135C39300DB65B58B39D874EC95942BEDC5CA83D3AFE4947521B004FAB1689A2
90F5FE825A5CFD16D9AC88F351C7755FA62DA5714DC0DAE31BC2FB7DA385D90A
8A6CBE861B82DE0F0EFD85E985C79C508FB12930D6B0E8A53C562E906EEF5826
F008C7643ED78C303FB98016D1815E13EC38AC4F15BACEA7D15EC62FCC99506E
858F1A2D98B700522CB845AB92FF491515915B13BBBC8FD2A663EB84A7B5EAA2
C90C6940227EFF2309EF379CE5A5834654DECCEED6C658F245EE4E0FD890A3DC
7A91DDF05B020DC4E800
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39139632 55387786 1000 600 600 (sig-alternate.dvi)
@start /Fa 197[42 58[{}1 49.8132 /LASY6 rf /Fb 134[41
41 2[46 25 36 36 1[46 46 46 66 25 2[25 46 46 25 41 46
41 46 46 12[51 4[66 8[56 2[61 1[56 11[46 46 46 46 46
2[23 46[{ TeXBase1Encoding ReEncodeFont }31 91.3242 /Times-Italic
rf /Fc 219[58 36[{}1 74.7198 /MSBM10 rf /Fd 164[85 6[64
64 2[81 80[{}4 74.7198 /CMEX9 rf /Fe 139[44 34 45 1[42
47 46 56 3[23 2[40 42 3[46 16[55 3[51 29[24 46[{}14 74.7198
/CMCSC10 rf /Ff 146[51 1[31 24 22 5[27 32[43 43 65[{}7
41.511 /CMMI5 rf /Fg 206[28 49[{}1 41.511 /CMR5 rf /Fh
130[39 1[39 1[39 39 39 1[39 39 39 39 39 39 39 39 1[39
2[39 39 1[39 39 39 39 39 39 19[39 15[39 39 39 8[39 39
1[39 39 39 39 39 1[39 39 40[{}35 74.7198 /CMTT9 rf /Fi
149[19 51[0 3[42 1[18 48[{}4 49.8132 /CMSY6 rf /Fj 135[35
44 1[37 24 29 29 2[31 38 54 20 33 25 22 1[30 30 29 32
28 27 34 13[38 2[39 3[42 5[39 3[46 46 65[{}26 49.8132
/CMMI6 rf /Fk 194[47 3[30 30 4[30 30 30 30 4[47 1[24
24 1[47 38[{}11 49.8132 /CMR6 rf /Fl 168[55 2[37 33 3[48
3[44 6[48 44 67[{ TeXBase1Encoding ReEncodeFont }7 66.4176
/Times-Italic rf /Fm 134[33 33 48 33 33 18 26 22 33 33
33 33 52 18 33 1[18 33 33 22 29 33 29 33 29 8[48 2[48
41 37 2[37 2[59 7[41 1[44 1[48 7[33 1[33 1[33 2[33 33
33 18 17 22 17 4[22 2[33 33[37 2[{ TeXBase1Encoding ReEncodeFont }46
66.4176 /Times-Roman rf /Fn 133[31 37 35 51 35 41 25
31 32 1[39 39 43 63 20 35 1[24 39 35 24 35 39 35 35 39
9[77 57 57 55 43 56 1[52 59 57 69 48 1[40 30 57 59 50
52 58 55 1[57 3[59 1[24 24 1[39 39 39 39 39 39 39 39
39 1[24 27 24 59 1[31 31 27[43 47 11[{}64 74.7198 /CMTI9
rf /Fo 134[47 47 64 47 49 34 35 36 1[49 44 49 74 25 47
1[25 49 44 27 41 49 39 49 43 12[62 49 1[66 1[66 1[84
53 1[46 33 69 1[56 58 68 64 63 67 1[42 4[25 44 44 44
44 44 44 44 44 44 3[29 25 2[34 34 27[49 52 11[{}55 74.7198
/CMBX9 rf /Fp 134[38 44 1[37 44 28 36 35 1[39 37 46 68
23 40 1[26 1[37 1[36 40 33 33 41 10[45 1[45 47 2[49 3[52
2[34 2[49 1[63 55 1[58 2[60 38 60 21 21 11[38 46[{}36
74.7198 /CMMI9 rf /Fq 129[38 1[77 38 34 41 41 55 41 43
30 30 30 41 43 38 43 64 21 41 23 21 43 38 23 34 43 34
43 38 3[21 1[21 47 58 58 79 58 58 55 43 57 60 52 60 58
70 48 60 39 28 58 60 50 52 59 55 54 58 1[36 1[60 2[21
38 38 38 38 38 38 38 38 38 38 38 21 26 21 60 1[30 30
21 60 64 1[64 38 21 13[38 2[21 1[64 43 43 45 11[{}89
74.7198 /CMR9 rf /Fr 134[50 50 72 50 55 33 39 44 1[55
50 55 83 28 55 33 28 55 50 33 44 55 44 55 50 7[72 72
100 72 72 66 55 72 1[61 78 72 94 66 78 1[39 1[78 61 66
72 72 66 72 6[33 1[50 50 50 50 50 50 50 50 2[25 33 42[55
2[{ TeXBase1Encoding ReEncodeFont }58 99.6264 /Times-Bold
rf /Fs 134[42 1[60 42 1[23 42 28 2[46 46 1[18 1[18 18
46 46 23 46 1[42 46 46 11[60 51 55 4[60 1[46 55 7[60
15[46 46 46 46 3[23 44[{ TeXBase1Encoding ReEncodeFont }30
83.022 /Helvetica rf /Ft 135[50 2[55 28 50 3[55 55 83
22 1[22 22 55 55 1[55 55 50 1[55 8[66 9[72 10[72 2[101
17[28 46[{ TeXBase1Encoding ReEncodeFont }21 99.6264
/Helvetica rf /Fu 145[38 3[21 2[38 38 44[43 43 5[51 17[77
1[60 2[60 60 5[60 16[38 60 1[60{}15 74.7198 /CMSY9 rf
/Fv 134[83 3[91 50 83 58 1[91 91 91 133 42 2[42 1[91
50 83 91 83 91 83 23[42 27[50 45[{ TeXBase1Encoding ReEncodeFont }20
149.44 /Helvetica-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -98 111 a Fv(Identify)41 b(failure-inducing)h
(combinations)g(f)m(or)g(m)m(ultiple)e(faults)3899 37
y Fu(\003)769 455 y Ft(Xintao)29 b(Niu)261 542 y Fs(State)24
b(K)m(e)n(y)f(Labor)o(ator)r(y)h(f)n(or)e(No)o(v)n(el)h(Softw)o(are)789
629 y(T)-10 b(echnology)666 717 y(Nanjing)24 b(Univ)n(ersity)729
804 y(China,)g(210023)389 891 y Ft(niuxintao@smail.nju.edu.cn)2580
455 y(Changhai)30 b(Nie)2144 542 y Fs(State)24 b(K)m(e)n(y)f(Labor)o
(ator)r(y)h(f)n(or)e(No)o(v)n(el)h(Softw)o(are)2672 629
y(T)-10 b(echnology)2549 717 y(Nanjing)24 b(Univ)n(ersity)2612
804 y(China,)g(210023)2333 891 y Ft(changhainie@nju.edu.cn)-152
1202 y Fr(ABSTRA)-5 b(CT)-152 1322 y Fq(Com)n(binatorial)35
b(testing\(CT\))f(is)g(pro)n(v)n(en)e(to)h(b)r(e)g(e\013ectiv)n(e)g(to)
g(re-)-152 1409 y(v)n(eal)e(the)f(p)r(oten)n(tial)h(failures)h(caused)f
(b)n(y)f(the)g(in)n(teraction)h(of)g(the)-152 1496 y(inputs)17
b(or)g(options)h(of)g(the)f(system)g(under)f(test\(SUT\).)h(A)f(k)n(ey)
h(prob-)-152 1583 y(lem)32 b(in)g(CT)g(is)g(to)g(isolate)h(the)e
(failure-inducing)h(in)n(teractions)g(of)-152 1671 y(the)g(related)h
(failure)h(as)f(it)g(can)g(facilitate)h(the)e(debugging)h(e\013ort)-152
1758 y(b)n(y)e(reducing)h(the)f(scop)r(e)h(of)h(co)r(de)f(that)g(needs)
f(to)h(b)r(e)g(insp)r(ected.)-152 1845 y(Man)n(y)27 b(algorithms)h(has)
f(b)r(een)g(prop)r(osed)g(to)g(iden)n(tify)g(the)f(failure-)-152
1932 y(inducing)g(in)n(teractions,)i(ho)n(w)n(ev)n(er,)f(most)g(of)h
(these)e(studies)h(either)-152 2019 y(just)33 b(consider)g(the)g
(condition)f(of)i(one)f(fault)g(or)g(ignore)h(masking)-152
2107 y(e\013ects)25 b(among)g(m)n(ultiple)f(faults)h(whic)n(h)f(can)h
(bias)g(their)f(iden)n(ti\014ed)-152 2194 y(results.)33
b(In)20 b(this)g(pap)r(er,)i(w)n(e)f(analysed)f(ho)n(w)h(the)f(masking)
h(e\013ect)f(of)-152 2281 y(m)n(ultiple)26 b(faults)h(a\013ect)f(on)g
(the)g(isolation)h(of)g(failure-inducing)f(in-)-152 2368
y(teractions.)35 b(W)-6 b(e)23 b(further)g(giv)n(e)h(a)g(strategy)g(of)
h(selecting)f(test)g(cases)-152 2455 y(to)g(alleviate)g(this)g(impact.)
33 b(The)24 b(k)n(ey)e(to)i(the)f(strategy)g(is)h(to)g(prune)-152
2542 y(these)k(test)f(cases)i(that)e(ma)n(y)g(trigger)h(masking)g
(e\013ect)f(and)g(gener-)-152 2630 y(ate)d(no-masking-e\013ect)f(ones)h
(to)g(test)g(the)f(in)n(teractions)h(supp)r(osed)-152
2717 y(to)34 b(b)r(e)e(tested)h(in)g(these)g(pruned)f(test)h(cases.)58
b(The)33 b(test-case)h(se-)-152 2804 y(lecting)26 b(pro)r(cess)f(rep)r
(eated)g(un)n(til)g(w)n(e)g(get)g(enough)g(information)h(to)-152
2891 y(isolate)20 b(the)e(failure-inducing)h(in)n(teractions.)33
b(W)-6 b(e)18 b(conducted)f(some)-152 2978 y(empirical)k(studies)e(on)g
(sev)n(eral)h(op)r(en-source)f(GNU)g(soft)n(w)n(are.)34
b(The)-152 3065 y(result)20 b(of)h(the)e(studies)h(sho)n(ws)h(that)e(m)
n(ultiple)h(faults)h(do)e(exist)h(in)g(re-)-152 3153
y(al)j(soft)n(w)n(are)g(and)e(our)g(approac)n(h)h(can)f(assist)i(com)n
(binatorial-based)-152 3240 y(failure-inducing)33 b(iden)n(tifying)g
(metho)r(ds)g(to)g(get)h(a)f(b)r(etter)g(result)-152
3327 y(when)26 b(handling)f(m)n(ultiple)g(faults)i(in)e(SUT.)-152
3606 y Fr(Categories)g(and)g(Subject)i(Descriptors)-152
3726 y Fq(D.2.5)32 b([)p Fo(Soft)n(w)n(are)i(Engineering)q
Fq(]:)44 b(T)-6 b(esting)31 b(and)e(debugging|)-152 3814
y Fn(Debugging)g(aids,testing)f(to)l(ols)p -152 3954
997 4 v -152 4010 a Fu(\003)-113 4043 y Fq(This)e(w)n(ork)h(w)n(as)g
(supp)r(orted)e(b)n(y)g(the)h(National)h(Natural)f(Science)-152
4118 y(F)-6 b(oundation)34 b(of)h(China)g(\(No.)61 b(61272079\),)39
b(the)34 b(Researc)n(h)g(F)-6 b(und)-152 4193 y(for)41
b(the)f(Do)r(ctoral)i(Program)f(of)g(Higher)f(Education)h(of)g(China)
-152 4267 y(\(No.20130091110032\),)49 b(the)40 b(Science)h(F)-6
b(und)39 b(for)i(Creativ)n(e)h(Re-)-152 4342 y(searc)n(h)18
b(Groups)g(of)h(the)e(National)i(Natural)e(Science)h(F)-6
b(oundation)17 b(of)-152 4417 y(China\(No.)43 b(61321491\),)31
b(and)d(the)g(Ma)t(jor)i(Program)f(of)g(National)-152
4492 y(Natural)d(Science)f(F)-6 b(oundation)25 b(of)h(China)g(\(No.)34
b(91318301\))-152 4873 y Fm(Permission)26 b(to)f(mak)o(e)h(digital)i
(or)d(hard)g(copies)i(of)e(all)h(or)f(part)g(of)g(this)h(w)o(ork)f(for)
-152 4948 y(personal)f(or)f(classroom)g(use)f(is)g(granted)j(without)e
(fee)h(pro)o(vided)g(that)f(copies)h(are)-152 5022 y(not)c(made)f(or)g
(distrib)o(uted)i(for)e(pro\002t)g(or)g(commercial)i(adv)n(antage)h
(and)d(that)h(copies)-152 5097 y(bear)e(this)g(notice)g(and)g(the)f
(full)h(citation)i(on)d(the)h(\002rst)e(page.)22 b(T)-5
b(o)16 b(cop)o(y)i(otherwise,)g(to)-152 5172 y(republish,)g(to)e(post)f
(on)h(serv)o(ers)g(or)g(to)g(redistrib)o(ute)i(to)e(lists,)g(requires)i
(prior)e(speci\002c)-152 5246 y(permission)i(and/or)h(a)e(fee.)-152
5321 y Fl(W)n(OODST)o(OCK)h Fm('97)f(El)g(P)o(aso,)f(T)-5
b(e)o(xas)18 b(USA)-152 5396 y(Cop)o(yright)i(20XX)d(A)m(CM)g
(X-XXXXX-XX-X/XX/XX)g(...$15.00.)2040 1202 y Fr(General)25
b(T)-9 b(erms)2040 1322 y Fq(Reliabilit)n(y)j(,)26 b(V)-6
b(eri\014cation)2040 1517 y Fr(K)n(eyw)o(ords)2040 1637
y Fq(Soft)n(w)n(are)42 b(T)-6 b(esting,)45 b(Com)n(binatorial)d(T)-6
b(esting,)45 b(failure-inducing)2040 1724 y(com)n(binations,)26
b(Masking)g(e\013ects)2040 1919 y Fr(1.)99 b(INTR)m(ODUCTION)2115
2027 y Fq(With)29 b(the)g(increasing)h(complexit)n(y)f(and)g(size)h(of)
g(mo)r(dern)f(soft-)2040 2114 y(w)n(are,)23 b(man)n(y)c(factors,)k(suc)
n(h)d(as)g(input)g(parameters)g(and)g(con\014gura-)2040
2201 y(tion)e(options,)i(can)d(in\015uence)g(the)g(b)r(eha)n(viour)g
(of)i(the)e(system)h(under)2040 2288 y(test\(SUT\).)23
b(The)h(unexp)r(ected)e(faults)i(caused)g(b)n(y)e(the)h(in)n(teraction)
2040 2376 y(among)34 b(these)e(factors)j(can)d(mak)n(e)h(testing)g(suc)
n(h)g(soft)n(w)n(are)h(a)f(big)2040 2463 y(c)n(hallenge)c(if)h(the)e
(in)n(teraction)h(space)g(is)g(to)r(o)g(large.)44 b(One)28
b(remedy)2040 2550 y(for)34 b(this)e(problem)h(is)g(com)n(binatorial)h
(testing,)g(whic)n(h)f(systemat-)2040 2637 y(ically)j(sample)h(the)e
(in)n(teraction)g(space)h(and)f(select)i(a)e(relativ)n(ely)2040
2724 y(small)j(size)g(of)f(test)g(cases)h(that)e(co)n(v)n(er)h(all)h
(the)e(v)l(alid)h(iterations)2040 2811 y(with)e(the)f(n)n(um)n(b)r(er)f
(of)i(factors)h(in)n(v)n(olv)n(ed)e(in)g(the)g(in)n(teraction)h(no)2040
2899 y(more)29 b(than)e(a)h(prior)h(\014xed)e(in)n(teger,)i(i.e.,)h
(the)d Fn(str)l(ength)37 b Fq(of)29 b(the)e(in-)2040
2986 y(teraction.)2115 3073 y(Once)41 b(failures)h(are)g(detected,)j
(it)c(is)h(desired)f(to)g(isolate)i(the)2040 3160 y(failure-inducing)24
b(in)n(teractions)g(in)g(these)g(failing)h(test)f(cases.)35
b(This)2040 3247 y(task)d(is)g(imp)r(ortan)n(t)f(in)h(CT)g(as)h(it)e
(can)h(facilitate)i(the)d(debugging)2040 3334 y(e\013ort)26
b(b)n(y)g(reducing)f(the)h(co)r(de)h(scop)r(e)f(that)g(needed)f(to)i
(insp)r(ected.)2040 3422 y(Man)n(y)g(algorithms)h(has)f(b)r(een)g(prop)
r(osed)g(to)g(iden)n(tify)f(the)h(failure-)2040 3509
y(inducing)18 b(in)n(teractions)g(in)g(SUT,)g(whic)n(h)g(include)g
(approac)n(hes)g(suc)n(h)2040 3596 y(as)k(building)e(classi\014cation)j
(tree)e(mo)r(del)g([17],)j(generating)e(one)f(test)2040
3683 y(case)26 b(one)g(time)g([12],)h(ranking)e(suspicious)h(in)n
(teractions)g(based)g(on)2040 3770 y(prior)e(rules[8],)i(using)e
(graphic-based)g(deduction)f([10])i(and)f(so)g(on.)2040
3858 y(These)f(approac)n(hes)g(can)g(b)r(e)g(partitioned)f(in)n(to)h(t)
n(w)n(o)g(categories)h([5]:)2040 3945 y Fn(adaptive)6
b Fq({tests)36 b(cases)g(are)g(c)n(hosen)f(based)g(on)g(the)f(outcomes)
i(of)2040 4032 y(the)31 b(executions)h(of)g(prior)g(tests)g(or)f
Fn(nonadaptive)6 b Fq({test)33 b(cases)g(are)2040 4119
y(c)n(hosen)26 b(indep)r(enden)n(t)d(and)i(can)h(b)r(e)f(executed)g
(parallel.)2115 4206 y(While)i(all)g(these)g(approac)n(hes)g(can)f
(help)h(dev)n(elop)r(ers)f(to)h(isolate)2040 4293 y(the)32
b(failure-inducing)g(factors)i(in)e(failing)i(test)e(cases,)j(in)e(our)
f(re-)2040 4381 y(cen)n(tly)26 b(studies)g(on)g(sev)n(eral)h(op)r
(en-source)f(soft)n(w)n(are,)i(ho)n(w)n(ev)n(er,)f(w)n(e)2040
4468 y(found)19 b(these)f(approac)n(hes)h(su\013ered)g(from)g
Fn(masking)j(e\013e)l(cts)27 b Fq(of)19 b(m)n(ul-)2040
4555 y(tiple)38 b(faults)h(in)e(SUT.)h(A)f(masking)h(e\013ect)g([6,)k
(18])d(is)f(an)g(e\013ect)2040 4642 y(that)26 b(some)i(failures)g(prev)
n(en)n(ts)e(test)g(cases)i(from)g(normally)f(c)n(hec)n(k-)2040
4729 y(ing)h(com)n(binations)h(that)e(are)i(supp)r(osed)e(to)h(b)r(e)g
(tested.)41 b(T)-6 b(ak)n(e)28 b(the)2040 4816 y(Lin)n(ux)h(command{)h
Fn(Gr)l(ep)36 b Fq(for)31 b(example,)g(w)n(e)g(noticed)e(that)h(there)
2040 4904 y(are)e(t)n(w)n(o)g(di\013eren)n(t)f(faults)h(rep)r(orted)f
(in)g(the)g(bug)g(trac)n(k)n(er)g(system.)2040 4991 y(The)g(\014rst)f
(one)2500 4959 y Fk(1)2562 4991 y Fq(claims)i(that)e(Grep)h
(incorrectly)g(matc)n(h)f(unico)r(de)2040 5078 y(patterns)17
b(with)h(')p Fu(n)p Fp(<)p Fu(n)p Fp(>)p Fq(',)j(while)d(the)g(second)f
(one)3471 5046 y Fk(2)3524 5078 y Fq(claims)i(a)f(incom-)2040
5165 y(patibilit)n(y)h(b)r(et)n(w)n(een)g(option)g('-c')g(and)g('-o'.)
33 b(When)18 b(w)n(e)i(put)e(this)h(t)n(w)n(o)p 2040
5206 V 2044 5260 a Fk(1)2078 5291 y Fq(h)n(ttp://sa)n(v)l(annah.gn)n
(u.org/bugs/?29537)2044 5346 y Fk(2)2078 5378 y Fq(h)n(ttp://sa)n(v)l
(annah.gn)n(u.org/bugs/?33080)p eop end
%%Page: 2 2
TeXDict begin 2 1 bop -152 -69 a Fq(scenario)23 b(in)n(to)f(one)f(test)
h(case)g(only)g(one)f(fault)h(information)h(will)g(b)r(e)-152
19 y(observ)n(ed,)31 b(whic)n(h)g(means)f(another)g(fault)h(is)g(mask)n
(ed)e(b)n(y)h(the)f(ob-)-152 106 y(serv)n(ed)20 b(one.)32
b(This)21 b(e\013ect)e(w)n(as)i(\014rstly)e(in)n(tro)r(duced)g(b)n(y)g
(Dumllu)g(and)-152 193 y(Ylimaz)27 b(in)g([6],)h(in)e(whic)n(h)h(they)e
(found)i(that)f(the)g(masking)h(e\013ects)-152 280 y(in)j(CT)g(can)g
(mak)n(e)f(traditional)h(co)n(v)n(ering)g(arra)n(y)f(failed)i
(detecting)-152 367 y(some)26 b(com)n(binations)f(and)f(they)f(prop)r
(osed)i(an)f(approac)n(h)h(to)g(w)n(ork)-152 454 y(around)38
b(them.)70 b(Their)38 b(recen)n(t)g(w)n(ork)g([18])h(further)e
(empirically)-152 542 y(studied)26 b(the)g(impacts)h(on)f(the)g
(failure-inducing)g(com)n(binations)h(i-)-152 629 y(den)n(tifying)c
(approac)n(h)h(\(F)n(CI)f(approac)n(h)h(for)g(short\):)33
b(classi\014cation)-152 716 y(tree)j(approac)n(h\(CT)-6
b(A)35 b(for)h(short\)[17],)k(of)c(whic)n(h)f(CT)-6 b(A)36
b(has)f(t)n(w)n(o)-152 803 y(v)n(ersions,)26 b(i.e.,)h(ternary-class)f
(and)f(m)n(ultiple-class.)-77 890 y(As)j(kno)n(wn)g(that)h(masking)f
(e\013ects)h(negativ)n(ely)g(a\013ect)f(the)g(p)r(er-)-152
977 y(formance)k(of)f(F)n(CI)g(approac)n(hes,)h(a)f(natural)g(question)
f(is)h(ho)n(w)g(do)-152 1065 y(this)h(e\013ect)f(bias)h(the)g(results)g
(of)g(F)n(CI)g(approac)n(hes)f(so)i(that)e(they)-152
1152 y(cannot)d(get)g(the)g(results)h(as)f(accuracy)g(as)h(exp)r
(ected.)41 b(In)27 b(this)h(pa-)-152 1239 y(p)r(er,)21
b(w)n(e)g(formalized)g(the)e(pro)r(cess)i(of)f(iden)n(tifying)g
(failure-inducing)-152 1326 y(com)n(binations)33 b(under)e(the)h
(circumstance)h(that)f(masking)h(e\013ects)-152 1413
y(exist)d(in)f(SUT)g(and)g(try)g(to)h(answ)n(er)g(this)f(question.)46
b(One)29 b(insigh)n(t)-152 1500 y(from)k(the)e(formalized)j(analysis)e
(is)h(that)e(w)n(e)h(cannot)g(completely)-152 1588 y(get)21
b(a)n(w)n(a)n(y)g(from)h(the)e(impact)h(of)g(the)g(masking)g(e\013ect)f
(ev)n(en)g(if)i(w)n(e)f(do)-152 1675 y(exhaustiv)n(e)g(testing.)33
b(F)-6 b(urthermore,)23 b(b)r(oth)e(ignoring)h(the)g(masking)-152
1762 y(e\013ects)k(and)g(regarding)g(m)n(ultiple)g(faults)h(as)f(one)g
(fault)g(is)h(harmful)-152 1849 y(for)g(F)n(CI)e(pro)r(cess.)-77
1936 y(Based)30 b(on)f(the)f(insigh)n(t)h(w)n(e)h(prop)r(osed)f(a)g
(strategy)h(to)f(alleviate)-152 2023 y(this)k(impact.)54
b(This)33 b(strategy)f(adopts)g(the)g(divide)g(and)g(conquer)-152
2111 y(framew)n(ork,)39 b(i.e.,)f(separately)e(handle)e(eac)n(h)h
(fault)g(in)g(SUT.)g(F)-6 b(or)-152 2198 y(a)35 b(particular)f(fault)h
(under)e(analysis,)k(w)n(e)e(discard)f(the)g(test)g(cas-)-152
2285 y(es)d(that)e(trigger)i(faults)g(di\013eren)n(t)e(from)i(the)f
(one)g(under)f(analysis)-152 2372 y(and)24 b(only)f(k)n(eep)g(those)h
(that)f(either)h(pass)g(or)g(trigger)h(the)e(exp)r(ected)-152
2459 y(fault.)48 b(As)30 b(the)f(test)h(cases)h(discarding)f
(manipulation)g(can)g(mak)n(e)-152 2547 y(F)n(CI)25 b(approac)n(hes)g
(lose)h(some)f(information)h(that)e(needed)g(to)h(mak)n(e)-152
2634 y(them)17 b(normally)h(w)n(ork,)h(w)n(e)f(will)h(generate)f
(additional)g(test)f(cases)i(to)-152 2721 y(comp)r(ensate)26
b(for)f(the)g(loss.)35 b(It)25 b(is)g(noted)f(that)h(the)f(additional)i
(test)-152 2808 y(cases)c(generating)f(criteria)g(v)l(ary)f(in)g
(di\013eren)n(t)f(F)n(CI)i(approac)n(hes)f(w)n(e)-152
2895 y(c)n(hose.)34 b(F)-6 b(or)21 b(example,)h(for)g(the)f(CT)-6
b(A,)22 b(w)n(e)g(will)g(generate)g(more)g(test)-152
2982 y(cases)f(to)g(k)n(eep)e(as)h(the)g(same)h(co)n(v)n(erage)f(as)h
(p)r(ossible)g(after)g(w)n(e)f(delet-)-152 3070 y(ing)26
b(some)h(unsatis\014ed)e(test)h(cases)g(from)h(original)g(co)n(v)n
(ering)f(arra)n(y)-6 b(.)-152 3157 y(While)25 b(for)g(the)f(one)h(fact)
g(one)f(time)h(approac)n(h\(OF)n(OT)e(for)j(short\),)-152
3244 y(w)n(e)i(will)g(rep)r(eat)f(generating)g(test)g(case)g(un)n(til)f
(w)n(e)i(\014nd)d(a)i(test)g(case)-152 3331 y(can)22
b(test)f(the)g(\014xed)g(part)g(as)h(w)n(ell)h(as)f(not)f(trigger)h
(unsatis\014ed)f(fault)-152 3418 y(or)26 b(un)n(til)f(a)h(prior)g
(ending)f(criteria)i(is)f(met.)-77 3505 y(T)-6 b(o)31
b(ev)l(aluate)g(the)f(p)r(erformance)h(of)g(our)g(strategy)-6
b(,)32 b(w)n(e)f(applied)-152 3593 y(our)c(strategy)f(on)h(three)f(F)n
(CI)g(approac)n(hes,)i(whic)n(h)e(are)h(CT)-6 b(A)26
b([17],)-152 3680 y(OF)n(OT)e([12],)i(FIC)e([20])h(resp)r(ectiv)n(ely)
-6 b(.)34 b(The)24 b(sub)t(jects)g(w)n(e)h(used)e(are)-152
3767 y(sev)n(eral)31 b(op)r(en-source)e(soft)n(w)n(are)j(with)d(the)h
(dev)n(elop)r(ers')g(forum)g(in)-152 3854 y(Source-forge)23
b(net.)33 b(Through)21 b(studying)g(their)h(bug)f(rep)r(orts)i(in)e
(the)-152 3941 y(bug)26 b(trac)n(k)n(er)g(system)g(as)g(w)n(ell)i(as)e
(their)g(user's)h(man)n(ual)f(guide,)g(w)n(e)-152 4028
y(built)34 b(the)f(testing)h(mo)r(del)g(whic)n(h)g(can)f(repro)r(duce)h
(the)f(rep)r(orted)-152 4116 y(bugs)i(with)g(sp)r(eci\014c)h(test)f
(cases.)64 b(W)-6 b(e)34 b(then)h(applied)g(the)f(tradi-)-152
4203 y(tional)d(F)n(CI)f(approac)n(hes)g(and)f(their)h(v)l(ariation)g
(augmen)n(ted)g(with)-152 4290 y(our)37 b(strategy)f(to)h(iden)n(tify)f
(the)g(failure-inducing)g(com)n(binations)-152 4377 y(in)g(the)f(sub)t
(jects)h(resp)r(ectiv)n(ely)-6 b(.)63 b(The)36 b(results)g(of)g(our)g
(empirical)-152 4464 y(studies)31 b(sho)n(ws)g(that)g(approac)n(hes)f
(augmen)n(ted)g(with)h(our)g(strate-)-152 4552 y(gy)26
b(iden)n(ti\014ed)g(failure-inducing)g(com)n(binations)h(more)g
(accurately)-152 4639 y(than)j(than)f(traditional)i(ones,)h(whic)n(h)e
(indicates)g(that)g(our)g(strat-)-152 4726 y(egy)36 b(do)f(assist)i(F)n
(CI)e(approac)n(hes)h(to)f(b)r(eha)n(v)n(e)g(b)r(etter)g(under)f(the)
-152 4813 y(circumstances)26 b(that)f(masking)h(e\013ects)g(exist)g(in)
f(the)g(SUT.)-77 4900 y(The)h(main)f(con)n(tributions)h(of)g(this)f
(pap)r(er)h(are:)-62 5050 y(1.)38 b(W)-6 b(e)39 b(formally)h(studied)e
(the)g(impact)h(on)g(the)g(isolation)h(of)35 5137 y(the)35
b(failure-inducing)f(in)n(teractions)i(when)e(the)h(SUT)f(con-)35
5225 y(tain)26 b(m)n(ultiple)f(faults)h(whic)n(h)g(can)f(mask)h(eac)n
(h)g(other.)-62 5378 y(2.)38 b(W)-6 b(e)19 b(prop)r(osed)g(a)g(divide)g
(and)f(conquer)h(strategy)g(of)h(selecting)2040 -100
y Fh(public)40 b(float)g(foo\(int)g(a,)g(int)f(b,)h(int)f(c,)h(int)g
(d\){)2118 -13 y(//step)g(1)g(will)g(cause)f(a)h(exception)g(when)g(b)f
(==)h(c)2118 75 y(float)g(x)g(=)f(\(float\)a)h(/)g(\(b)f(-)g(c\);)2118
249 y(//step)h(2)g(will)g(cause)f(a)h(exception)g(when)g(c)f(<)h(d)2118
336 y(float)g(y)g(=)f(Math.sqrt\(c)i(-)e(d\);)2118 510
y(return)h(x+y;)2118 598 y(})2040 844 y Fo(Figure)25
b(1:)37 b(a)25 b(to)n(y)g(program)h(with)f(four)h(input)g(parameters)
2227 1089 y Fq(test)f(cases)i(to)f(alleviate)h(the)e(impact)g(of)i
(masking)e(e\013ect.)2130 1236 y(3.)38 b(W)-6 b(e)26
b(empirically)i(studies)f(our)f(strategy)h(and)g(\014nd)e(that)i(our)
2227 1323 y(approac)n(h)e(can)h(get)g(a)f(b)r(etter)h(result.)2040
1521 y Fr(2.)99 b(MO)l(TIV)-13 b(A)k(TION)24 b(EXAMPLE)2115
1629 y Fq(This)41 b(section)h(constructed)e(a)i(small)g(program)g
(example)f(for)2040 1716 y(con)n(v)n(enience)c(to)h(illustrate)h(the)f
(motiv)l(ation)g(of)h(our)f(approac)n(h.)2040 1803 y(Assume)f(w)n(e)h
(ha)n(v)n(e)f(a)h(metho)r(d)f Fn(fo)l(o)43 b Fq(whic)n(h)37
b(has)h(four)g(input)e(pa-)2040 1891 y(rameters)d(:)47
b Fn(a,)34 b(b,)h(c,)f(d)p Fq(.)54 b(The)32 b(t)n(yp)r(es)g(of)g(these)
g(four)h(parameter-)2040 1978 y(s)39 b(are)f(all)h(in)n(tegers)g(and)f
(the)g(v)l(alues)g(that)f(they)h(can)g(tak)n(e)g(are:)2040
2065 y Fp(v)2077 2073 y Fj(a)2145 2065 y Fq(=)30 b Fu(f)p
Fq(7)p Fp(;)14 b Fq(11)p Fu(g)p Fp(;)g(v)2532 2074 y
Fj(b)2594 2065 y Fq(=)29 b Fu(f)p Fq(2)p Fp(;)14 b Fq(4)p
Fp(;)g Fq(5)p Fu(g)p Fp(;)g(v)3015 2073 y Fj(c)3077 2065
y Fq(=)29 b Fu(f)p Fq(4)p Fp(;)14 b Fq(6)p Fu(g)p Fp(;)g(v)3425
2074 y Fj(d)3492 2065 y Fq(=)29 b Fu(f)p Fq(3)p Fp(;)14
b Fq(5)p Fu(g)32 b Fq(resp)r(ec-)2040 2152 y(tiv)n(ely)-6
b(.)45 b(The)30 b(detail)g(co)r(de)f(of)h(this)g(metho)r(d)f(is)h
(listed)g(in)f(\014gure)g(1.)2115 2327 y(Insp)r(ecting)c(the)g(simple)h
(co)r(de)g(ab)r(o)n(v)n(e,)g(w)n(e)g(can)g(\014nd)e(t)n(w)n(o)j
(faults:)2040 2414 y(First,)g(in)f(the)f(step)h(1)g(w)n(e)g(can)g(get)g
(a)g Fn(A)n(rithmeticExc)l(eption)34 b Fq(when)2040 2501
y(b)27 b(is)h(equal)f(to)h(c,)g(i.e.,)h(b)e(=)h(4)f(&)g(c)h(=)f(4,)i
(that)e(mak)n(es)g(division)h(b)n(y)2040 2588 y(zero.)34
b(Second,)21 b(another)g Fn(A)n(rithmeticExc)l(eption)29
b Fq(will)22 b(b)r(e)f(triggered)2040 2675 y(in)34 b(step)g(2)g(when)g
(c)g Fp(<)f Fq(d,)j(i.e.,)h(c)d(=)g(4)g(&)g(d)f(=)h(5,)j(whic)n(h)d
(mak)n(es)2040 2762 y(square)24 b(ro)r(ots)h(of)f(negativ)n(e)g(n)n(um)
n(b)r(ers.)33 b(So)24 b(the)g(exp)r(ected)f(MFSs)h(in)2040
2850 y(this)i(example)f(should)g(b)r(e)h(\(-,)f(4,)h(4,)g(-\))f(and)g
(\(-,)g(-,)h(4,)g(5\).)2115 2937 y(T)-6 b(raditional)31
b(F)n(CI)f(algorithms)h(do)e(not)h(consider)g(the)g(detail)g(of)2040
3024 y(the)c(co)r(de.)36 b(They)26 b(tak)n(e)f(blac)n(k-b)r(o)n(x)g
(testing)h(of)h(this)f(program,)h(i.e.,)2040 3111 y(feed)f(inputs)g(to)
g(those)g(programs)h(and)f(execute)f(them)h(to)g(observ)n(e)2040
3198 y(the)18 b(result.)32 b(The)18 b(basic)h(justi\014cation)g(b)r
(ehind)e(those)i(approac)n(hes)f(is)2040 3285 y(that)24
b(the)f(failure-inducing)h(com)n(binations)h(for)f(a)h(particular)f
(fault)2040 3373 y(m)n(ust)h(only)f(app)r(ear)h(in)g(those)g(inputs)f
(that)g(trigger)i(this)f(fault.)35 b(As)2040 3460 y(traditional)24
b(F)n(CI)g(approac)n(hes)g(aim)g(at)g(using)f(as)i(small)f(n)n(um)n(b)r
(er)f(of)2040 3547 y(inputs)j(as)h(p)r(ossible)g(to)g(get)g(the)f(same)
h(or)g(appro)n(ximate)f(result)h(as)2040 3634 y(exhaustiv)n(e)k
(testing,)i(so)f(the)f(results)h(deriv)n(e)f(from)h(a)g(exhaustiv)n(e)
2040 3721 y(testing)26 b(set)g(m)n(ust)f(b)r(e)h(the)f(b)r(est)g(that)g
(these)h(F)n(CI)g(approac)n(hes)g(can)2040 3808 y(reac)n(h.)37
b(Next)25 b(w)n(e)i(will)h(illustrate)f(ho)n(w)g(exhaustiv)n(e)f
(testing)g(w)n(orks)2040 3896 y(on)g(iden)n(tifying)f(the)g
(failure-inducing)h(com)n(binations)g(in)f(the)g(pro-)2040
3983 y(gram.)2115 4070 y(W)-6 b(e)31 b(\014rst)h(generated)g(ev)n(ery)f
(p)r(ossible)i(inputs)e(as)h(listed)g(in)g(the)2040 4157
y(Column)h(")-9 b(test)32 b(inputs")23 b(of)33 b(T)-6
b(able)33 b(1,)i(and)d(the)g(execution)g(result)2040
4244 y(of)26 b(are)g(listed)g(in)f(Column)h(")-9 b(result")16
b(of)27 b(T)-6 b(able)25 b(1.)35 b(In)25 b(this)g(Column,)2040
4332 y Fn(P)-6 b(ASS)36 b Fq(means)27 b(that)f(the)h(program)g(runs)f
(without)h(an)n(y)f(exception)2040 4419 y(under)h(the)h(inputs)g(in)g
(the)g(same)h(ro)n(w.)43 b Fn(Ex)30 b(1)39 b Fq(indicates)28
b(that)g(the)2040 4506 y(program)j(triggered)f(a)g(exception)g(corresp)
r(onding)g(to)g(the)g(step)f(1)2040 4593 y(and)g Fn(Ex)j(2)39
b Fq(indicates)30 b(the)f(program)h(triggered)h(a)f(exception)f(cor-)
2040 4680 y(resp)r(onding)f(to)g(the)f(step)h(2.)41 b(According)28
b(to)g(data)g(listed)g(in)f(table)2040 4767 y(1,)h(w)n(e)g(can)f
(deduce)f(that)h(that)g(\(-,)g(4)g(,)h(4,)g(-\))f(m)n(ust)f(b)r(e)h
(the)g(failure-)2040 4855 y(inducing)d(com)n(bination)h(of)g(Ex)g(1)g
(as)g(all)h(the)e(inputs)g(triggered)h(Ex)2040 4942 y(1)31
b(con)n(tain)f(this)g(sc)n(hema.)49 b(Similarly)-6 b(,)32
b(the)e(com)n(bination)g(\(-,)h(2,)h(4,)2040 5029 y(5\))23
b(and)f(\(-,)h(3,)h(4,)g(5\))e(m)n(ust)h(b)r(e)f(the)g
(failure-inducing)h(com)n(bination-)2040 5116 y(s)36
b(of)f(the)g(Ex)g(2.)64 b(W)-6 b(e)34 b(listed)i(this)f(three)g(com)n
(binations)h(and)e(its)2040 5203 y(corresp)r(onding)26
b(exception)f(in)g(T)-6 b(able)26 b(2.)2115 5290 y(Note)33
b(that)g(w)n(e)h(didn't)f(get)h(the)f(exp)r(ected)g(result)g(with)h
(tradi-)2040 5378 y(tional)39 b(F)n(CI)f(approac)n(hes)g(in)g(this)g
(case.)73 b(The)39 b(failure-inducing)p eop end
%%Page: 3 3
TeXDict begin 3 2 bop -140 -17 a Fo(T)-7 b(able)27 b(1:)39
b(test)30 b(inputs)f(and)h(their)f(corresp)r(onding)i(result)-78
67 y Fq(id)96 b(test)26 b(inputs)89 b(result)p -129 97
893 5 v -65 158 a(1)112 b(\(7,)26 b(2,)g(4,)g(3\))93
b(P)-6 b(ASS)p -129 188 V -65 249 a(2)112 b(\(7,)26 b(2,)g(4,)g(5\))109
b(Ex)25 b(2)p -129 280 V -65 341 a(3)112 b(\(7,)26 b(2,)g(6,)g(3\))93
b(P)-6 b(ASS)p -129 371 V -65 432 a(4)112 b(\(7,)26 b(2,)g(6,)g(5\))93
b(P)-6 b(ASS)p -129 462 V -65 523 a(5)112 b(\(7,)26 b(4,)g(4,)g(3\))109
b(Ex)25 b(1)p -129 554 V -65 615 a(6)112 b(\(7,)26 b(4,)g(4,)g(5\))109
b(Ex)25 b(1)p -129 645 V -65 706 a(7)112 b(\(7,)26 b(4,)g(6,)g(3\))93
b(P)-6 b(ASS)p -129 736 V -65 797 a(8)112 b(\(7,)26 b(4,)g(6,)g(5\))93
b(P)-6 b(ASS)p -129 828 V -65 889 a(9)112 b(\(7,)26 b(5,)g(4,)g(3\))93
b(P)-6 b(ASS)p -129 919 V -84 980 a(10)93 b(\(7,)26 b(5,)g(4,)g(5\))109
b(Ex)25 b(2)p -129 1010 V -84 1071 a(11)93 b(\(7,)26
b(5,)g(6,)g(3\))93 b(P)-6 b(ASS)p -129 1102 V -84 1163
a(12)93 b(\(7,)26 b(5,)g(6,)g(5\))93 b(P)-6 b(ASS)p -129
1193 V 943 67 a(id)113 b(test)25 b(inputs)106 b(result)p
892 97 927 5 v 937 158 a(13)90 b(\(11,)26 b(2,)h(4,)f(3\))90
b(P)-6 b(ASS)p 892 188 V 937 249 a(14)90 b(\(11,)26 b(2,)h(4,)f(5\))106
b(Ex)25 b(2)p 892 280 V 937 341 a(15)90 b(\(11,)26 b(2,)h(6,)f(3\))90
b(P)-6 b(ASS)p 892 371 V 937 432 a(16)90 b(\(11,)26 b(2,)h(6,)f(5\))90
b(P)-6 b(ASS)p 892 462 V 937 523 a(17)90 b(\(11,)26 b(4,)h(4,)f(3\))106
b(Ex)25 b(1)p 892 554 V 937 615 a(18)90 b(\(11,)26 b(4,)h(4,)f(5\))106
b(Ex)25 b(1)p 892 645 V 937 706 a(19)90 b(\(11,)26 b(4,)h(6,)f(3\))90
b(P)-6 b(ASS)p 892 736 V 937 797 a(20)90 b(\(11,)26 b(4,)h(6,)f(5\))90
b(P)-6 b(ASS)p 892 828 V 937 889 a(21)90 b(\(11,)26 b(5,)h(4,)f(3\))90
b(P)-6 b(ASS)p 892 919 V 937 980 a(22)90 b(\(11,)26 b(5,)h(4,)f(5\))106
b(Ex)25 b(2)p 892 1010 V 937 1071 a(23)90 b(\(11,)26
b(5,)h(6,)f(3\))90 b(P)-6 b(ASS)p 892 1102 V 937 1163
a(24)90 b(\(11,)26 b(5,)h(6,)f(5\))90 b(P)-6 b(ASS)p
892 1193 V -152 1428 a Fo(T)f(able)49 b(2:)82 b(Iden)n(ti\014ed)50
b(failure-inducing)h(com)n(binations)-152 1515 y(and)30
b(their)f(corresp)r(onding)i(Exception)p 93 1542 1504
5 v 91 1629 5 88 v 137 1603 a Fq(failure-inducing)26
b(com)n(binations)p 1169 1629 V 90 w(Exception)p 1594
1629 V 93 1633 1504 5 v 91 1720 5 88 v 468 1694 a(\(-,)f(4,)h(4,)h(-\))
p 1169 1720 V 509 w(Ex)e(1)p 1594 1720 V 93 1725 1504
5 v 91 1812 5 88 v 462 1786 a(\(-,)g(2,)h(4,)g(5\))p
1169 1812 V 504 w(Ex)f(2)p 1594 1812 V 93 1816 1504 5
v 91 1903 5 88 v 462 1877 a(\(-,)g(3,)h(4,)g(5\))p 1169
1903 V 504 w(Ex)f(2)p 1594 1903 V 93 1907 1504 5 v 93
1922 V -152 2164 a(com)n(binations)30 b(w)n(e)g(get)g(for)g(Ex)f(2)h
(are)g(\(-,2,4,5\))h(and)e(\(-,3,4,5\))h(re-)-152 2251
y(sp)r(ectiv)n(ely)d(instead)f(of)i(the)e(exp)r(ected)g(com)n(bination)
h(\(-,-,4,5\).)38 b(So)-152 2338 y(wh)n(y)26 b(w)n(e)g(failed)i
(getting)e(the)f(\(-,-,4,5\)?)37 b(The)26 b(reason)h(lies)g(in)f
Fn(input)-152 2425 y(6)10 b Fq(:)39 b(\(7,4,4,5\))30
b(and)d Fn(input)i(18)10 b Fq(:)39 b(\(11,4,4,5\).)k(This)28
b(t)n(w)n(o)h(inputs)d(con-)-152 2512 y(tain)31 b(the)f(com)n(bination)
g(\(-,-,4,5\),)i(but)d(didn't)h(trigger)h(the)f(Ex)g(2,)-152
2600 y(instead,)c(Ex)f(1)h(w)n(as)h(triggered.)-77 2687
y(No)n(w)d(let)g(us)f(get)h(bac)n(k)f(to)h(the)g(source)g(co)r(de)g(of)
g Fn(fo)l(o)p Fq(,)g(w)n(e)g(can)g(\014nd)-152 2774 y(that)d(if)h(Ex)g
(1)f(is)h(triggered,)i(it)d(will)i(stop)e(executing)g(the)g(remaining)
-152 2861 y(co)r(de)e(and)g(rep)r(ort)g(the)f(exception)g(information.)
33 b(In)19 b(another)f(w)n(ord,)-152 2948 y(Ex)j(1)g(ha)n(v)n(e)f(a)h
(higher)g(faulting)g(lev)n(el)g(than)f(Ex)h(2)g(so)g(that)g(Ex)f(1)h
(ma)n(y)-152 3035 y(mask)28 b(Ex)e(2.)40 b(Let)27 b(us)g(re-exam)g(the)
f(com)n(bination)i(\(-,-,4,5\):)37 b(if)28 b(w)n(e)-152
3123 y(supp)r(osed)37 b(that)f Fn(input)i(6)47 b Fq(and)36
b Fn(input)i(18)48 b Fq(should)36 b(trigger)i(Ex)f(2)-152
3210 y(if)32 b(they)e(didn't)g(trigger)i(Ex)f(1,)i(then)d(w)n(e)h(can)g
(conclude)g(that)g(\(-,-)-152 3297 y(,4,5\))h(should)f(b)r(e)f(the)h
(failure-inducing)f(com)n(bination)h(of)h(the)e(Ex)-152
3384 y(2,)c(whic)n(h)g(is)g(iden)n(tical)g(to)g(the)f(exp)r(ected)f
(one.)-77 3471 y(Ho)n(w)n(ev)n(er,)35 b(w)n(e)e(cannot)g(v)l(alidate)g
(the)f(supp)r(osition,)j(i.e.,)i Fn(input)-152 3559 y(6)44
b Fq(and)34 b Fn(input)h(18)45 b Fq(should)33 b(trigger)i(Ex)f(2)g(if)h
(they)e(didn't)g(trigger)-152 3646 y(Ex)d(1,)j(unless)d(w)n(e)h(ha)n(v)
n(e)f(\014xed)f(the)h(co)r(de)g(that)g(trigger)i(Ex)e(1)g(and)-152
3733 y(then)36 b(re-executed)e(all)j(the)f(test)g(cases.)67
b(So)36 b(in)g(practice,)j(when)-152 3820 y(w)n(e)34
b(do)f(not)g(ha)n(v)n(e)f(enough)h(resource)h(to)f(re-execute)f(all)i
(the)f(test)-152 3907 y(cases)j(again)f(and)f(again)h(or)f(can)g(only)g
(tak)n(e)g(blac)n(k-b)r(o)n(x)f(testing,)-152 3994 y(the)h(more)h
(economic)f(and)g(e\016cien)n(t)g(approac)n(h)g(to)g(alleviate)h(the)
-152 4082 y(masking)26 b(e\013ect)g(on)f(F)n(CI)h(approac)n(hes)f(is)i
(desired.)-152 4299 y Fr(3.)100 b(FORMAL)24 b(MODEL)-77
4407 y Fq(This)f(section)f(presen)n(ts)g(some)h(de\014nitions)e(and)h
(prop)r(ositions)h(to)-152 4494 y(giv)n(e)j(a)g(formal)h(mo)r(del)f
(for)g(the)f(F)n(CI)h(problem.)-152 4657 y Fr(3.1)99
b(failur)n(e-inducing)27 b(combinations)e(in)g(CT)-77
4765 y Fq(Assume)i(that)g(the)f(SUT)h(\(soft)n(w)n(are)i(under)d
(test\))h(is)g(in\015uenced)-152 4852 y(b)n(y)c Fn(n)30
b Fq(parameters,)25 b(and)e(eac)n(h)g(parameter)h Fp(p)1164
4860 y Fj(i)1214 4852 y Fq(has)g Fp(a)1390 4860 y Fj(i)1439
4852 y Fq(discrete)g(v)l(al-)-152 4939 y(ues)j(from)g(the)f(\014nite)g
(set)h Fp(V)660 4947 y Fj(i)686 4939 y Fq(,)g(i.e.,)h
Fp(a)921 4947 y Fj(i)974 4939 y Fq(=)e Fu(j)p Fp(V)1126
4947 y Fj(i)1153 4939 y Fu(j)g Fq(\()p Fp(i)h Fq(=)f(1,2,..n\).)39
b(Some)-152 5026 y(of)27 b(the)e(de\014nitions)g(b)r(elo)n(w)h(are)g
(originally)h(de\014ned)d(in)i([13].)-69 5203 y Fn(De\014nition)i(1.)37
b Fq(A)23 b Fn(test)28 b(c)l(ase)j Fq(of)25 b(the)e(SUT)h(is)g(an)g
(arra)n(y)h(of)f Fn(n)30 b Fq(v)l(al-)-152 5290 y(ues,)24
b(one)e(for)h(eac)n(h)f(parameter)h(of)g(the)f(SUT,)g(whic)n(h)g(is)h
(denoted)e(as)-152 5378 y(a)26 b Fn(n)6 b Fq(-tuple)25
b(\()p Fp(v)250 5386 y Fk(1)284 5378 y Fq(,)h Fp(v)368
5386 y Fk(2)403 5378 y Fq(...)p Fp(v)503 5386 y Fj(n)547
5378 y Fq(\),)g(where)f Fp(v)882 5386 y Fk(1)939 5378
y Fu(2)c Fp(V)1056 5386 y Fk(1)1091 5378 y Fq(,)k Fp(v)1174
5386 y Fk(2)1231 5378 y Fu(2)c Fp(V)1348 5386 y Fk(2)1408
5378 y Fq(...)35 b Fp(v)1543 5386 y Fj(n)1607 5378 y
Fu(2)22 b Fp(V)1725 5386 y Fj(n)1767 5378 y Fq(.)2115
-69 y(In)30 b(practice,)i(these)f(parameters)g(in)f(the)h(test)f(case)i
(can)e(repre-)2040 19 y(sen)n(t)20 b(man)n(y)g(factors,)j(suc)n(h)d(as)
h(input)e(v)l(ariables,)k(run-time)c(options,)2040 106
y(building)29 b(options)g(or)g(v)l(arious)g(com)n(bination)g(of)h
(them.)44 b(W)-6 b(e)28 b(need)2040 193 y(to)37 b(execute)g(the)f(SUT)h
(under)f(these)h(test)g(cases)h(to)f(ensure)g(the)2040
280 y(correctness)26 b(of)h(the)e(b)r(eha)n(viour)g(of)h(the)f(soft)n
(w)n(are.)2115 367 y(W)-6 b(e)29 b(consider)i(the)e(fact)i(that)e(the)h
(abnormally)g(executing)g(test)2040 454 y(cases)23 b(as)f(a)h
Fn(failur)l(e)p Fq(.)32 b(It)21 b(can)h(b)r(e)g(a)g(thro)n(wn)f
(exception,)i(compilation)2040 542 y(error,)k(assertion)f(failure)h(or)
f(constrain)n(t)f(violation.)2115 629 y(Figuring)j(out)f(the)g(test)h
(case)g(as)g(w)n(ell)h(as)f(the)f(executing)g(result)2040
716 y(is)33 b(usually)e(not)h(enough)f(to)h(analyse)h(the)e(source)i
(of)f(the)g(bug,)h(e-)2040 803 y(sp)r(ecially)g(when)e(there)h(are)g
(to)r(o)g(man)n(y)g(parameters)g(w)n(e)g(need)f(to)2040
890 y(care)h(in)g(this)f(test)h(case.)54 b(In)30 b(this)i
(circumstance,)i(w)n(e)e(need)f(to)h(s-)2040 977 y(tudy)21
b(some)i(subsets)g(of)g(this)f(test)h(case,)h(so)f(w)n(e)g(need)f(the)g
(follo)n(wing)2040 1065 y(de\014nition:)2123 1230 y Fn(De\014nition)28
b(2.)37 b Fq(F)-6 b(or)24 b(the)g(SUT,)h(the)f Fn(n)6
b Fq(-tuple)24 b(\(-,)p Fp(v)3569 1238 y Fj(n)3607 1248
y Fg(1)3644 1230 y Fq(,...,)p Fp(v)3786 1238 y Fj(n)3824
1250 y Ff(k)3866 1230 y Fq(,...\)is)2040 1318 y(called)38
b(a)f Fn(k)8 b Fq(-v)l(alue)37 b Fn(c)l(ombination)43
b Fq(\(0)e Fp(<)f(k)j Fu(\024)d Fp(n)p Fq(\))e(when)e(some)i(k)2040
1405 y(parameters)g(ha)n(v)n(e)f(\014xed)f(v)l(alues)h(and)f(the)h
(others)h(can)f(tak)n(e)g(on)2040 1492 y(their)26 b(resp)r(ectiv)n(e)f
(allo)n(w)n(able)j(v)l(alues,)d(represen)n(ted)g(as)h(")-9
b(-")g(.)2115 1579 y(In)27 b(e\013ect)h(a)g(test)h(case)f(itself)i(is)e
(a)h(k-v)l(alue)d Fn(c)l(ombination)p Fq(,)k(when)2040
1666 y(k)24 b(is)h(equal)g(to)f(n.)34 b(F)-6 b(urthermore,)25
b(if)g(a)g(test)f(case)i(con)n(tain)e(a)h Fn(c)l(ombi-)2040
1754 y(nation)p Fq(,)30 b(i.e.,)h(ev)n(ery)c(\014xed)h(v)l(alue)g(in)g
(this)g(com)n(bination)h(is)g(also)h(in)2040 1841 y(this)c(test)f
(case,)i(w)n(e)f(sa)n(y)f(this)h(test)g(case)g Fn(hit)33
b Fq(this)25 b Fn(c)l(ombination)p Fq(.)2123 2007 y Fn(De\014nition)j
(3.)37 b Fq(let)d Fp(c)2737 2016 y Fj(l)2796 2007 y Fq(b)r(e)h(a)g
Fn(l)8 b Fq(-v)l(alue)33 b(com)n(bination,)k Fp(c)3745
2015 y Fj(m)3838 2007 y Fq(b)r(e)e(an)2040 2094 y Fn(m)6
b Fq(-v)l(alue)33 b(com)n(bination)h(in)f(SUT)h(and)f
Fp(l)k(<)e(m)p Fq(.)59 b(If)34 b(all)g(the)g(\014xed)2040
2181 y(parameter)26 b(v)l(alues)g(in)g Fp(c)2759 2190
y Fj(l)2809 2181 y Fq(are)g(also)h(in)f Fp(c)3214 2189
y Fj(m)3273 2181 y Fq(,)g(then)f Fp(c)3528 2189 y Fj(m)3613
2181 y Fn(subsumes)33 b Fp(c)3987 2190 y Fj(l)4011 2181
y Fq(.)2040 2268 y(In)i(this)h(case)h(w)n(e)f(can)g(also)i(sa)n(y)d
(that)h Fp(c)3270 2277 y Fj(l)3330 2268 y Fq(is)h(a)f
Fn(sub-c)l(ombination)2040 2355 y Fq(of)d Fp(c)2167 2363
y Fj(m)2259 2355 y Fq(and)f Fp(c)2448 2363 y Fj(m)2539
2355 y Fq(is)i(a)e Fn(p)l(ar)l(ent-c)l(ombination)41
b Fq(of)34 b Fp(c)3500 2364 y Fj(l)3524 2355 y Fq(,)h(whic)n(h)d(can)h
(b)r(e)2040 2442 y(denoted)25 b(as)h Fp(c)2457 2451 y
Fj(l)2503 2442 y Fu(\036)21 b Fp(c)2617 2450 y Fj(m)2115
2608 y Fq(F)-6 b(or)35 b(example,)i(in)d(the)h(motiv)l(ation)f(example)
h(section,)j(the)c(2-)2040 2696 y(v)l(alue)g(com)n(bination)g(\(-,)i
(4,)h(4,)g(-\))c(is)i(a)f(sub-com)n(bination)f(of)i(the)2040
2783 y(3-v)l(alue)25 b(com)n(bination)h(\(-,)f(4,)h(4,)g(5\).)2123
2949 y Fn(De\014nition)i(4.)37 b Fq(If)28 b(all)i(test)f(cases)h(con)n
(tain)f(a)g(com)n(bination,)h(sa)n(y)2040 3036 y Fp(c)p
Fq(,)d(trigger)g(a)f(particular)g(fault,)h(sa)n(y)f Fp(F)11
b Fq(,)26 b(then)f(w)n(e)h(call)h(this)f(com)n(bi-)2040
3123 y(nation)f Fp(c)g Fq(the)f Fn(faulty)j(c)l(ombination)k
Fq(for)26 b Fp(F)11 b Fq(.)34 b(Additionally)-6 b(,)24
b(if)i(none)2040 3210 y(sub-com)n(bination)20 b(of)h
Fp(c)g Fq(is)h(the)e Fn(faulty)j(c)l(ombination)k Fq(for)21
b Fp(F)11 b Fq(,)22 b(w)n(e)f(will)2040 3297 y(call)33
b(the)e(com)n(bination)h Fp(c)g Fq(the)f Fn(minimal)h(faulty)h(c)l
(ombination)38 b Fq(for)2040 3384 y Fp(F)11 b Fq(.)2115
3550 y(In)34 b(fact,)39 b Fn(minimal)c(faulty)h(c)l(ombinations)43
b Fq(is)36 b(iden)n(tical)f(to)h(the)2040 3638 y(failure-inducing)26
b(com)n(binations)h(w)n(e)g(discussed)f(previously)-6
b(.)36 b(Fig-)2040 3725 y(uring)28 b(it)h(out)f(can)h(eliminate)g(all)g
(details)h(that)e(are)h(irrelev)l(an)n(t)f(for)2040 3812
y(pro)r(ducing)23 b(the)g(failure,)i(whic)n(h)f(can)f(facilitate)i(the)
e(debugging)g(ef-)2040 3899 y(fort.)2115 3986 y(W)-6
b(e)33 b(ha)n(v)n(e)h(the)f(follo)n(wing)j(prop)r(osition)f(based)e(on)
h(these)g(basic)2040 4073 y(de\014nitions.)2123 4239
y Fe(Pr)n(oposition)43 b Fq(1.)38 b Fn(L)l(et)g Fp(c)2889
4247 y Fj(m)2985 4239 y Fn(b)l(e)g(a)g(m-value)g(c)l(ombination,)i(the)
2040 4326 y(set)25 b Fp(P)2205 4334 y Fj(c)2233 4342
y Ff(m)2292 4326 y Fq(\()p Fp(m)9 b Fq(+)g Fp(l)q Fq(\))24
b Fn(=)g Fu(f)p Fp(c)2700 4334 y Fj(m)2768 4326 y Fq(+)9
b Fp(l)23 b Fq(:)f Fp(c)2959 4334 y Fj(m)3039 4326 y
Fu(\036)f Fp(c)3153 4334 y Fj(m)3221 4326 y Fq(+)9 b
Fp(l)q Fu(g)25 b Fn(b)l(e)f(al)t(l)f(the)i(m+l)e(value)2040
4414 y(p)l(ar)l(ent)30 b(c)l(ombination)f(of)f Fp(c)2833
4422 y Fj(m)2892 4414 y Fn(.)38 b(Mor)l(e)l(over,)30
b(we)e(denote)i(al)t(l)e(the)h(test)2040 4501 y(c)l(ases)35
b(c)l(an)40 b Fq(hit)33 b Fn(the)h(c)l(ombination)g Fp(c)3127
4509 y Fj(m)3219 4501 y Fn(as)g Fp(T)11 b Fq(\()p Fp(c)3442
4509 y Fj(m)3500 4501 y Fq(\))p Fn(,)34 b(then)g(we)g(have)2040
4588 y(the)28 b(fol)t(lowing)e(formula:)2525 4882 y Fp(T)11
b Fq(\()p Fp(c)2644 4890 y Fj(m)2702 4882 y Fq(\))21
b(=)2834 4779 y Fi(j)p Fj(P)2892 4787 y Ff(c)2919 4795
y(m)2978 4779 y Fk(\()p Fj(m)p Fk(+)p Fj(l)p Fk(\))p
Fi(j)2957 4811 y Fd([)2950 4969 y Fj(i)p Fk(=1)3179 4882
y Fp(T)11 b Fq(\()p Fp(c)3298 4894 y Fk(\()p Fj(m)p Fk(+)p
Fj(l)p Fk(\))3467 4905 y Ff(i)3497 4882 y Fq(\))p Fp(:)2115
5116 y Fq(The)26 b(pro)r(of)g(of)h(this)f(prop)r(ositions)g(is)g(ob)n
(vious,)g(w)n(e)g(just)g(tak)n(e)g(an)2040 5203 y(example)g(to)g
(illustrate)h(this.)36 b(F)-6 b(or)26 b(SUT\(2,2,2\),)h(the)f
Fp(T)11 b Fq(\(\(1)p Fp(;)h Fu(\000)p Fp(;)h Fu(\000)p
Fq(\)\))2040 5290 y(=)k Fu(f)p Fq(\(1)p Fp(;)d Fq(0)p
Fp(;)f Fq(0\))k(,\(1)p Fp(;)d Fq(0)p Fp(;)g Fq(1\),)19
b(\(1)p Fp(;)13 b Fq(1)p Fp(;)h Fq(0\),)19 b(\(1)p Fp(;)14
b Fq(1)p Fp(;)f Fq(1\))p Fu(g)18 b Fq(=)f(T\(\(1,0,-\)\))3715
5234 y Fd(S)3796 5290 y Fq(T\(\(1,1,-)2040 5378 y(\)\))2126
5322 y Fd(S)2217 5378 y Fq(T\(\(1,-,0\)\))2562 5322 y
Fd(S)2653 5378 y Fq(T\(\(1,-,1\)\).)37 b(Additional,)27
b(some)g(test)f(cases)i(of)p eop end
%%Page: 4 4
TeXDict begin 4 3 bop -152 -69 a Fq(these)33 b(paren)n(t-com)n
(binations)g(ma)n(y)g(o)n(v)n(erlapp)r(ed)f(eac)n(h)i(other,)h(for)-152
19 y(example,)30 b(T\(\(1,0,-\)\))g(o)n(v)n(erlap)e(with)h
(T\(\(1,-,1\)\))h(at)f(the)f(test)h(case)-152 106 y(\(1,0,1\).)-77
193 y(By)23 b(de\014nition,)h(if)g(all)h(the)e(test)g(cases)i(in)e
Fp(T)11 b Fq(\()p Fp(c)1249 201 y Fj(m)1307 193 y Fq(\))24
b(are)g(failing)h(test)-152 280 y(cases)j(with)g(the)e(same)i(fault,)g
(sa)n(y)-6 b(,)28 b Fp(F)949 288 y Fj(m)1007 280 y Fq(,)g(then)e(com)n
(bination)h Fp(c)1703 288 y Fj(m)1789 280 y Fq(is)-152
367 y(the)32 b(failure-inducing)g(com)n(bination)g(of)g
Fp(F)1126 375 y Fj(m)1185 367 y Fq(.)53 b(Ho)n(w)n(ev)n(er,)34
b(if)e(some)-152 454 y(test)22 b(cases)h(in)e Fp(T)11
b Fq(\()p Fp(c)387 462 y Fj(m)446 454 y Fq(\))21 b(do)r(es)h(not)g
(trigger)g Fp(F)1091 462 y Fj(m)1150 454 y Fq(,)h(then)d(w)n(e)j(can)e
(get)h(the)-152 542 y(follo)n(wing)28 b(prop)r(osition.)-69
703 y Fe(Pr)n(oposition)43 b Fq(2.)38 b Fn(F)-6 b(or)21
b(a)g(c)l(ombination)g Fp(c)1177 711 y Fj(m)1236 703
y Fn(,)h(if)e(al)t(l)g(the)h(test)i(c)l(as-)-152 790
y(es)34 b(in)f Fp(T)11 b Fq(\()p Fp(c)167 798 y Fj(m)225
790 y Fq(\))34 b Fn(trigger)l(e)l(d)h(fault)e Fp(F)839
798 y Fj(m)931 790 y Fn(exc)l(ept)j(the)e(set)g(of)f(test)i(c)l(ases)
-152 877 y Fp(T)-96 846 y Fi(0)-53 877 y Fc($)22 b Fp(T)11
b Fq(\()p Fp(c)146 885 y Fj(m)204 877 y Fq(\))26 b Fn(,)f(then)i(the)f
(failur)l(e-inducing)f(c)l(ombinations)i(for)e Fp(F)1782
885 y Fj(m)-152 964 y Fn(must)35 b(b)l(e)g(some)g(p)l(ar)l(ent-c)l
(ombinations)i(of)d Fp(c)1182 972 y Fj(m)1241 964 y Fn(,)i(i.e.,)e
Fu(f)p Fp(c)1537 976 y Fk(\()p Fj(m)p Fk(+)p Fj(l)p Fk(\))1706
987 y Ff(i)1737 964 y Fu(g)h Fn(\()-152 1052 y Fp(l)27
b Fu(2)f(f)p Fq(1)p Fp(;)14 b Fq(2)p Fp(:::n)20 b Fu(\000)e
Fp(m)p Fu(g)p Fn(;)31 b Fp(i)26 b Fu(2)f(f)p Fq(1)p Fp(;)14
b Fq(2)p Fp(:::)p Fu(j)p Fp(P)902 1060 y Fj(c)930 1068
y Ff(m)991 1052 y Fq(\()p Fp(m)k Fq(+)h Fp(l)q Fq(\))p
Fu(jg)p Fn(\))31 b(satisfy)f(the)g(fol-)-152 1139 y(lowing)d(formula:)
408 1362 y Fu(8)p Fp(t)21 b Fu(2)h Fp(T)629 1326 y Fi(0)678
1362 y Fp(s:t:)27 b(t)j(=)-47 b Fu(2)22 b Fp(T)11 b Fq(\()p
Fp(c)1052 1374 y Fk(\()p Fj(m)p Fk(+)p Fj(l)p Fk(\))1221
1385 y Ff(i)1251 1362 y Fq(\))-69 1494 y Fe(Pr)n(oof.)39
b Fq(W)-6 b(e)25 b(pro)r(of)i(this)e(prop)r(osition)h(b)n(y)f(t)n(w)n
(o)h(steps:)-77 1581 y(First,)c(there)e(m)n(ust)g(exist)g(some)h(paren)
n(t-com)n(bination)e Fp(c)1571 1590 y Fj(m)p Fk(+)p Fj(l)1717
1581 y Fq(sat-)-152 1668 y(isfy)40 b(this)e(form)n(ula.)76
b(Let)38 b(me)h(divide)f(the)h Fp(T)11 b Fq(\()p Fp(c)1310
1676 y Fj(m)1368 1668 y Fq(\))39 b(to)g(pieces)g(of)-152
1755 y Fp(T)11 b Fq(\()p Fp(c)-33 1763 y Fj(n)5 1774
y Ff(i)36 1755 y Fq(\),)37 b(Eac)n(h)e(set)g(of)g Fp(T)11
b Fq(\()p Fp(c)668 1763 y Fj(n)706 1774 y Ff(i)736 1755
y Fq(\))35 b(just)g(ha)n(v)n(e)f(one)h(elemen)n(t,)i(that)d(is)-152
1842 y Fp(c)-119 1850 y Fj(n)-81 1861 y Ff(i)-24 1842
y Fq(itself)27 b(as)g(a)f(test)g(case.)36 b(Ob)n(viously)-6
b(,)25 b(these)g(set)h(do)g(not)g(o)n(v)n(erlap)-152
1929 y(with)h(eac)n(h)f(other.)37 b(T)-6 b(ak)n(e)26
b(an)g(example,)h Fp(T)11 b Fq(\(\(1)p Fp(;)i Fu(\000)p
Fp(;)f Fu(\000)p Fq(\)\))26 b(=)g Fu(f)p Fq(\(1)p Fp(;)14
b Fq(0)p Fp(;)g Fq(0\))-152 2017 y(,\(1)p Fp(;)g Fq(0)p
Fp(;)g Fq(1\),)19 b(\(1)p Fp(;)13 b Fq(1)p Fp(;)h Fq(0\),)19
b(\(1)p Fp(;)13 b Fq(1)p Fp(;)h Fq(1\))p Fu(g)k Fq(=T\(\(1,0,0\)\))1144
1961 y Fd(S)1225 2017 y Fq(T\(\(1,0,1\)\))1574 1961 y
Fd(S)1655 2017 y Fq(T\(\(1,1,0\)\))-152 2048 y Fd(S)-62
2104 y Fq(T\(\(1,1,1\)\).)-77 2191 y(As)29 b Fp(T)96
2159 y Fi(0)146 2191 y Fc($)g Fp(T)11 b Fq(\()p Fp(c)352
2199 y Fj(m)410 2191 y Fq(\),)31 b(whic)n(h)e(means)h(that)f(at)h
(least)h(one)e(test)h(case)-152 2278 y(in)23 b Fp(T)11
b Fq(\()p Fp(c)54 2286 y Fj(m)112 2278 y Fq(\))23 b(trigger)h(the)e
(fault)i Fp(F)767 2286 y Fj(m)825 2278 y Fq(,)g(and)f(it)g(m)n(ust)f(b)
r(e)h(one)g(of)g Fp(T)11 b Fq(\()p Fp(c)1721 2286 y Fj(n)1759
2297 y Ff(i)1790 2278 y Fq(\).)-152 2365 y(So)21 b(at)h(least)g(there)f
(exist)g(one)g(com)n(bination)g Fp(c)1185 2373 y Fj(n)1223
2384 y Ff(i)1276 2365 y Fq(whic)n(h)g(can)g(satisfy)-152
2453 y(this)26 b(form)n(ula.)-77 2540 y(Next,)20 b(some)g(satis\014ed)g
(paren)n(t-com)n(bination)f Fp(c)1307 2549 y Fj(m)p Fk(+)p
Fj(l)1452 2540 y Fq(m)n(ust)g(b)r(e)g(the)-152 2627 y(failure-inducing)
k(com)n(bination)g(of)h Fp(F)961 2635 y Fj(m)1020 2627
y Fq(.)33 b(In)22 b(fact,)j(when)d Fp(c)1568 2636 y Fj(m)p
Fk(+)p Fj(l)1717 2627 y Fq(sat-)-152 2714 y(isfy)31 b(this)e(form)n
(ula,)j(it)e(is)h(the)e Fn(fault)i(c)l(ombination)36
b Fq(of)31 b Fp(F)1516 2722 y Fj(m)1604 2714 y Fq(b)n(y)e(def-)-152
2801 y(inition.)50 b(And)29 b(there)i(m)n(ust)f(b)r(e)g(at)h(least)h
(one)e(c)n(hild-com)n(bination)-152 2888 y(is)i(not)f(the)g
Fn(fault)h(c)l(ombination)38 b Fq(of)32 b Fp(F)977 2896
y Fj(m)1036 2888 y Fq(,)h(whic)n(h)e(is)h Fp(c)1431 2896
y Fj(m)1489 2888 y Fq(.)52 b(So)31 b(some)-152 2976 y(paren)n(t-com)n
(binations)26 b(m)n(ust)h(b)r(e)f(the)g(failure-inducing)h(com)n(bina-)
-152 3063 y(tions)f(of)h Fp(F)173 3071 y Fj(m)231 3063
y Fq(.)p 332 3013 57 4 v 332 3063 4 50 v 385 3063 V 332
3066 57 4 v -77 3224 a(Ho)n(w)n(ev)n(er,)20 b(if)f Fp(T)367
3192 y Fi(0)411 3224 y Fq(=)i Fp(T)11 b Fq(\()p Fp(c)611
3232 y Fj(m)669 3224 y Fq(\),)20 b(whic)n(h)e(means)h(none)f(of)h(the)g
(test)f(case)-152 3311 y(in)23 b Fp(T)11 b Fq(\()p Fp(c)54
3319 y Fj(m)113 3311 y Fq(\))23 b(trigger)h(the)f(fault)h
Fp(F)769 3319 y Fj(m)851 3311 y Fq(then)e(neither)h(the)g(paren)n(t)f
(of)i(the)-152 3398 y(com)n(bination)c(of)g Fp(c)393
3406 y Fj(m)471 3398 y Fq(nor)f Fp(c)634 3406 y Fj(m)712
3398 y Fq(its)h(self)g(is)g(the)f(failure-inducing)g(com-)-152
3486 y(bination)30 b(of)h Fp(F)296 3494 y Fj(m)355 3486
y Fq(.)48 b(In)30 b(this)g(circumstance,)i(w)n(e)f(call)g(com)n
(bination)-152 3573 y Fp(c)-119 3581 y Fj(m)-34 3573
y Fq(is)26 b Fn(irr)l(elevant)34 b Fq(to)25 b(the)g(failure-inducing)h
(com)n(binations)g(of)g Fp(F)1769 3581 y Fj(m)-77 3660
y Fq(Based)f(on)f(this)g(prop)r(osition,)i(w)n(e)f(can)f(easily)h(get)g
(the)f(follo)n(wing)-152 3747 y(lemma:)-69 3909 y Fe(Lemma)41
b Fq(1.)d Fn(F)-6 b(or)35 b(two)g(set)g(of)f(test)i(c)l(ases)g
Fp(T)1243 3918 y Fj(l)1302 3909 y Fn(and)e Fp(T)1502
3918 y Fj(k)1540 3909 y Fn(,)i(assume)-152 3996 y(that)h
Fp(T)58 4005 y Fj(l)117 3996 y Fu(\032)e Fp(T)257 4005
y Fj(k)295 3996 y Fn(.)58 b(Supp)l(ose)36 b(SUT)f(has)h(a)g(fault)e
Fp(F)11 b Fn(.)58 b(Now)35 b(\014rst)i(let)-152 4083
y(al)t(l)26 b(the)i(test)g(c)l(ases)h(that)f(trigger)g
Fp(F)37 b Fn(to)28 b(b)l(e)f(the)h(set)g Fp(T)1388 4092
y Fj(k)1426 4083 y Fn(,)e(the)i(failur)l(e-)-152 4170
y(inducing)f(c)l(ombinations)h(for)f Fp(F)38 b Fn(is)26
b(the)i(set)g Fp(C)1214 4179 y Fj(k)1273 4170 y Fq(=)22
b Fu(f)p Fp(c)1426 4179 y Fj(k)1464 4170 y Fu(g)p Fn(.)35
b(Then)28 b(let)-152 4257 y(al)t(l)20 b(the)i(test)g(c)l(ases)g(that)f
(trigger)h Fp(F)32 b Fn(to)21 b(b)l(e)g Fp(T)1086 4266
y Fj(l)1110 4257 y Fn(,)g(which)g(we)g(get)g(another)-152
4344 y(set)33 b(failur)l(e-inducing)e(c)l(ombinations)h
Fp(C)1048 4353 y Fj(l)1101 4344 y Fq(=)d Fu(f)p Fp(c)1261
4352 y Fk(1)1296 4344 y Fu(g)p Fn(.)48 b(Then)31 b(we)h(c)l(an)-152
4432 y(de)l(duc)l(e)i(that)f Fp(C)314 4441 y Fj(l)370
4432 y Fn(and)f Fp(C)578 4441 y Fj(k)648 4432 y Fn(satisfy)h(at)f(le)l
(ast)h(one)g(of)e(the)i(fol)t(lowing)-152 4519 y(pr)l(op)l(erties:)-77
4606 y Fq(1\))28 b Fu(9)p Fp(c)95 4615 y Fj(k)154 4606
y Fu(2)22 b Fp(C)282 4615 y Fj(k)347 4606 y Fp(and)27
b Fu(9)p Fp(c)577 4615 y Fj(l)623 4606 y Fu(2)21 b Fp(C)750
4615 y Fj(l)801 4606 y Fp(s:t:)28 b(c)968 4615 y Fj(l)1020
4606 y Fp(subsumes)e(c)1412 4615 y Fj(k)-77 4693 y Fq(2\))i
Fu(9)p Fp(c)95 4702 y Fj(k)154 4693 y Fu(2)22 b Fp(C)282
4702 y Fj(k)347 4693 y Fp(s:t:)28 b(c)514 4702 y Fj(k)579
4693 y Fp(is)g(ir)r(r)r(el)q(ev)s(ant)e(to)i(C)1194 4702
y Fj(l)-77 4855 y Fq(W)-6 b(e)25 b(illustrate)h(this)f(t)n(w)n(o)h
(scenarios)h(in)e(table)g(3.)35 b(There)26 b(are)f(t)n(w)n(o)-152
4942 y(parts)c(in)g(this)g(table,)i(in)e(whic)n(h)g(the)f(left)i(part)f
(sho)n(ws)h(the)e(case)i(that)-152 5029 y(the)17 b(failure-inducing)h
(com)n(binations)f(satisfy)i(the)e(\014rst)g(prop)r(erties\()-152
5116 y(b)r(oth)34 b(\(0,0,-\))g(and)g(\(0,1,0\))h(subsume)f
(\(0,-,-\)\).)59 b(While)34 b(the)g(righ)n(t)-152 5203
y(part)c(giv)n(e)g(an)f(example)h(to)g(the)f(second)h(prop)r(erties,)i
(as)e(\(1,-,-\))f(is)-152 5290 y(irrelev)l(an)n(t)d(to)f(an)n(y)g(one)h
(of)g(\(0,0,-\))g(and)f(\(0,1,0\).)-77 5378 y(Next,)g(let)h(mo)n(v)n(e)
f(to)h(formal)h(analysis)f(of)g(the)g(masking)f(e\013ects.)2381
-17 y Fo(T)-7 b(able)28 b(3:)39 b(example)27 b(of)j(t)n(w)n(o)f
(scenarios)2401 241 y Fp(T)2446 250 y Fj(l)2752 241 y
Fp(T)2797 250 y Fj(k)p 2256 271 716 5 v 2301 332 a Fq(\(0,)d(0,)g(0\))
90 b(\(0,)26 b(0,)g(0\))2301 420 y(\(0,)g(0,)g(1\))90
b(\(0,)26 b(0,)g(1\))2301 507 y(\(0,)g(1,)g(0\))90 b(\(0,)26
b(1,)g(0\))2659 594 y(\(0,)g(1,)g(1\))p 2256 624 V 2396
685 a Fp(C)2451 694 y Fj(l)2747 685 y Fp(C)2802 694 y
Fj(k)p 2256 716 V 2308 777 a Fq(\(0,)g(0,)g(-\))108 b(\(0,)26
b(-,)f(-\))2301 864 y(\(0,)h(1,)g(0\))p 2256 894 V 3245
67 a Fp(T)3290 76 y Fj(l)3596 67 y Fp(T)3641 76 y Fj(k)p
3100 97 V 3145 158 a Fq(\(0,)g(0,)g(0\))90 b(\(0,)26
b(0,)g(0\))3145 245 y(\(0,)g(0,)g(1\))90 b(\(0,)26 b(0,)g(1\))3145
332 y(\(0,)g(1,)g(0\))90 b(\(0,)26 b(1,)g(0\))3503 420
y(\(1,)g(0,)g(0\))3503 507 y(\(1,)g(0,)g(1\))3503 594
y(\(1,)g(1,)g(0\))3503 681 y(\(1,)g(1,)g(1\))p 3100 711
V 3240 772 a Fp(C)3295 781 y Fj(l)3591 772 y Fp(C)3646
781 y Fj(k)p 3100 803 V 3152 864 a Fq(\(0,)f(0,)i(-\))101
b(\(0,)26 b(0,)h(-\))3145 951 y(\(0,)f(1,)g(0\))90 b(\(0,)26
b(1,)g(0\))3516 1038 y(\(1,)g(-,)f(-\))p 3100 1068 V
2040 1296 a Fr(3.2)99 b(masking)25 b(effect)2123 1474
y Fn(De\014nition)j(5.)37 b Fq(A)g Fn(masking)h(e\013e)l(ct)46
b Fq(is)38 b(the)f(e\013ect)h(that)f(a)h(test)2040 1561
y(case)27 b Fn(t)33 b Fq(hit)25 b(a)h(failure-inducing)f(com)n
(bination)h(for)h Fp(F)3595 1569 y Fj(a)3632 1561 y Fq(,)f(sa)n(y)g
Fp(c)g Fq(,)g(but)2040 1648 y(do)r(esn't)31 b(trigger)i(fault)f
Fp(F)2802 1656 y Fj(a)2871 1648 y Fq(as)f(exp)r(ected)g(b)r(ecause)g
(this)h(test)f(case)2040 1736 y(triggered)26 b(other)g(fault)g(whic)n
(h)f(is)h(di\013eren)n(t)f(from)i Fp(F)3576 1744 y Fj(a)3613
1736 y Fq(,)f(sa)n(y)-6 b(,)26 b Fp(F)3857 1745 y Fj(b)3888
1736 y Fq(.)2115 1893 y(based)37 b(on)h(this)f(de\014nition,)j(w)n(e)e
(can)g(learn)f(that,)k(to)c(get)h(the)2040 1980 y(accurate)27
b(result,)g(w)n(e)g(should)g(tak)n(e)f(consider)h(these)f(test)h(cases)
h(do)2040 2067 y(not)20 b(trigger)i(some)f(sp)r(eci\014c)f(fault)h(b)r
(ecause)f(it)h(trigger)g(other)g(faults.)2040 2155 y(W)-6
b(e)24 b(call)i(these)e(test)h(cases)g Fp(T)2891 2167
y Fj(mask)q Fk(\()p Fj(F)3105 2175 y Ff(m)3160 2167 y
Fk(\))3213 2155 y Fq(for)g(a)g(particular)g(fault)g Fp(F)3974
2163 y Fj(m)2040 2242 y Fq(mask)n(ed)g(b)n(y)g(these)g(test)h(cases.)
2115 2329 y(So)21 b(in)g(fact,)i(the)d(failure-inducing)h(com)n
(bination)g(for)h Fp(F)3735 2337 y Fj(m)3815 2329 y Fq(should)2040
2416 y(b)r(e)17 b(the)g(com)n(bination)g(whic)n(h)g(ha)n(v)n(e)f(the)h
(test)g(cases)h Fp(T)3561 2424 y Fj(F)3600 2432 y Ff(m)3671
2360 y Fd(S)3748 2416 y Fp(T)3793 2428 y Fj(mask)q Fk(\()p
Fj(F)4007 2436 y Ff(m)4062 2428 y Fk(\))4090 2416 y Fq(.)2040
2503 y(W)-6 b(e)29 b(call)i(the)d(failure-inducing)i(com)n(binations)g
(with)f(considering)2040 2590 y(the)20 b(masking)g(e\013ects)g(the)f
Fn(p)l(erfe)l(ct)24 b(failur)l(e-inducing)e(c)l(ombination-)2040
2678 y(s)p Fq(.)59 b(Ho)n(w)n(ev)n(er,)36 b(this)d(is)h(not)g(p)r
(ossible)g(in)g(practice,)i(unless)d(w)n(e)i(\014x)2040
2765 y(some)29 b(bugs)f(in)g(the)g(SUT)g(and)g(re-execute)f(the)h(test)
g(cases)i(to)e(\014g-)2040 2852 y(ure)d(out)h Fp(T)2354
2864 y Fj(mask)q Fk(\()p Fj(F)2568 2872 y Ff(m)2622 2864
y Fk(\))2651 2852 y Fq(.)2115 2939 y(F)-6 b(or)37 b(traditional)h(F)n
(CI)f(approac)n(hes,)j(there)d(are)g(t)n(w)n(o)h(kinds)e(of)2040
3026 y(approac)n(hes,)26 b(let)g(me)g(see)g(what)f(they)g(lik)n(e:)2063
3179 y Fb(3.2.1)90 b(r)m(e)l(gar)m(d)20 b(as)i(one)g(fault)2115
3287 y Fq(This)35 b(is)g(the)g(most)g(common)g(dealing)g(approac)n(h,)i
(they)d(don't)2040 3374 y(distinguish)c(the)g(faults,)i(i.e.,)g(regard)
f(all)g(the)e(t)n(yp)r(es)g(of)i(faults)g(as)2040 3461
y(one)26 b(fault{)p Fn(failur)l(e)p Fq(,)g(others)g(as)g(the)f
Fn(p)l(ass)p Fq(.)2115 3548 y(So)19 b(they)f(will)j(\014nd)d(the)h
Fp(c)2826 3556 y Fj(m)2904 3548 y Fq(for)h Fp(T)3060
3556 y Fj(F)3132 3548 y Fq(=)3213 3492 y Fd(S)3277 3513
y Fj(L)3277 3571 y(i)p Fk(=1)3393 3548 y Fp(F)3442 3556
y Fj(i)3469 3548 y Fq(,)h Fp(L)e Fq(is)h(the)f(n)n(um)n(b)r(er)2040
3635 y(of)27 b(all)f(the)f(faults)i(in)e(the)g(SUT.)h(Ob)n(viously)-6
b(,)24 b Fp(T)3422 3643 y Fj(F)3461 3651 y Ff(m)3533
3579 y Fd(S)3610 3635 y Fp(T)3655 3647 y Fj(mask)q Fk(\()p
Fj(F)3869 3655 y Ff(m)3923 3647 y Fk(\))3973 3635 y Fu(\032)2040
3723 y Fp(T)2085 3731 y Fj(F)2165 3723 y Fq(.)46 b(So)29
b(in)h(this)f(circumstance,)i(b)n(y)d(the)h(prop)r(osed)h(lemma,)h(the)
2040 3810 y(failure-inducing)26 b(com)n(binations)f(w)n(e)h(get)g(will)
h(ha)n(v)n(e)e(some)h(com)n(bi-)2040 3897 y(nations)34
b(irrelev)l(an)n(t)f(to)h(the)f(p)r(erfect)h(failure-inducing)g(com)n
(bina-)2040 3984 y(tions)25 b(,)f(or)h(some)g(com)n(binations)g(just)f
(b)r(e)g(the)g(c)n(hild-com)n(binations)2040 4071 y(of)i(some)h(of)f
(the)f(p)r(erfect)h(failure-inducing)g(com)n(binations.)2063
4224 y Fb(3.2.2)90 b(distinguish)22 b(fault)h(by)f(b)n(ug)o(gy)f
(information)2115 4332 y Fq(Distinguish)d(the)f(faults)i(b)n(y)e(the)h
(exception)g(traces)g(or)h(error)f(co)r(de)2040 4419
y(can)38 b(help)g(mak)n(e)g(F)n(CI)g(approac)n(hes)g(fo)r(cus)h(on)f
(particular)h(fault.)2040 4506 y(Ylimaz)h(in)f([18])h(prop)r(ose)g(a)f
Fn(multiple-class)45 b Fq(failure)c(c)n(haracter-)2040
4593 y(ize)25 b(metho)r(d)f(instead)g(of)h Fn(ternary-class)34
b Fq(approac)n(hes)24 b(to)h(mak)n(e)f(the)2040 4680
y(c)n(haractering)31 b(approac)n(h)f(more)h(accurately)-6
b(.)49 b(Besides,)33 b(other)d(ap-)2040 4767 y(proac)n(hes)c(can)g
(also)h(b)r(e)e(easily)i(extended)d(to)i(apply)f(on)g(SUT)g(with)2040
4855 y(m)n(ultiple)k(faults.)47 b(W)-6 b(e)29 b(call)i(this)e(approac)n
(h)g Fn(distinguish)j(F)n(CI)40 b Fq(ap-)2040 4942 y(proac)n(hes.)2115
5029 y(Without)22 b(no)g(information)i(of)f(the)f(masking)h(e\013ect,)h
(distinguish)2040 5116 y(F)n(CI)31 b(approac)n(hes)h(can)f(only)g(iden)
n(tify)g(the)g Fp(c)3379 5124 y Fj(m)3469 5116 y Fq(for)h
Fp(T)3637 5124 y Fj(F)3676 5132 y Ff(m)3735 5116 y Fq(.)51
b(In)31 b(this)2040 5203 y(case,)38 b(w)n(e)e(can)f(learn)g(that)f
Fp(T)2929 5211 y Fj(F)2968 5219 y Ff(m)3040 5147 y Fd(S)3116
5203 y Fp(T)3161 5215 y Fj(mask)q Fk(\()p Fj(F)3375 5223
y Ff(m)3430 5215 y Fk(\))3495 5203 y Fu(\033)j Fp(T)3637
5211 y Fj(F)3676 5219 y Ff(m)3769 5203 y Fq(,)h(conse-)2040
5290 y(quen)n(tly)-6 b(,)18 b(the)f(failure-inducing)h(com)n(binations)
g(w)n(e)g(get)g(in)g(this)g(case)2040 5378 y(will)32
b(ha)n(v)n(e)e(some)h(com)n(binations)g(b)r(e)g(the)f(paren)n(t-com)n
(bination)g(of)p eop end
%%Page: 5 5
TeXDict begin 5 4 bop -152 -69 a Fq(some)26 b(p)r(erfect)g(com)n
(binations)f(or)h(completely)f(miss)h(some)g(failure-)-152
19 y(inducing)f(com)n(bination.)-77 106 y(Note)c(that)f(our)g(discuss)h
(is)g(based)g(on)g(the)f(SUT)g(is)h(a)g(determinis-)-152
193 y(tic)j(soft)n(w)n(are,)h(i.e.,)g(the)e(random)g(failing)i
(information)f(of)g(test)f(case)-152 280 y(will)35 b(b)r(e)e(ignored.)
57 b(The)33 b(non-deterministic)g(problem)g(will)h(com-)-152
367 y(plex)f(our)f(test)h(scenario,)j(whic)n(h)d(will)h(not)f(b)r(e)f
(discussed)h(in)g(this)-152 454 y(pap)r(er.)-152 690
y Fr(4.)100 b(TEST)26 b(CASE)g(REPLA)-5 b(CING)24 b(STRA)-9
b(TEGY)-77 798 y Fq(Previous)25 b(section)g(formally)g(studied)f(the)g
(case)h(that)f(under)f(the)-152 885 y(masking)g(e\013ects,)h(neither)f
(regarding)g(as)h(one)f(fault)g(approac)n(h)g(nor)-152
972 y(distinguishing)32 b(faults)g(approac)n(h)g(is)g(not)f(accurate)h
(.)53 b(The)32 b(main)-152 1059 y(reason)38 b(is)f(that)g(w)n(e)g
(cannot)f(\014gure)h(out)f(the)h Fp(T)11 b Fq(\()p Fp(mask)1538
1067 y Fj(F)1577 1075 y Ff(m)1634 1059 y Fq(\).)68 b(As)-152
1156 y Fp(T)11 b Fq(\()p Fp(mask)119 1164 y Fj(F)158
1172 y Ff(m)216 1156 y Fq(\))22 b Fu(\032)351 1100 y
Fd(S)415 1120 y Fj(L)415 1178 y(i)p Fk(=1&)p Fj(j)s Fi(6)p
Fk(=)p Fj(m)707 1156 y Fp(T)752 1164 y Fj(F)791 1175
y Ff(i)821 1156 y Fq(.)37 b(So)27 b(to)f(reduce)g(the)h(in\015uence)e
(of)-152 1252 y Fp(T)11 b Fq(\()p Fp(mask)119 1260 y
Fj(F)158 1268 y Ff(m)216 1252 y Fq(\),)20 b(w)n(e)g(need)f(to)g(reduce)
g(the)g(n)n(um)n(b)r(er)f(of)i(test)f(cases)h(that)-152
1340 y(trigger)27 b(other)e(faults)i(as)f(m)n(uc)n(h)e(as)i(p)r
(ossible.)-77 1427 y(In)c(the)g(exhaustiv)n(e)f(testing,)i(as)g(all)h
(the)e(test)g(cases)h(will)h(b)r(e)e(used)-152 1514 y(to)k(iden)n(tify)
g(the)f(failure-inducing)h(com)n(binations,)h(so)g(there)e(is)i(no)-152
1601 y(ro)r(om)h(left)f(to)g(impro)n(v)n(e)f(the)g(accurateness.)38
b(Ho)n(w)n(ev)n(er,)27 b(when)g(just)-152 1688 y(c)n(ho)r(ose)k(part)f
(of)h(the)f(whole)h(test)f(cases,)j(whic)n(h)d(is)g(practical)h(and)
-152 1775 y(sometimes)25 b(the)e(only)f(solution)i(for)g(large-scale)h
(SUT,)e(w)n(e)h(can)f(ad-)-152 1863 y(just)30 b(the)e(test)h(cases)i(w)
n(e)e(need)g(to)g(use)g(b)n(y)g(c)n(ho)r(osing)h(prop)r(er)f(ones)-152
1950 y(so)24 b(that)e(w)n(e)h(can)g(limit)g(the)f(n)n(um)n(b)r(er)g(of)
h Fp(T)11 b Fq(\()p Fp(mask)1292 1958 y Fj(F)1331 1966
y Ff(m)1389 1950 y Fq(\))22 b(to)h(b)r(e)g(as)g(less)-152
2037 y(as)j(p)r(ossible.)-152 2209 y Fr(4.1)99 b(Replace)22
b(test)e(con\002guration)i(that)f(trigger)g(un-)72 2306
y(expected)27 b(fault)-77 2414 y Fq(The)32 b(basic)g(idea)g(is)g(to)f
(discard)h(the)f(test)h(con\014gurations)f(that)-152
2501 y(trigger)22 b(other)f(faults)h(and)f(generate)g(other)g(test)g
(con\014gurations)h(to)-152 2588 y(represen)n(t)g(them.)32
b(These)23 b(regenerate)f(test)g(con\014gurations)g(should)-152
2675 y(either)36 b(pass)g(the)f(executing)g(or)h(trigger)g
Fp(F)1158 2683 y Fj(i)1185 2675 y Fq(.)64 b(The)36 b(replacemen)n(t)
-152 2762 y(m)n(ust)23 b(ful\014l)h(some)g(criteria,)h(suc)n(h)e(as)h
(for)g(CT)-6 b(A,)24 b(the)e(input)h(for)h(this)-152
2850 y(algorithm)34 b(is)g(a)f(co)n(v)n(ering)g(arra)n(y)-6
b(,)35 b(and)e(if)h(w)n(e)f(replace)h(some)g(test)-152
2937 y(con\014guration)27 b(in)g(it,)h(w)n(e)g(should)e(ensure)h(that)g
(the)f(co)n(v)n(ering)i(rate)-152 3024 y(is)e(not)g(c)n(hanged.)-77
3111 y(Commonly)-6 b(,)35 b(when)e(w)n(e)g(replace)g(the)g(test)g
(con\014guration)f(that)-152 3198 y(trigger)g(unexp)r(ected)c(fault)j
(with)g(a)g(new)f(test)h(con\014guration,)g(w)n(e)-152
3285 y(should)25 b(k)n(eep)f(some)i(part)e(in)h(the)g(original)h(test)f
(con\014guration,)g(w)n(e)-152 3373 y(call)32 b(this)f(part)g(as)g
Fn(\014xe)l(d)i(p)l(art)p Fq(,)h(and)c(m)n(utan)n(t)g(other)h(part)g
(with)g(d-)-152 3460 y(i\013eren)n(t)d(v)l(alues)f(from)i(the)e
(original)i(one.)40 b(F)-6 b(or)28 b(example,)g(if)h(a)f(test)-152
3547 y(con\014guration)f(\(1,1,1,1\))i(triggered)f(Err)f(2,)h(whic)n(h)
f(is)g(not)g(the)g(ex-)-152 3634 y(p)r(ected)33 b(Err)g(1,)j(and)d(the)
g(\014xed)f(part)h(is)g(\(-,-,1,1\),)j(then)c(w)n(e)i(ma)n(y)-152
3721 y(regenerate)e(a)f(test)g(con\014guration)f(\(0,0,1,1\))j(whic)n
(h)d(will)i(pass)f(or)-152 3808 y(trigger)c(Err)f(1.)-77
3896 y(The)c Fn(\014xe)l(d)j(p)l(art)30 b Fq(can)22 b(b)r(e)g(the)g(sc)
n(hemas)g(that)g(only)f(app)r(ear)h(in)g(the)-152 3983
y(original)38 b(test)e(con\014guration)g(whic)n(h)g(other)g(test)g
(con\014gurations)-152 4070 y(in)24 b(the)g(co)n(v)n(ering)g(arra)n(y)g
(did)g(not)g(con)n(tain\(for)g(the)g(algorithm)h(tak)n(e)-152
4157 y(co)n(v)n(ering)19 b(arra)n(y)f(as)h(the)f(input:)30
b(CT)-6 b(A\),)19 b(or)g(the)e(factors)j(that)e(should)-152
4244 y(not)31 b(b)r(e)f(c)n(hanged)g(in)h(the)f(OF)n(OT)g(algorithms,)k
(or)d(the)f(part)g(that)-152 4332 y(should)i(not)g(b)r(e)g(m)n(utan)n
(t)f(of)i(the)e(test)i(con\014guration)f(in)f(the)h(last)-152
4419 y(iteration\(FIC)p 296 4419 30 3 v 30 w(BS\).)-77
4506 y(The)21 b(pro)r(cess)h(of)g(replace)g(a)f(test)h(con\014guration)
f(with)g(a)g(new)h(one)-152 4593 y(with)k(k)n(eeping)f(some)h(\014xed)f
(part)g(is)h(depicted)f(in)g(Algorithm)h(1:)-77 4680
y(The)f(inputs)f(for)i(this)e(algorithm)i(consists)g(of)f(a)h(test)e
(con\014gura-)-152 4767 y(tion)j(whic)n(h)g(trigger)h(an)e(unexp)r
(ected)f(fault)j({)f Fp(t)1266 4776 y Fj(or)r(ig)r(inal)1499
4767 y Fq(,)h(the)e(\014xed)-152 4855 y(part)j(whic)n(h)g(w)n(e)g(w)n
(an)n(t)g(to)g(k)n(eep)f(from)i(the)e(original)j(test)e(con\014gu-)-152
4942 y(ration)d({)f Fp(s)173 4951 y Fj(f)6 b(ixed)356
4942 y Fq(,)26 b(the)e(fault)i(t)n(yp)r(e)e(whic)n(h)h(w)n(e)h(curren)n
(t)e(fo)r(cus)i({)f Fp(F)1793 4950 y Fj(i)1820 4942 y
Fq(.)-152 5029 y(And)h(the)h(v)l(alues)g(sets)g(that)g(eac)n(h)g
(option)g(can)g(tak)n(e)g(from)h(resp)r(ec-)-152 5116
y(tiv)n(ely)-6 b(.)43 b(The)29 b(output)e(of)i(this)g(algorithm)g(is)g
(a)g(test)g(con\014guration)-152 5203 y Fp(t)-124 5211
y Fj(new)19 5203 y Fq(whic)n(h)d(either)f(trigger)i(the)e(exp)r(ected)g
Fp(F)1205 5211 y Fj(i)1257 5203 y Fq(or)g(passed.)-77
5290 y(In)h(fact,)j(this)e(algorithm)h(is)g(a)f(big)g(lo)r(op\(line)h
(1)g(-)e(14\))i(whic)n(h)f(b)r(e)-152 5378 y(parted)e(in)n(to)h(t)n(w)n
(o)g(parts:)p 2040 -145 1993 7 v 2040 -77 a Fo(Algorithm)i(1)d
Fq(replace)g(test)f(con\014gurations)h(that)f(trigger)h(unex-)2040
11 y(p)r(ected)g(fault)p 2040 45 1993 4 v 2040 113 a
Fo(Input:)39 b Fp(t)2346 122 y Fj(or)r(ig)r(inal)3073
113 y Fp(.)26 b Fq(original)h(test)e(con\014gurations)2324
201 y Fp(F)2373 209 y Fj(i)3641 201 y Fp(.)h Fq(fault)g(t)n(yp)r(e)2324
288 y Fp(s)2360 297 y Fj(f)6 b(ixed)3643 288 y Fp(.)25
b Fq(\014xed)g(part)2324 375 y Fp(P)11 b(ar)r(am)311
b(.)26 b Fq(v)l(alues)f(that)g(eac)n(h)h(option)f(can)h(tak)n(e)2040
462 y Fo(Output:)39 b Fp(t)2413 470 y Fj(new)2877 462
y Fp(.)26 b Fq(the)f(regenerate)h(test)g(con\014guration)2073
549 y(1:)39 b Fo(while)24 b(not)i Fq(MeetEndCriteria\(\))g
Fo(do)2073 637 y Fq(2:)154 b Fp(s)2322 645 y Fj(mutant)2558
637 y Fu( )21 b Fp(t)2684 646 y Fj(or)r(ig)r(inal)2934
637 y Fu(\000)c Fp(s)3047 646 y Fj(f)6 b(ixed)2073 724
y Fq(3:)154 b Fo(for)30 b(eac)n(h)25 b Fp(opt)20 b Fu(2)i
Fp(s)2851 732 y Fj(mutant)3091 724 y Fo(do)2073 811 y
Fq(4:)269 b Fp(i)21 b Fq(=)g Fp(g)s(etI)6 b(ndex)p Fq(\()p
Fp(P)11 b(ar)r(am;)e(opt)p Fq(\))2073 898 y(5:)269 b
Fp(opt)21 b Fu( )g Fp(opt)2728 866 y Fi(0)2775 898 y
Fp(s:t:)26 b(o)21 b Fu(2)h Fp(P)11 b(ar)r(am)p Fq([)p
Fp(i)p Fq(])25 b Fp(and)g(opt)3634 866 y Fi(0)3656 898
y Fq(!)d(=)f Fp(opt)2073 985 y Fq(6:)154 b Fo(end)25
b(for)2073 1072 y Fq(7:)154 b Fp(t)2314 1080 y Fj(new)2452
1072 y Fu( )22 b Fp(s)2587 1081 y Fj(f)6 b(ixed)2757
1016 y Fd(S)2834 1072 y Fp(s)2870 1080 y Fj(mutant)2073
1160 y Fq(8:)154 b Fp(r)r(esul)q(t)20 b Fu( )h Fp(execute)p
Fq(\()p Fp(t)2924 1168 y Fj(new)3041 1160 y Fq(\))2073
1247 y(9:)154 b Fo(if)33 b Fp(r)r(esul)q(t)21 b Fq(==)g
Fp(P)11 b(AS)t(S)29 b(or)e(r)r(esul)q(t)21 b Fq(==)g
Fp(F)3498 1255 y Fj(i)3550 1247 y Fo(then)2040 1334 y
Fq(10:)270 b Fo(return)26 b Fp(t)2706 1342 y Fj(new)2040
1421 y Fq(11:)155 b Fo(else)2040 1508 y Fq(12:)270 b(con)n(tin)n(ue)
2040 1595 y(13:)155 b Fo(end)25 b(if)2040 1683 y Fq(14:)39
b Fo(end)26 b(while)2040 1770 y Fq(15:)39 b Fo(return)27
b Fn(nul)t(l)p 2040 1805 V 2115 2047 a Fq(The)f(\014rst)f(part\(line)h
(2)g(-)g(line)g(7\):)35 b(generate)26 b(a)g(new)g(test)g(con\014g-)2040
2134 y(uration)32 b(whic)n(h)f(is)h(di\013eren)n(t)e(from)j(the)e
(original)i(one.)52 b(This)32 b(test)2040 2221 y(con\014guration)26
b(will)h(k)n(eep)e(the)h(\014xed)f(part)g(\(line)i(7\),)f(and)g(just)g
(m)n(u-)2040 2308 y(tan)n(t)37 b(these)g(factors)h(are)g(not)f(in)g
(the)g(\014xed)f(part\(line)h(2\).)69 b(The)2040 2395
y(m)n(utan)n(t)33 b(for)i(eac)n(h)f(factor)h(is)f(just)g(c)n(ho)r(ose)h
(one)f(legal)i(v)l(alue)d(that)2040 2483 y(is)d(di\013eren)n(t)f(from)i
(the)e(original)j(one\(line)d(3)i(-)e(6\).)47 b(The)30
b(c)n(ho)r(osing)2040 2570 y(pro)r(cess)c(is)g(just)f(b)n(y)f(random)h
(and)f(the)h(generated)g(test)g(con\014gura-)2040 2657
y(tion)d(m)n(ust)f(b)r(e)h(di\013eren)n(t)f(eac)n(h)h(iteration\(can)g
(b)r(e)f(implemen)n(ted)h(b)n(y)2040 2744 y(hashing)k(metho)r(d\).)2115
2831 y(Second)k(part)h(is)h(to)g(v)l(alidate)f(whether)g(this)g(newly)h
(generated)2040 2918 y(test)20 b(con\014guration)g(matc)n(hes)g(our)g
(exp)r(ect\(line)f(8)h(-)g(lone)g(13\).)33 b(First)2040
3006 y(w)n(e)20 b(will)h(execute)d(the)h(SUT)g(under)f(the)h(newly)g
(generated)h(test)f(con-)2040 3093 y(\014guration\(line)j(8\),)h(and)e
(then)g(c)n(hec)n(k)g(the)h(executed)f(result,)i(either)2040
3180 y(passed)i(or)h(trigger)g(the)f(exp)r(ected)f(fault)i({)f
Fp(F)3368 3188 y Fj(i)3420 3180 y Fq(will)h(matc)n(h)f(our)g(ex-)2040
3267 y(p)r(ect.\(line)f(9\))h(If)f(so)h(w)n(e)f(will)i(directly)e
(return)f(this)h(test)g(con\014gura-)2040 3354 y(tion\(line)19
b(10\).)33 b(Otherwise,)21 b(w)n(e)e(will)i(rep)r(eat)e(the)f(pro)r
(cess\(generate)2040 3441 y(newly)26 b(test)f(con\014guration)h(and)f
(c)n(hec)n(k\)\(line)f(11)j(-12\).)2115 3529 y(It)33
b(is)i(noted)f(that)g(the)f(lo)r(op)i(ha)n(v)n(e)f(another)g(end)f
(exit)h(b)r(esides)2040 3616 y(w)n(e)f(ha)n(v)n(e)e(\014nd)h(a)g(exp)r
(ected)f(test)i(con\014guration\(line)f(10\),)j(whic)n(h)2040
3703 y(is)23 b(when)g(function)f Fn(Me)l(etEndCriteria\(\))28
b Fq(return)22 b(a)h(true)f(v)l(alue\(line)2040 3790
y(1\).)47 b(W)-6 b(e)30 b(didn't)f(explicitly)g(sho)n(w)h(what)g(the)g
(function)f Fn(Me)l(etEnd-)2040 3877 y(Criteria\(\))k
Fq(is)d(lik)n(e,)h(b)r(ecause)e(this)h(is)g(dep)r(ending)e(the)h
(computing)2040 3964 y(resource)h(y)n(ou)e(o)n(wn)h(and)f(the)g(ho)n(w)
h(accurate)h(y)n(ou)e(w)n(an)n(t)g(to)h(the)g(i-)2040
4052 y(den)n(tifying)19 b(result)g(to)h(b)r(e.)32 b(In)18
b(detail,)j(if)f(y)n(ou)f(w)n(an)n(t)g(to)g(y)n(our)g(iden)n(tify)2040
4139 y(pro)r(cess)31 b(b)r(e)e(more)h(accurate)g(and)g(y)n(ou)f(ha)n(v)
n(e)g(enough)g(computing)2040 4226 y(resource,)k(y)n(ou)d(can)h(try)f
(m)n(uc)n(h)g(times)h(to)g(get)g(the)g(exp)r(ected)f(test)2040
4313 y(con\014guration,)24 b(otherwise,)h(y)n(ou)d(ma)n(y)h(just)g(try)
g(a)g(relativ)n(ely)g(small)2040 4400 y(times)j(to)g(get)g(the)f(exp)r
(ected)f(test)i(con\014guration.)2115 4488 y(In)c(this)h(pap)r(er,)g(w)
n(e)g(just)g(set)g(3)g(as)h(the)e(biggest)i(rep)r(eat)f(times)g(for)
2040 4575 y(function.)60 b(When)34 b(it)g(ended)g(with)g
Fn(Me)l(etEndCriteria\(\))39 b Fq(is)c(true,)2040 4662
y(w)n(e)30 b(will)g(return)e(n)n(ull\(line)h(15\),)i(whic)n(h)e(means)g
(w)n(e)h(cannot)e(\014nd)g(a)2040 4749 y(exp)r(ected)d(test)g
(con\014guration.)2040 4912 y Fr(4.2)99 b(Examples)25
b(of)g(applying)g(the)h(strategy)2115 5020 y Fq(Next)g(w)n(e)h(will)h
(tak)n(e)e(t)n(w)n(o)h(MFS)g(iden)n(tifying)g(algorithms)h(as)f(the)
2040 5107 y(sub)t(ject)f(to)g(see)g(ho)n(w)f(our)h(approac)n(h)f(w)n
(orks)h(on)g(them.)2063 5270 y Fb(4.2.1)90 b(OFO)l(T)23
b(e)n(xamples)2115 5378 y Fq(Assume)f(w)n(e)i(ha)n(v)n(e)e(test)g(a)i
(system)e(with)h(four)g(parameters,)i(eac)n(h)p eop end
%%Page: 6 6
TeXDict begin 6 5 bop -152 -17 a Fo(T)-7 b(able)26 b(4:)38
b(Iden)n(tifying)27 b(MFS)g(using)g(OF)n(OT)g(with)h(our)g(ap-)-152
70 y(proac)n(h)p -152 97 1774 5 v -154 210 5 114 v -107
176 a(original)f(test)h(con\014guration)p 932 210 V 91
w(fault)h(info)p 1620 210 V -152 214 1774 5 v -154 328
5 114 v -107 294 a Fq(0)128 b(0)g(0)g(0)p 932 328 V 550
w(Err)26 b(1)p 1620 328 V -152 340 1774 5 v -154 454
5 114 v -107 420 a Fo(gen)j(test)h(con\014gurations)p
932 454 V 209 w(result)p 1620 454 V -152 458 1774 5 v
-154 571 5 114 v -107 537 a Fq(1)128 b(0)g(0)g(0)p 932
571 V 550 w(Err)26 b(1)p 1620 571 V -154 684 V -109 633
43 4 v -106 650 a(0)p -70 633 30 4 v -44 633 V -18 633
V 8 633 V 34 633 V 60 633 43 4 v 131 w(1)p 99 633 30
4 v 125 633 V 151 633 V 177 633 V 203 633 V 229 633 43
4 v 130 w(0)p 268 633 30 4 v 293 633 V 319 633 V 344
633 V 370 633 V 395 633 43 4 v 128 w(0)p 434 633 30 4
v 932 684 5 114 v 977 633 117 4 v 544 w(Err)p 1090 633
30 4 v 1116 633 43 4 v 28 w(2)p 1620 684 5 114 v -154
798 V -107 793 a Fa(:)-107 764 y Fq(0)-65 793 y Fa(:)o(::)o(:)59
764 y Fq(2)101 793 y Fa(:)o(::)o(:)225 764 y Fq(0)267
793 y Fa(:)o(::)o(:)391 764 y Fq(0)p 932 798 V 550 w(Err)g(1)p
1620 798 V -154 911 V -107 877 a(0)128 b(0)g(1)g(0)p
932 911 V 550 w(P)n(ass)p 1620 911 V -154 1024 V -107
990 a(0)g(0)g(0)g(1)p 932 1024 V 550 w(P)n(ass)p 1620
1024 V -152 1037 1774 5 v -154 1237 5 201 v -107 1116
a Fo(original)29 b(iden)n(ti\014ed:)182 b(iden)n(ti\014ed)78
b(with)i(re-)780 1203 y(placemen)n(t)p 1620 1237 V -154
1351 5 114 v -107 1317 a Fq(\()26 b(-)101 b(0)i(0)f(0)26
b(\))329 b(\()25 b(-)102 b(-)g(0)g(0)26 b(\))p 1620 1351
V -152 1355 1774 5 v -152 1608 a(has)d(three)g(options.)33
b(And)22 b(w)n(e)h(tak)n(e)g(the)f(test)h(con\014guration)f(\(0)h(0)h
(0)-152 1695 y(0\))19 b(w)n(e)f(\014nd)g(the)f(system)i(encoun)n(ter)e
(a)i(failure)g(called)g(")-9 b(Err)19 b(1")-9 b(.)32
b(Next)-152 1783 y(w)n(e)d(will)h(tak)n(e)e(the)g(MFS)g(iden)n(tifying)
g(algorithms)i({)f(OF)n(OT)f(with)-152 1870 y(the)i(help)h(of)g(our)g
(approac)n(h)f(to)h(iden)n(tify)f(the)g(MFS)h(for)g(the)g(")-9
b(Err)-152 1957 y(1")g(.)44 b(The)28 b(pro)r(cess)i(is)f(listed)g(in)f
(table)h(4.)43 b(In)28 b(this)g(table,)i(The)f(test)-152
2044 y(con\014guration)21 b(whic)n(h)g(are)h(lab)r(eled)g(with)f(a)h
(deleted)f(line)g(represen)n(t)-152 2131 y(the)31 b(original)h(test)f
(con\014guration)g(generated)g(b)n(y)f(OF)n(OT,)h(and)g(it)-152
2218 y(will)25 b(b)r(e)e(replaced)g(b)n(y)f(the)h(regenerated)g(test)g
(con\014guration)g(whic)n(h)-152 2306 y(are)j(lab)r(eled)g(with)g(a)g
(w)n(a)n(v)n(e)g(line)g(under)e(it.)-77 2393 y(F)-6 b(rom)19
b(this)g(table,)h(w)n(e)g(can)f(\014nd)e(the)i(algorithm)h(m)n(utan)n
(t)d(one)i(fac-)-152 2480 y(tor)k(to)g(tak)n(e)f(the)h(di\013eren)n(t)f
(v)l(alue)g(from)i(the)e(original)i(test)f(con\014gu-)-152
2567 y(ration)d(on)f(time.)32 b(Originally)20 b(if)g(the)f(test)g
(con\014guration)g(encoun)n(ter)-152 2654 y(the)31 b(di\013eren)n(t)g
(condition)g(with)h(the)e(Err)i(1,)i(OF)n(OT)d(will)h(mak)n(e)g(a)-152
2741 y(judgemen)n(t)i(that)g(the)g(MFS)g(w)n(as)i(brok)n(en,)g(in)e
(another)g(w)n(ord,)j(if)-152 2829 y(w)n(e)25 b(c)n(hange)f(one)g
(factor)h(and)e(it)h(do)r(es)g(not)g(trigger)h(the)e(same)i(fault,)-152
2916 y(w)n(e)33 b(will)g(lab)r(el)g(them)f(as)h(one)f(failure-inducing)
g(factor,)j(after)e(w)n(e)-152 3003 y(c)n(hanged)i(all)i(the)e(elemen)n
(ts,)k(w)n(e)d(will)h(get)f(the)f(failure-inducing)-152
3090 y(sc)n(hemas.)43 b(F)-6 b(or)29 b(this)f(case,)i(as)f(when)f(w)n
(e)g(c)n(hange)g(the)g(second)g(fac-)-152 3177 y(tor)22
b(,)h(third)e(factor)i(and)e(the)g(fourth)g(factor,)j(it)e(do)r(esn't)g
(trigger)g(the)-152 3264 y(Err)29 b(1)g(\()f(for)i(second)e(factor,)j
(it)d(trigger)i(Err)e(2)h(and)f(for)h(the)g(third)-152
3352 y(and)g(fourth,)i(it)e(passed\).)46 b(So)29 b(if)h(w)n(e)g(do)f
(not)g(regenerate)h(the)f(test)-152 3439 y(con\014guration)d(\(0)g(2)g
(0)g(0\),)g(w)n(e)g(will)h(get)f(the)f(MFS)h({)g(\()f(-)g(0)h(0)g(0\))g
(for)-152 3526 y(the)f(err)h(1\(whic)n(h)g(are)g(also)h(lab)r(eled)f
(with)f(a)h(delete)g(line\).)-77 3613 y(Ho)n(w)n(ev)n(er,)21
b(if)f(w)n(e)g(replace)g(the)f(test)g(con\014guration)g(\(0)h(1)g(0)f
(0\))h(with)-152 3700 y(\(0)29 b(2)g(0)g(0\))f(whic)n(h)h(triggered)g
(err)g(1)g(\(in)f(this)g(case,)j(the)d(\014xed)f(part)-152
3788 y(of)h(the)e(test)g(con\014guration)h(is)g(\(0,)g(-)f(-)g(-\)\),)g
(w)n(e)h(will)h(\014nd)d(that)h(only)-152 3875 y(when)32
b(w)n(e)g(c)n(hange)f(the)g(third)g(and)g(fourth)g(factor)i(will)f(w)n
(e)g(brok)n(e)-152 3962 y(the)f(MFS)h(for)g(err)g(1,)i(so)e(with)f(our)
h(approac)n(h,)h(w)n(e)f(will)h(\014nd)d(the)-152 4049
y(MFS)e(for)g(err)g(1)g(should)f(b)r(e)h(\(-)f(-)g(0)h(0\))f(\(lab)r
(eled)h(with)g(a)g(w)n(a)n(v)n(e)g(line)-152 4136 y(under)d(it\).)-129
4311 y Fb(4.2.2)90 b(CT)-5 b(A)23 b(e)n(xamples)-77 4419
y Fq(CT)-6 b(A)32 b(uses)h(the)f(co)n(v)n(ering)g(arra)n(y)h(as)g(its)f
(inputs)g(and)f(then)h(use)-152 4506 y(classi\014cation)37
b(tree)f(algorithm)g(to)g(c)n(haracterize)g(the)f(MFS.)h(F)-6
b(or)-152 4593 y(this)32 b(algorithm,)j(w)n(e)d(still)h(assume)g(the)e
(SUT)h(has)g(4)g(parameters)-152 4680 y(and)k(eac)n(h)g(one)f(has)i(3)f
(v)l(alues.)65 b(Then)35 b(w)n(e)i(will)g(initial)g(a)f(2-w)n(a)n(y)
-152 4767 y(co)n(v)n(ering)19 b(arra)n(y)g(as)g(the)f(input)f(for)j(CT)
-6 b(A)18 b(algorithm)i(whic)n(h)e(is)h(listed)-152 4855
y(in)36 b(table)g(5.)66 b(The)37 b(delete)f(line)g(and)g(w)n(a)n(v)n(e)
g(line)g(ha)n(v)n(e)g(the)f(same)-152 4942 y(meaning)26
b(as)g(the)f(OF)n(OT)h(example.)-77 5029 y(Let's)31 b(lo)r(ok)h(at)e
(the)h(original)h(test)f(con\014guration)f(\(0)h(1)g(1)g(1\),)i(it)-152
5116 y(triggered)28 b(the)f(err)h(2)f(whic)n(h)h(is)f(not)h(as)f(our)h
(exp)r(ected,)f(so)h(w)n(e)g(will)-152 5203 y(replace)g(it)f(with)g
(other)g(test)g(con\014gurations.)40 b(A)26 b(prerequisite)h(for)-152
5290 y(this)22 b(replacemen)n(t)g(is)h(that)e(w)n(e)i(should)f(not)f
(decrease)i(the)f(co)n(v)n(ering)-152 5378 y(rate.)34
b(As)24 b(the)g(original)h(test)f(con\014guration)g(con)n(tain)g(the)g
(2-degree)2040 -17 y Fo(T)-7 b(able)33 b(5:)50 b(Iden)n(tifying)34
b(MFS)g(using)h(CT)-7 b(A)34 b(with)g(our)i(ap-)2040
70 y(proac)n(h)p 2040 97 V 2038 210 5 114 v 2085 176
a(co)n(v)n(ering)28 b(arra)n(ys)p 3124 210 V 499 w(fault)h(info)p
3811 210 V 2040 214 1774 5 v 2038 328 5 114 v 2085 294
a Fq(0)128 b(0)g(0)g(0)p 3124 328 V 550 w(Err)26 b(1)p
3811 328 V 2038 441 V 2083 389 43 4 v 2086 407 a(0)p
2122 389 30 4 v 2148 389 V 2174 389 V 2200 389 V 2226
389 V 2252 389 43 4 v 131 w(1)p 2291 389 30 4 v 2317
389 V 2343 389 V 2369 389 V 2395 389 V 2421 389 43 4
v 130 w(1)p 2459 389 30 4 v 2485 389 V 2511 389 V 2536
389 V 2562 389 V 2587 389 43 4 v 128 w(1)p 3124 441 5
114 v 3169 389 117 4 v 544 w(Err)p 3282 389 30 4 v 3308
389 43 4 v 28 w(2)p 3811 441 5 114 v 2038 554 V 2085
550 a Fa(:)2085 520 y Fq(1)2126 550 y Fa(::)o(::)2251
520 y Fq(1)2292 550 y Fa(:::)o(:)2417 520 y Fq(1)2459
550 y Fa(:)o(::)o(:)2583 520 y Fq(1)p 3124 554 V 550
w(Err)g(1)p 3811 554 V 2038 668 V 2085 663 a Fa(:)2085
634 y Fq(0)2126 663 y Fa(::)o(::)2251 634 y Fq(1)2292
663 y Fa(:::)o(:)2417 634 y Fq(1)2459 663 y Fa(:)o(::)o(:)2583
634 y Fq(0)p 3124 668 V 550 w(P)n(ass)p 3811 668 V 2038
781 V 2085 776 a Fa(:)2085 747 y Fq(0)2126 776 y Fa(::)o(::)2251
747 y Fq(0)2292 776 y Fa(:::)o(:)2417 747 y Fq(0)2459
776 y Fa(:)o(::)o(:)2583 747 y Fq(1)p 3124 781 V 550
w(P)n(ass)p 3811 781 V 2038 894 V 2085 860 a(0)128 b(2)g(2)g(2)p
3124 894 V 550 w(P)n(ass)p 3811 894 V 2038 1008 V 2085
974 a(1)g(0)g(1)g(2)p 3124 1008 V 550 w(P)n(ass)p 3811
1008 V 2038 1121 V 2085 1087 a(1)g(1)g(2)g(0)p 3124 1121
V 550 w(Err)26 b(1)p 3811 1121 V 2038 1234 V 2085 1200
a(1)128 b(2)g(0)g(1)p 3124 1234 V 550 w(Err)26 b(1)p
3811 1234 V 2038 1348 V 2085 1314 a(2)128 b(0)g(2)g(1)p
3124 1348 V 550 w(P)n(ass)p 3811 1348 V 2038 1461 V 2085
1427 a(2)g(1)g(0)g(2)p 3124 1461 V 550 w(P)n(ass)p 3811
1461 V 2038 1574 V 2085 1540 a(2)g(2)g(1)g(0)p 3124 1574
V 550 w(P)n(ass)p 3811 1574 V 2040 1587 1774 5 v 2038
1787 5 201 v 2085 1666 a Fo(original)29 b(iden)n(ti\014ed:)182
b(iden)n(ti\014ed)78 b(with)i(re-)2972 1753 y(placemen)n(t)p
3811 1787 V 2038 1901 5 114 v 2085 1867 a Fq(\()25 b(0)103
b(0)f(-)g(-)25 b(\))h(:)34 b(err1)129 b(\()25 b(0)103
b(0)f(0)h(-)25 b(\):err1)p 3811 1901 V 2038 2014 V 2085
1980 a(\()g(1)103 b(1)f(-)g(-)25 b(\))h(:)34 b(err1)129
b(\()25 b(1)103 b(1)f(-)g(-)25 b(\):err1)p 3811 2014
V 2038 2127 V 2085 2093 a(\()g(1)103 b(2)f(-)g(-)25 b(\))h(:)34
b(err1)129 b(\()25 b(1)103 b(2)f(-)g(-)25 b(\):err1)p
3811 2127 V 2038 2241 V 2085 2207 a(\()g(0)103 b(1)f(-)g(-)25
b(\))h(:)34 b(err2)p 3811 2241 V 2040 2245 1774 5 v 2040
2491 a(sc)n(hema\(0)h(1)f(-)g(-\),\(0)g(-)g(1)g(-\),\(0)g(-)g(-)f
(1\),\(-,1,1,-\),\(-,1,-,1\),\(-,-,1,1\).)2040 2578 y(W)-6
b(e)23 b(mak)n(e)g(them)g(as)h(\014xed)e(part)h(that)g(the)g
(regenerate)h(test)f(con\014g-)2040 2665 y(uration)28
b(m)n(ust)f(k)n(eep,)g(as)h(w)n(e)g(cannot)f(use)h(one)f(test)h
(con\014guration)2040 2753 y(to)c(co)n(v)n(er)g(all)g(the)g(six)f
(\014xed)g(part,)h(so)g(instead,)h(w)n(e)f(use)g(three)f(addi-)2040
2840 y(tional)i(test)g(con\014gurations)g(\(1)g(1)g(1)g(1\),)g(\(0,)g
(1)g(,1)h(,0\))f(and)f(\(0,0,0,1\))2040 2927 y(to)e(co)n(v)n(er)f
(them,)h(note)g(that)f(this)g(three)g(test)h(con\014gurations)g(either)
2040 3014 y(trigger)k(err)f(1)h(or)f(pass.)35 b(If)25
b(they)f(don't)g(matc)n(h)h(this)g(condition,)g(w)n(e)2040
3101 y(will)h(try)e(other)g(test)g(con\014gurations)h(to)g(replace)g
(the)f(original)i(test)2040 3188 y(con\014guration.)2115
3276 y(W)-6 b(e)26 b(use)g(m)n(ultiple-class)i(CT)-6
b(A)26 b(as)h(our)g(sub)t(ject,)g(Ylimaz)g(in)f(the)2040
3363 y(pap)r(er)i(has)h(claimed)g(that)f(m)n(utiple-class)g(CT)-6
b(A)29 b(p)r(erferom)g(b)r(etter)2040 3450 y(than)c(terrncy-class)g(CT)
-6 b(A.)2040 3677 y Fr(5.)99 b(EMPIRICAL)25 b(STUDIES)2115
3785 y Fq(W)-6 b(e)19 b(conducted)f(sev)n(eral)i(case)g(studies)f(to)h
(address)f(the)g(follo)n(wing)2040 3872 y(questions:)2115
3959 y Fo(Q1)p Fq(:)44 b(Do)30 b(masking)g(e\013ects)h(existed)f(in)g
(real)h(soft)n(w)n(are)h(when)e(it)2040 4046 y(con)n(tain)c(m)n
(ultiple)f(faults?)2115 4133 y Fo(Q2)p Fq(:)67 b(Ho)n(w)42
b(m)n(uc)n(h)f(do)g(traditional)i(approac)n(hes)e(su\013er)h(from)2040
4221 y(these)26 b(real)g(masking)g(e\013ects?)2115 4308
y Fo(Q3)p Fq(:)62 b(Can)40 b(our)f(approac)n(h)g(do)h(b)r(etter)e(than)
h(traditional)h(ap-)2040 4395 y(proac)n(hes)26 b(when)f(facing)i(these)
e(masking)h(e\013ects?)2115 4482 y(Sp)r(eci\014cally)-6
b(,)37 b(section)f(6.1)h(surv)n(ey)d(sev)n(eral)i(op)r(en-source)f
(soft-)2040 4569 y(w)n(are)20 b(to)f(gain)h(a)f(insigh)n(t)g(of)h(the)f
(state)g(of)h(the)f(existence)g(of)h(m)n(ultiple)2040
4656 y(faults)i(and)g(their)f(masking)h(e\013ects.)33
b(Section)22 b(6.2)g(directly)g(applied)2040 4744 y(three)35
b(MFS-iden)n(tifying)g(programs)h(on)f(the)g(surv)n(ey)n(ed)f(soft)n(w)
n(are)2040 4831 y(and)19 b(analysis)h(their)f(results.)33
b(Section)19 b(6.3)h(apply)f(our)g(approac)n(h)g(on)2040
4918 y(the)28 b(soft)n(w)n(are)h(and)f(a)h(comparison)f(with)h
(traditional)f(approac)n(hes)2040 5005 y(will)e(b)r(e)f(discussed.)35
b(Section)24 b(6.4)i(discuss)g(the)e(threats)h(to)g(v)l(alidit)n(y)2040
5092 y(of)h(our)g(empirical)h(studies.)2040 5260 y Fr(5.1)99
b(study)36 b(1:)52 b(multiple)36 b(faults)g(and)g(masking)f(ef-)2264
5357 y(fects)26 b(in)f(practice)p eop end
%%Page: 7 7
TeXDict begin 7 6 bop 236 -17 a Fo(T)-7 b(able)27 b(6:)39
b(Soft)n(w)n(are)29 b(under)h(surv)n(ey)p -152 10 2029
5 v -84 89 a Fq(soft)n(w)n(are)p 257 123 5 114 v 114
w(v)n(ersions)p 612 123 V 123 w(LOC)p 931 123 V 123 w(classes)p
1240 123 V 191 w(bug)25 b(pairs)1697 57 y Fk(3)p -152
127 2029 5 v -107 207 a Fq(HSQLDB)p 257 241 5 114 v 121
w(2.0rc8)p 612 241 V 124 w(139425)p 931 241 V 143 w(495)p
1240 241 V 162 w(#981)h(&)f(#1005)p 257 354 V 357 320
a(2.2.5)p 612 354 V 146 w(156066)p 931 354 V 143 w(508)p
1240 354 V 143 w(#1173)h(&)g(#1179)p 257 467 V 357 433
a(2.2.9)p 612 467 V 146 w(162784)p 931 467 V 143 w(525)p
1240 467 V 143 w(#1286)g(&)g(#1280)-39 547 y(JFlex)p
257 581 V 211 w(1.4.1)p 612 581 V 165 w(10040)p 931 581
V 181 w(58)p 1240 581 V 238 w(#87)g(&)g(#80)p 257 694
V 357 660 a(1.4.2)p 612 694 V 165 w(10745)p 931 694 V
181 w(61)p 1240 694 V 238 w(#98)g(&)g(#93)p -152 698
2029 5 v -77 942 a(In)18 b(the)h(\014rst)f(study)-6 b(,)19
b(w)n(e)h(surv)n(ey)n(ed)d(t)n(w)n(o)i(op)r(en-source)g(soft)n(w)n(are)
i(to)-152 1029 y(gain)28 b(an)g(insigh)n(t)f(of)h(the)f(existence)g(of)
i(m)n(ultiple)e(faults)h(and)f(their)-152 1116 y(e\013ects.)34
b(The)23 b(soft)n(w)n(are)i(under)d(study)f(are:)34 b(HSQLDB)22
b(and)g(JFlex,)-152 1203 y(in)c(whic)n(h)g(the)g(former)h(is)f(a)h
(database)f(managemen)n(t)g(soft)n(w)n(are)i(writ-)-152
1291 y(ten)27 b(in)g(pure)f(ja)n(v)l(a)h(and)f(the)h(later)g(one)g(is)h
(a)f(lexical)h(analyser)f(gen-)-152 1378 y(erator)c(for)g(Ja)n(v)l(a.)
34 b(Eac)n(h)22 b(of)i(them)d(con)n(tain)i(di\013eren)n(t)e(v)n
(ersions.)34 b(All)-152 1465 y(the)25 b(t)n(w)n(o)g(sub)t(jects)g(are)g
(highly)f(con\014gurable)h(so)g(that)f(the)h(options)-152
1552 y(and)h(their)g(com)n(bination)g(can)g(in\015uence)f(their)h(b)r
(eha)n(viour.)35 b(Addi-)-152 1639 y(tionally)-6 b(,)23
b(they)d(all)i(ha)n(v)n(e)e(dev)n(elop)r(ers')i(comm)n(unit)n(y)e(so)i
(that)e(w)n(e)i(can)-152 1727 y(easily)30 b(get)f(the)g(real)h(bugs)f
(rep)r(orted)f(in)h(the)g(bug)f(trac)n(k)n(er)h(forum.)-152
1814 y(T)-6 b(able)33 b(6)f(lists)h(the)f(program,)j(the)c(n)n(um)n(b)r
(er)g(of)i(v)n(ersions)g(w)n(e)f(sur-)-152 1901 y(v)n(ey)n(ed,)22
b(n)n(um)n(b)r(er)f(of)i(lines)g(of)f(uncommen)n(ted)f(co)r(de)i(and)e
(n)n(um)n(b)r(er)g(of)-152 1988 y(classes)27 b(in)f(the)f(pro)t(ject.)
-129 2153 y Fb(5.1.1)90 b(study)22 b(setup)-77 2261 y
Fq(W)-6 b(e)36 b(\014rst)h(lo)r(ok)n(ed)f(through)g(the)g(bug)g(trac)n
(k)n(er)h(forum)f(of)i(eac)n(h)-152 2348 y(soft)n(w)n(are)30
b(and)e(scratc)n(hed)g(some)g(bugs)g(whic)n(h)g(are)h(caused)f(b)n(y)f
(the)-152 2435 y(options)i(com)n(bination)g(to)f(study)g(later.)44
b(W)-6 b(e)28 b(then)g(classify)i(these)-152 2523 y(bugs)24
b(according)h(to)f(the)f(v)n(ersion)i(they)e(b)r(elong)h(to.)34
b(F)-6 b(or)24 b(eac)n(h)g(bug,)-152 2610 y(w)n(e)e(will)g(deriv)n(e)e
(its)h(failure-inducing)g(com)n(binations)h(b)n(y)d(analysing)-152
2697 y(the)31 b(bug)g(description)g(rep)r(ort)g(and)f(its)i(attac)n
(hed)f(test)g(\014le)g(whic)n(h)-152 2784 y(can)24 b(repro)r(duce)g
(the)g(bug.)33 b(F)-6 b(or)25 b(example,)f(through)g(analysing)g(the)
-152 2871 y(source)36 b(co)r(de)g(of)h(the)e(test)g(\014le)h(of)g
(bug#981)g(for)h(HSQLDB,)d(w)n(e)-152 2958 y(found)18
b(the)h(failure-inducing)f(com)n(binations)h(for)h(this)e(bug)g(is:)32
b(\()p Fn(pr)l(e-)-152 3046 y(p)l(ar)l(estatement)p Fq(,)h
Fn(plac)l(eHolder)p Fq(,)d Fn(L)l(ong)g(string)7 b Fq(\),)30
b(this)e(three)g(factors)-152 3133 y(together)i(form)g(the)f(condition)
g(on)h(whic)n(h)f(the)g(bug)g(will)i(b)r(e)e(trig-)-152
3220 y(gered.)k(These)21 b(analysed)g(result)g(will)g(b)r(e)g(regarded)
f(as)h(the)g(")-9 b(p)r(erfect)-152 3307 y(com)n(binations")17
b(later.)-77 3394 y(W)-6 b(e)25 b(further)g(selected)g(pairs)h(of)g
(bugs)f(b)r(elong)g(to)g(the)g(same)h(v)n(er-)-152 3481
y(sion)i(and)f(merged)h(their)f(test)g(\014le.)40 b(This)28
b(merging)g(manipulation)-152 3569 y(v)l(ary)23 b(with)h(the)f(pair)h
(of)g(bugs)f(w)n(e)h(selected.)35 b(As)23 b(for)h(bug#981)g(and)-152
3656 y(bug#1005)29 b(of)g(HSQLDB,)f(the)f(original)j(test)e(\014le)h
(can)f(b)r(e)g(simply)-152 3743 y(describ)r(ed)f(as)h(\014gure)f(1:,)h
(and)f(w)n(e)g(merged)h(them)e(together)h(in)n(to)h(a)-152
3830 y(\014le)22 b(lik)n(e)g(\014gure)g(2,)h(w)n(e)g(can)f(easily)g
(\014nd)f(that)h(it)g(use)g(a)g(test)g(scenario)-152
3917 y(to)31 b(merge)g(the)f(t)n(w)n(o)i(test)e(\014le.)50
b(F)-6 b(or)30 b(eac)n(h)h(pair)g(of)g(bugs,)h(w)n(e)f(ha)n(v)n(e)-152
4004 y(p)r(osted)26 b(the)f(source)h(co)r(de)g(of)g(the)f(merging)h
(\014le)g(on)f(w)n(ebsite.)-77 4092 y(Next)18 b(w)n(e)i(built)e(the)h
(input)f(mo)r(del)h(whic)n(h)g(consist)h(of)g(the)f(options)-152
4179 y(related)24 b(to)e(the)h(p)r(erfect)g(com)n(binations)g(and)g
(additional)g(noise)g(op-)-152 4266 y(tions.)34 b(The)24
b(detailed)f(mo)r(del)h(information)h(is)f(listed)g(in)f(app)r(endix.)
-152 4353 y(W)-6 b(e)20 b(then)e(generated)i(the)f(exhaustiv)n(e)g
(test)g(suite)h(consist)g(of)h(all)f(the)-152 4440 y(p)r(ossible)27
b(com)n(binations)f(of)g(these)g(options)f(under)g(whic)n(h)g(w)n(e)i
(exe-)-152 4527 y(cuted)20 b(the)g(merged)g(test)g(\014le.)33
b(W)-6 b(e)20 b(record)h(the)e(output)g(of)i(eac)n(h)g(test)-152
4615 y(case)j(to)g(observ)n(e)f(whether)g(there)g(are)h(test)g(cases)g
(con)n(tain)f('p)r(erfect)-152 4702 y(com)n(bination')j(but)f(do)g(not)
h(pro)r(duce)f(the)g(corresp)r(onding)h(bug.)-129 4867
y Fb(5.1.2)90 b(r)m(esult)22 b(and)f(discuss)-77 4975
y Fq(T)-6 b(able)21 b(9)g(lists)h(the)e(results)h(of)g(our)g(surv)n(ey)
-6 b(.)31 b(Column)21 b(")-9 b(F)j(aults)21 b(ID")-152
5062 y(indicate)f(the)e(IDs)h(of)h(t)n(w)n(o)g(bugs)f(w)n(e)g
(collected)h(from)g(the)f(bug)g(trac)n(k-)-152 5149 y(er)31
b(system,)h(column)e(")-9 b(all)32 b(tests")21 b(giv)n(e)31
b(the)f(total)h(n)n(um)n(b)r(er)f(of)h(test)p -152 5218
997 4 v -148 5271 a Fk(3)-113 5303 y Fq(h)n
(ttp://sourceforge.net/p/hsqldb/bugs)-152 5378 y(h)n
(ttp://sourceforge.net/p/j\015ex/bugs)2378 31 y Fo(T)-7
b(able)28 b(7:)39 b(input)29 b(mo)r(del)g(of)h(HSQLDB)p
2040 58 2011 5 v 2143 137 a(Common)f(options)148 b(v)-5
b(alues)p 2040 175 V 2120 255 a Fq(sql.enforce)p 2469
255 30 3 v 30 w(strict)p 2674 255 V 30 w(size)126 b(true,)26
b(false)2178 368 y(sql.enforce)p 2527 368 V 30 w(names)183
b(true,)26 b(false)2223 481 y(sql.enforce)p 2572 481
V 30 w(refs)230 b(true,)26 b(false)2269 595 y(Serv)n(er)f(T)n(yp)r(e)
272 b(serv)n(er,)26 b(w)n(ebserv)n(er,)g(inpro)r(cess)2265
708 y(existed)g(form)270 b(mem,)26 b(\014le)2224 821
y(resultSetT)n(yp)r(es)227 b(forw)n(ad,)27 b(insensitiv)n(e,)f
(sensitiv)n(e)2110 935 y(resultSetConcurrencys)89 b(read)p
3094 935 V 30 w(only)-6 b(,)26 b(up)r(datable)2124 1048
y(resultSetHoldabilit)n(ys)127 b(hold,)26 b(close)2214
1161 y(Statemen)n(tT)n(yp)r(e)218 b(statemen)n(t,)26
b(prepared)p 2090 1208 1893 5 v 2135 1287 a Fo(v)n(ersions)88
b(sp)r(eci\014c)29 b(options)159 b(v)-5 b(alues)p 2090
1325 V 2189 1405 a Fq(2.0rc8)145 b(more)581 b(true,)26
b(false)2533 1518 y(placeHolder)353 b(true,)26 b(false)2533
1631 y(cursorAction)318 b(next,previous,\014rst,last)2210
1745 y(2.2.5)167 b(m)n(ultiple)472 b(single,)27 b(m)n(ultiple)f(,)f(d)
2533 1858 y(placeHolder)353 b(true,)26 b(false)2210 1971
y(2.2.9)167 b(duplicate)440 b(duplicate,)26 b(single,)h(d)2533
2084 y(default)p 2765 2084 30 3 v 30 w(commit)234 b(true,)26
b(false)p 2095 2131 1883 5 v 2140 2210 a Fo(v)n(ersions)88
b(Con\014g)30 b(space)p 2095 2248 V 2194 2328 a Fq(2.0rc8)145
b(2)2576 2296 y Fk(9)2628 2328 y Fu(\002)17 b Fq(3)2743
2296 y Fk(2)2795 2328 y Fu(\002)g Fq(4)2910 2296 y Fk(1)2215
2441 y Fq(2.2.5)167 b(2)2576 2409 y Fk(8)2628 2441 y
Fu(\002)17 b Fq(3)2743 2409 y Fk(3)2215 2554 y Fq(2.2.9)167
b(2)2576 2523 y Fk(8)2628 2554 y Fu(\002)17 b Fq(3)2743
2523 y Fk(3)2456 2885 y Fo(T)-7 b(able)27 b(8:)39 b(input)30
b(mo)r(del)f(of)g(JFlex)p 2090 2912 1894 5 v 2134 2992
a(Common)g(options)90 b(v)-5 b(alues)p 2090 3030 V 2361
3109 a Fq(public)316 b(true,)26 b(false)2296 3223 y(apipriv)l(ate)251
b(true,)26 b(false)2404 3336 y(cup)358 b(true,)26 b(false)2337
3449 y(caseless)294 b(true,)26 b(false)2392 3562 y(c)n(har)347
b(true,)26 b(false)2404 3676 y(line)359 b(true,)26 b(false)2342
3789 y(column)297 b(true,)26 b(false)2335 3902 y(notunix)288
b(true,)26 b(false)2376 4016 y(yy)n(eof)331 b(true,)26
b(false)2289 4129 y(generation)244 b(switc)n(h,)27 b(table,)f(pac)n(k)
2345 4242 y(c)n(harset)300 b(default,)26 b(7bit,)g(8bit,)g(16bit)p
2090 4289 1893 5 v 2135 4368 a Fo(v)n(ersions)88 b(sp)r(eci\014c)29
b(options)159 b(v)-5 b(alues)p 2090 4406 V 2210 4486
a Fq(1.4.1)167 b(hasReturn)399 b(true,)26 b(false,)h(d)2533
4599 y(normal)513 b(true,)26 b(false)2210 4712 y(1.4.2)167
b(lo)r(okAhead)391 b(single,)27 b(m)n(ultiple,)f(d)2533
4826 y(t)n(yp)r(e)599 b(true,)26 b(false)2533 4939 y(standalone)389
b(true,)26 b(false)p 2095 4985 1883 5 v 2140 5065 a Fo(v)n(ersions)88
b(Con\014g)30 b(space)p 2095 5103 V 2215 5182 a Fq(1.4.1)167
b(2)2576 5150 y Fk(10)2659 5182 y Fu(\002)16 b Fq(3)2773
5150 y Fk(2)2825 5182 y Fu(\002)h Fq(4)2940 5150 y Fk(1)2215
5296 y Fq(1.4.2)167 b(2)2576 5264 y Fk(11)2659 5296 y
Fu(\002)16 b Fq(3)2773 5264 y Fk(2)2825 5296 y Fu(\002)h
Fq(4)2940 5264 y Fk(1)p eop end
%%Page: 8 8
TeXDict begin 8 7 bop -152 -17 a Fo(T)-7 b(able)32 b(9:)48
b(n)n(um)n(b)r(er)34 b(of)g(faults)f(and)h(their)g(masking)f(e\013ect)
-152 70 y(condition)p -152 83 1782 5 v -84 162 a Fq(soft)n(w)n(are)p
257 196 5 114 v 114 w(v)n(ersions)p 612 196 V 90 w(all)26
b(tests)p 962 196 V 90 w(failure)p 1263 196 V 91 w(masking)p
-152 200 1782 5 v -107 279 a(HSQLDB)p 257 313 5 114 v
151 w(2cr8)p 612 313 V 187 w(18432)p 962 313 V 155 w(4608)p
1263 313 V 200 w(768)p -152 317 1782 5 v 41 397 a(-)p
257 431 5 114 v 290 w(2.2.5)p 612 431 V 199 w(6912)p
962 431 V 174 w(3456)p 1263 431 V 200 w(576)p -152 435
1782 5 v 41 514 a(-)p 257 548 5 114 v 290 w(2.2.9)p 612
548 V 199 w(6912)p 962 548 V 174 w(3456)p 1263 548 V
181 w(1728)p -152 552 1782 5 v -39 632 a(JFlex)p 257
666 5 114 v 211 w(1.4.1)p 612 666 V 180 w(36864)p 962
666 V 136 w(24576)p 1263 666 V 162 w(6144)p -152 670
1782 5 v 41 749 a(-)p 257 783 5 114 v 290 w(1.4.2)p 612
783 V 180 w(73728)p 962 783 V 136 w(36864)p 1263 783
V 162 w(6144)p -152 787 1782 5 v -152 802 V -152 1055
a(cases)36 b(w)n(e)e(executed)f(and)h(column)g(")-9 b(n)n(um)33
b(of)i(masking")26 b(indicate)-152 1142 y(the)f(n)n(um)n(b)r(er)g(of)h
(test)g(cases)g(whic)n(h)g(trigger)g(the)f(masking)h(e\013ect.)-77
1230 y(W)-6 b(e)32 b(observ)n(ed)g(that)g(for)h(eac)n(h)g(pair)f(of)h
(bugs)f(w)n(e)h(listed)g(in)f(the)-152 1317 y(table,)27
b(w)n(e)g(can)f(alw)n(a)n(ys)i(\014nd)d(some)i(test)f(cases,)i
(although)e(con)n(tain)-152 1404 y(p)r(erfect)f(com)n(binations,)g(did)
f(not)g(trigger)i(exp)r(ected)d(bug,)h(i.e.,)i(the)-152
1491 y(exp)r(ected)j(bug)h(w)n(as)g(mask)n(ed.)47 b(Sp)r(eci\014cally)
-6 b(,)31 b(there)f(are)g(1000)h(out)-152 1578 y(of)23
b(2000)f(\(20\045\))g(test)f(cases)i(for)f(HSQLDB)e(triggered)j(the)e
(masking)-152 1665 y(e\013ect.)-77 1753 y(So)28 b(the)g(answ)n(er)h(to)
g(Q1)f(is)h(that)f(in)g(practice,)i(when)e(SUT)f(ha)n(v)n(e)-152
1840 y(m)n(ultiple)j(faults,)j(there)c(is)i(a)f(go)r(o)r(d)h(c)n(hance)
f(that)g(masking)g(e\013ect)-152 1927 y(can)c(b)r(e)f(triggered)i(b)n
(y)d(some)i(test)g(cases.)-152 2101 y Fr(5.2)99 b(study)41
b(2:perf)n(ormance)g(of)g(traditional)f(algo-)72 2198
y(rithms)-77 2306 y Fq(In)18 b(the)h(second)g(study)-6
b(,)19 b(w)n(e)g(w)n(an)n(t)g(to)g(learn)g(ho)n(w)h(badly)e(the)g
(mask-)-152 2393 y(ing)24 b(e\013ect)g(impact)g(on)g(the)f(traditional)
i(approac)n(hes.)34 b(T)-6 b(o)24 b(conduct)-152 2480
y(this)g(study)-6 b(,)23 b(w)n(e)h(need)g(to)g(apply)f(the)g
(traditional)i(failure-inducing)-152 2568 y(iden)n(tifying)k
(algorithms)h(on)f(the)f(SUT)g(w)n(e)i(collected)f(in)g(the)f(\014rst)
-152 2655 y(study)d(and)g(compare)h(them)f(with)g(the)h(p)r(erfect)f
(com)n(binations.)-129 2829 y Fb(5.2.1)90 b(study)22
b(setup)-77 2937 y Fq(The)29 b(traditional)h(approac)n(hes)f(w)n(e)g
(selected)g(are:)42 b(OF)n(OT,)29 b(FIC)-152 3024 y(and)24
b(CT)-6 b(A.)25 b(T)-6 b(o)25 b(mak)n(e)f(the)g(\014rst)g(t)n(w)n(o)h
(approac)n(hes)f(\(OF)n(OT)g(and)g(F-)-152 3111 y(IC\))d(w)n(ork,)h(w)n
(e)g(need)e(to)h(feed)g(them)g(with)g(a)g(failing)i(test)e(case.)33
b(And)-152 3198 y(for)22 b(CT)-6 b(A,)21 b(ho)n(w)n(ev)n(er,)h(it)f
(need)g(to)g(w)n(ork)g(with)g(a)g(co)n(v)n(ering)g(arra)n(y)g(and)-152
3285 y(the)j(executing)g(result)h(for)g(eac)n(h)g(test)f(case)i(in)e
(the)g(co)n(v)n(ering)h(arra)n(y)-6 b(.)-152 3373 y(As)23
b(the)g(input)f(for)i(the)f(traditional)h(approac)n(hes)f(are)h
(di\013eren)n(t,)f(w)n(e)-152 3460 y(designed)f(t)n(w)n(o)g(di\013eren)
n(t)f(setups,)i(one)e(for)i(OF)n(OT)f(and)f(FIC,)h(while)-152
3547 y(the)j(other)h(for)g(CT)-6 b(A.)-77 3634 y(F)g(or)26
b(OF)n(OT)f(and)g(FIC,)h(our)g(set)f(up)g(is)h(as)g(follo)n(ws:)-77
3721 y(W)-6 b(e)38 b(\014rst)g(selected)h(failing)g(test)g(cases)g
(from)g(the)f(exhaustiv)n(e)-152 3808 y(executed)18 b(test)h(cases,)i
(and)e(for)g(eac)n(h)g(test)g(case,)i(w)n(e)e(applied)g(OF)n(OT)-152
3896 y(and)24 b(FIC)h(to)g(isolate)h(the)e(failure-inducing)h(com)n
(binations)f(in)h(this)-152 3983 y(test)g(case.)35 b(As)25
b(the)g(sub)t(ject)g(under)f(test)h(has)g(m)n(ultiple)g(faults,)h(the)
-152 4070 y(strategy)37 b(w)n(e)g(c)n(hose)g(for)g(this)g(t)n(w)n(o)f
(the)g(traditional)i(approac)n(hes)-152 4157 y(is)29
b Fn(distinguish)h(fault)k Fq(in)28 b(section)h(4.2,)g(i.e.,)h
(distinguish)e(fault)g(and)-152 4244 y(ignore)22 b(the)f(masking)g
(e\013ect)g(happ)r(ened)f(among)i(them.)32 b(A)n(t)21
b(last)g(w)n(e)-152 4332 y(collected)26 b(all)g(the)e(failure-inducing)
i(com)n(binations)f(they)f(got)h(and)-152 4419 y(deleted)h(those)f(o)n
(v)n(erlapp)r(ed)g(ones.)-77 4506 y(F)-6 b(or)26 b(CT)-6
b(A,)26 b(our)f(setup)g(is)h(as)g(follo)n(ws:)-77 4593
y(W)-6 b(e)33 b(\014rst)g(utilize)g(augmen)n(t)g(sim)n(ulating)h
(algorithms\(ASA\))f(to)-152 4680 y(generate)20 b(2-w)n(a)n(y)f(co)n(v)
n(ering)g(arra)n(ys.)32 b(And)18 b(for)i(eac)n(h)f(test)g(case)g(in)g
(the)-152 4767 y(co)n(v)n(ering)28 b(arra)n(y)-6 b(,)29
b(the)e(executing)g(result)h(of)h(them)e(can)h(b)r(e)f(fetc)n(hed)-152
4855 y(from)d(the)e(exhaustiv)n(e)g(set)h(w)n(e)g(ha)n(v)n(e)f(got)h
(in)g(the)f(\014rst)g(study)-6 b(.)32 b(Then)-152 4942
y(w)n(e)j(fed)f(CT)-6 b(A)33 b(approac)n(h)h(with)g(the)f(co)n(v)n
(ering)h(arra)n(y)g(along)h(with)-152 5029 y(the)28 b(corresp)r(onding)
g(executing)g(results.)42 b(W)-6 b(e)27 b(then)h(collected)g(the)-152
5116 y(failure-inducing)c(com)n(binations)h(after)f(running)f(CT)-6
b(A.)25 b(As)e(di\013er-)-152 5203 y(en)n(t)30 b(co)n(v)n(ering)g(arra)
n(y)g(ma)n(y)g(a\013ect)h(the)e(result)i(of)g(CT)-6 b(A)30
b(approac)n(h,)-152 5290 y(w)n(e)23 b(rep)r(eated)f(using)g(ASA)f(to)h
(generate)h(2-w)n(a)n(y)f(co)n(v)n(ering)g(arra)n(y)g(for)-152
5378 y(30)h(times)g(and)f(applied)g(CT)-6 b(A)22 b(for)i(eac)n(h)e(of)h
(them.)33 b(It)22 b(is)h(noted)e(that)2040 -69 y(ASA)37
b(algorithm)h(is)h(a)f(heuristic)g(approac)n(h,)j(whic)n(h)c(con)n
(taining)2040 19 y(some)24 b(random)g(factors,)h(so)f(the)f(30)i(co)n
(v)n(ering)e(arra)n(ys)h(are)g(di\013eren)n(t)2040 106
y(from)i(eac)n(h)g(other.)2115 193 y(After)33 b(w)n(e)h(ha)n(v)n(e)e
(collected)j(the)d(result)i(got)f(b)n(y)g(eac)n(h)g(algorith-)2040
280 y(m)e(for)h(eac)n(h)g(v)n(ersion)f(soft)n(w)n(are,)j(w)n(e)e(next)e
(need)h(to)g(compare)h(the)2040 367 y(result)27 b(with)g(the)g(p)r
(erfect)g(com)n(binations)h(to)f(quan)n(tify)f(the)h(exten)n(t)2040
454 y(to)d(whic)n(h)g(traditional)g(approac)n(hes)g(su\013ers)g(from)g
(masking)g(e\013ect.)2040 542 y(T)-6 b(o)33 b(mak)n(e)g(this)g
(comparison,)j(w)n(e)d(\014rst)g(in)n(tro)r(duce)f(the)g(follo)n(wing)
2040 629 y(notation:)2115 716 y(Assume)27 b(w)n(e)i(get)f(t)n(w)n(o)g
(sc)n(hema)g Fp(S)3110 724 y Fj(A)3160 716 y Fq(,)p Fp(S)3228
724 y Fj(B)3281 716 y Fq(,)h(the)e(notation)p Fp(S)3793
724 y Fj(A)3856 660 y Fd(T)3933 716 y Fp(S)3980 724 y
Fj(B)2040 803 y Fq(indicate)17 b(the)g(same)h(elemen)n(ts)f(b)r(et)n(w)
n(een)g Fp(S)3269 811 y Fj(A)3336 803 y Fq(and)f Fp(S)3523
811 y Fj(B)3576 803 y Fq(.)32 b(F)-6 b(or)17 b(example)2040
890 y(\()p Fu(\000)p Fq(1)26 b(2)17 b Fu(\000)g Fq(3\))2407
834 y Fd(T)2471 890 y Fq(\()p Fu(\000)p Fq(2)26 b(2)17
b Fu(\000)g Fq(3\))k(=)g Fu(f)p Fq(\()p Fu(\000)c(\000)g
Fq(2)h Fu(\000)f(\000)p Fq(\))p Fp(;)12 b Fq(\()p Fu(\000)17
b(\000)g(\000)g(\000)f Fq(3\))p Fu(g)p Fq(.)2115 977
y(Then)22 b(the)h(similarit)n(y)g(b)r(et)n(w)n(een)g(sc)n(hemas)g(is)g
(de\014ned)e(as)j(the)e(fol-)2040 1065 y(lo)n(w)n(ed)k(notation:)2121
1235 y Fp(S)t(imil)q(ar)r(ity)s Fq(\()p Fp(S)2566 1243
y Fj(A)2616 1235 y Fp(;)13 b(S)2697 1243 y Fj(B)2749
1235 y Fq(\))21 b(=)3252 1186 y Fu(j)p Fp(S)3320 1194
y Fj(A)3383 1130 y Fd(T)3460 1186 y Fp(S)3507 1194 y
Fj(B)3560 1186 y Fu(j)p 2891 1218 1051 4 v 2891 1285
a Fq(max\()p Fp(D)r(eg)s(r)r(ee)p Fq(\()p Fp(S)3391 1293
y Fj(A)3440 1285 y Fq(\))p Fp(;)13 b(D)r(eg)s(r)r(ee)p
Fq(\()p Fp(S)3831 1293 y Fj(B)3882 1285 y Fq(\)\))2040
1379 y(.)2115 1466 y(In)37 b(this)h(form)n(ula,)k(the)37
b(n)n(umerator)h(indicate)g(the)f(n)n(um)n(b)r(er)g(of)2040
1553 y(same)25 b(elemen)n(ts)g(in)f Fp(S)2679 1561 y
Fj(A)2753 1553 y Fq(and)g Fp(S)2948 1561 y Fj(B)3001
1553 y Fq(.)34 b(It)23 b(is)i(ob)n(viously)-6 b(,)24
b(the)g(bigger)h(the)2040 1641 y(v)l(alue)c(is)g(the)g(more)g(similar)h
(t)n(w)n(o)g(sc)n(hemas)f(are.)34 b(The)21 b(denominator)2040
1728 y(giv)n(e)h(us)f(this)g(information:)33 b(if)22
b(the)f(the)g(n)n(um)n(b)r(er)f(of)i(same)g(elemen)n(ts)2040
1815 y(is)i(\014xed,)f(the)g(bigger)h(the)f(degree)h(of)g(the)f(sc)n
(hema,)h(the)f(more)h(noise)2040 1902 y(w)n(e)c(will)g(encoun)n(ter)e
(to)h(\014nd)f(the)h(fault)g(source.)33 b(In)18 b(a)h(w)n(ord,)i(the)e
(big-)2040 1989 y(ger)26 b(the)f(form)n(ula)i(can)f(get)f(the)h(b)r
(etter)f(the)g(similarit)n(y)i(is)f(b)r(et)n(w)n(een)2040
2076 y(the)f(t)n(w)n(o)h(sc)n(hema.)2115 2164 y(F)-6
b(or)25 b(the)g(set)g(of)h(sc)n(hemas)p Fp(S)t(et)2976
2172 y Fj(A)3052 2164 y Fq(and)f Fp(S)t(et)3316 2172
y Fj(B)3368 2164 y Fq(,)h(the)f(similarit)n(y)h(de\014-)2040
2251 y(nition)g(is)g(:)2112 2436 y Fp(S)t(imil)q(ar)r
Fq(\()p Fp(S)t(et)2530 2444 y Fj(A)2579 2436 y Fp(;)14
b(S)t(et)2729 2444 y Fj(B)2781 2436 y Fq(\))21 b(=)2923
2316 y Fd(P)3004 2395 y Fj(s)3033 2406 y Ff(i)3060 2395
y Fi(2)p Fj(S)s(et)3196 2406 y Ff(A)3259 2372 y Fq(max)3402
2380 y Fj(s)3431 2391 y Ff(j)3462 2380 y Fi(2)p Fj(S)s(et)3598
2391 y Ff(B)3663 2372 y Fp(S)c Fq(\()p Fp(s)3793 2380
y Fj(i)3819 2372 y Fp(;)c(s)3889 2380 y Fj(j)3921 2372
y Fq(\))p 2923 2419 1028 4 v 3333 2487 a Fu(j)p Fp(S)t(et)3469
2495 y Fj(A)3519 2487 y Fu(j)2040 2581 y Fq(.)2115 2668
y(It)41 b(is)h(ob)n(viously)f(the)g(more)h(similarit)n(y)g(b)r(et)n(w)n
(een)f(the)g(set)h(of)2040 2755 y(failure-inducing)36
b(com)n(binations)g(iden)n(ti\014ed)e(b)n(y)h(the)g(algorithms)2040
2842 y(with)20 b(these)g(p)r(erfect)h(com)n(binations)f(the)g(less)h
(impacts)f(do)g(these)g(al-)2040 2929 y(gorithms)j(su\013ered)f(from)g
(m)n(ultiple)g(faults)h(as)g(w)n(ell)g(as)g(their)f(mask-)2040
3016 y(ing)k(e\013ects.)2115 3104 y(Besides)38 b(the)f(similarit)n(y)h
(metric,)i(another)d(metric)h(also)g(need)2040 3191 y(to)c(b)r(e)f
(considered:)50 b(the)33 b(discrepancy)g(b)r(et)n(w)n(een)h(the)f(n)n
(um)n(b)r(er)f(of)2040 3278 y(iden)n(ti\014ed)h(failure-inducing)h(com)
n(binations)g(with)g(these)g(p)r(erfect)2040 3365 y(com)n(binations.)59
b(If)34 b(this)g(discrepancy)f(is)i(to)r(o)f(big,)i(ev)n(en)d(though)
2040 3452 y(w)n(e)25 b(get)g(a)g(go)r(o)r(d)g(similarit)n(y)g(metric)g
(v)l(alue,)g(w)n(e)g(also)h(get)e(to)r(o)h(man)n(y)2040
3539 y(noise)h(whic)n(h)g(mak)n(e)f(our)h(result)f(inaccuracy)-6
b(.)2115 3627 y(P)n(articularly)g(,)21 b(if)e(the)g(v)l(alue)g(of)g
(discrepancy)g(n)n(um)n(b)r(er)f(metric)h(is)g(0)2040
3714 y(and)g(the)f(v)l(alue)h(of)h(similarit)n(y)g(metric)g(is)f(1,)i
(it)f(means)f(that)g(m)n(ultiple)2040 3801 y(faults)24
b(as)f(w)n(ell)h(as)f(their)f(masking)h(e\013ect)g(ha)n(v)n(e)f(no)h
(impacts)f(on)h(the)2040 3888 y(algorithms,)k(whic)n(h)f(is)g(usually)f
(not)g(feasible)j(in)d(practice.)2063 4049 y Fb(5.2.2)90
b(r)m(esult)21 b(and)h(discuss)2115 4157 y Fq(T)-6 b(able)24
b Fo(??)g Fq(depicts)g(the)g(result)g(of)h(the)f(second)g(case)h(study)
-6 b(.)32 b(Col-)2040 4244 y(umn)24 b(")-9 b(Num)23 b(Di\013")16
b(indicates)25 b(the)f(discrepancy)g(of)h(the)f(n)n(um)n(b)r(er)g(of)
2040 4332 y(MFS)31 b(b)r(et)n(w)n(een)f(the)g(ones)h(got)g(through)e
(traditional)i(approac)n(hes)2040 4419 y(with)18 b(the)g(p)r(erfect)g
(com)n(binations.)32 b(Column)19 b(")-9 b(Similarit)n(y")9
b(presen)n(ts)2040 4506 y(the)29 b(similarit)n(y)h(b)r(et)n(w)n(een)e
(this)h(t)n(w)n(o)h(set)f(of)h(com)n(binations.)45 b(Addi-)2040
4593 y(tionally)-6 b(,)40 b(the)d(results)g(of)h(di\013eren)n(t)e
(algorithms)i(can)f(b)r(e)g(distin-)2040 4680 y(guished)29
b(b)n(y)g(the)g(titles)h(of)g(sub-columns,)f(whic)n(h)h(are)g(")-9
b(FIC")g(,)30 b(")-9 b(O-)2040 4767 y(F)n(OT")g(,)31
b(")-9 b(CT)j(A")d(,)32 b(indicating)e(corresp)r(onding)g(algorithms)h
(resp)r(ec-)2040 4855 y(tiv)n(ely)-6 b(.)33 b(It)23 b(is)i(noted)e
(that)h(for)g(column)g(")-9 b(CT)j(A")d(,)25 b(the)e(v)l(ale)h(w)n(e)h
(set)f(in)2040 4942 y(eac)n(h)c(cell)g(are)g(the)f(a)n(v)n(erage)h(v)l
(alue)f(of)h(the)f(result)h(w)n(e)g(collected)g(from)2040
5029 y(30)26 b(rep)r(eated)g(exp)r(erimen)n(ts')f(result)h(for)g(a)g
(particular)g(sub)t(ject.)2115 5116 y(F)-6 b(rom)26 b(this)h(table,)g
(w)n(e)g(can)f(easily)h(\014nd)e(that)h(T)-6 b(raditional)28
b(MFS)2040 5203 y(iden)n(tifying)20 b(approac)n(hes)g(do)f(su\013er)h
(from)h(the)e(m)n(ultiple)h(faults)g(and)2040 5290 y(their)37
b(masking)g(e\013ect.)68 b(F)-6 b(or)37 b(example,)j(for)d(the)g(Grep,)
j(v)n(ersion)2040 5378 y(3.14,)d(all)e(these)f(three)f(algorithm)i
(will)g(lost)f(some)g(information.)p eop end
%%Page: 9 9
TeXDict begin 9 8 bop -125 1034 a @beginspecial 0 @llx
0 @lly 523 @urx 460 @ury 1591 @rwi @setspecial
%%BeginDocument: FIC_BS_normal.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: FIC_BS_normal.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: niuxintao
%%CreationDate: 3/7/2014, 11:15:16 PM
%%BoundingBox: 0 0 523 460
%%HiResBoundingBox: 0 0 522.3322 459.4953
%%CropBox: 0 0 522.3322 459.4953
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 722 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-03-07T23:11:04+08:00"
   xmp:CreatorTool="Microsoft® Excel® 2013"
   xmp:ModifyDate="2014-03-07T23:11:04+08:00"
   pdf:Producer="Microsoft® Excel® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>xintao niu</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -459.495 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 459.495 li
522.332 459.495 li
522.332 0 li
cp
clp
[1 0 0 1 -45.1641 0 ]ct
51.188 455.501 mo
561.128 455.501 li
561.128 4.40106 li
51.188 4.40106 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
1.4276 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
72.127 123.191 mo
72.127 414.881 li
165.63 123.191 mo
165.63 414.881 li
259.05 123.191 mo
259.05 414.881 li
352.7 123.191 mo
352.7 414.881 li
446.12 123.191 mo
446.12 414.881 li
539.68 123.191 mo
539.68 414.881 li
1 /0 /CSD get_res sepcs
.149 sep
@
100.3 364.821 mo
113.09 364.821 li
113.09 414.881 li
100.3 414.881 li
cp
193.95 377.381 mo
206.74 377.381 li
206.74 414.881 li
193.95 414.881 li
cp
287.37 402.281 mo
300.16 402.281 li
300.16 414.881 li
287.37 414.881 li
cp
474.45 406.621 mo
487.24 406.621 li
487.24 414.881 li
474.45 414.881 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.719692 .439979 .027985 3.0518e-5 cmyk
f
124.51 373.271 mo
137.3 373.271 li
137.3 414.881 li
124.51 414.881 li
cp
311.58 381.491 mo
324.38 381.491 li
324.38 414.881 li
311.58 414.881 li
cp
498.66 160.611 mo
511.45 160.611 li
511.45 414.881 li
498.66 414.881 li
cp
.18497 .816068 .688869 .0602731 cmyk
f
72.127 414.881 mo
539.68 414.881 li
1 /0 /CSD get_res sepcs
.149 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: AXNBAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /AXNBAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9ddb2dc000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c79666cd62e8800008f600000909468656164ecde32e000000f640000
0036686865610dad0c0b00000f9c00000024686d74789f0a432e00000fc0
00002fe06c6f6361f467d1c000003fa000001e4e6d617870213625500000
5df0000000206e616d6519aa717b00005e1000000d3e707265706baf02fe
00006b5000002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
fb040600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d0000000100000005b8522fee24385f0f3cf500190800
00000000bbeb7ccc00000000cbdab383fbfafd8b09ec07b6000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000008ca040e0000000000000000000001cf000004a1
002300000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000044400610000
00000000000000000000000000000000000004ec00ac0000000000000000
0000000003e800ac00000000000000000000000000000000000000000000
000000000000000000000000000000000000050c005b0000000000000000
000000000000000004fc00ac0000000000000000020400ac000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000035d00ac000000000000
000000000000000000000000000006d700ac052a00ac0000000000000000
000000000000000000000000054c00630000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
042200ac0000000000000000045800ac0000000000000000000000000000
0000000000000000000000000000000000000000000003e6000f00000000
0000000000000000052200aa000000000000000000000000000000000000
00000000000000000000000000000000000000000000048a002200000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000003f40010
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000003cb006d00000000
00000000000000000000000000000000046500a100000000000000000000
0000038000a1000000000000000000000000000000000000000000000000
000000000000000000000000035000a10482006c00000000000000000000
000000000000047800a1000000000000000001ec00a10000000000000000
000000000000000000000000000000000000000001ec0011000000000000
00000000000000000000000000000000000002e000a10000000000000000
000000000000000000000000060600a1049100a100000000000000000000
0000000000000000000004aa006600000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000003c5
00a1000000000000000003ed00a1000000000000000000000000034f0049
00000000000000000000000000000000000000000359001c000000000000
000000000000048d009f0000000000000000000000000000000000000000
000000000000000000000000000000000000000003fd0021000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000003d5005c0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0434006000000000000000000000000003fb005d00000000000000000000
000000000000000000000000000000000000000000000000000002710025
000000000000000004ab0025069b002508d50025043c0025000000000000
000000000000000000000000000000000000000000000000000000000000
067600250000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
043c00250000000000000000000000000676002504ed0025000000000000
00000728002503c400350000000000000000000000000000000004340060
0000000000000000000000000000000004340099000000000000000001d6
008500000000000000000000000000000000000000000000000000000000
0000000001d6009900000000000000000000000000000000000000000000
0000000000000000000001d6009900000000000000000000000000000000
000000000000000004340099000000000000000000000000000000000000
0000000000000438005a0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002ca00990000000000000000000000000321005100000000
0000000000000000000000000000000005ae005100000000000000000000
000002ae002100000000000000000000000004e600210475002100000000
000000000000000000000000000000000000000000000000000000000475
002105130021074b002106d9002100000000000000000000000000000000
0000000000000000000000000000000006d9002104340094000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002ac0044000000000000
000002e5004802b8004701c100240297002a02e9006c0163006100000000
00000000015e006c0000000002e6006c02e60045000000000000000001f6
006c0230004201e3002302e9006c00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001d6000001ce000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000029b010a000000000000
000000000000000000000000000000000000026000ed0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000494005f02cb002303ec0062
03ec005100000000000000000436007e00000000043600630436005c040e
0048040e00ae040e0072040e00670000000000000000040e006b00000000
040e0052040e005204430067028d00190381005c03730059000000000000
000003b7006e0000000003b5004b03bc0052039f0050039f008d039f0065
039f00620000000000000000039f006100000000039f0051039f00500494
005f02cb002303ec006203ec005100000000000000000436007e00000000
043600630436005c040e0048040e00ae040e0072040e0067000000000000
0000040e006b00000000040e0052040e00520321004801f8002302b0004b
02ad0041000000000000000002df005b0000000002e1004b02df00440000
0000000000000000000000000000000000000321004801f8002302b0004b
02ad0041000000000000000002df005b0000000002e1004b02df00440000
000000000000000000000000000000000000029d003801f500310252003c
0249002d0000000000000000025100300000000002570025024d0023029d
003801f500310252003c0249002d00000000000000000251003000000000
02570025024d002300000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000002f5001c000000000306005a034b
008e02a8008e000000000344005a035b008e01a6008e0000000000000000
025b008e046d008e0375008d0375005a02d8008e00000000029b00570000
0000025700040314005702e3001a00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002f5001c000000000000000000000000034b008e
02a8008e000000000344005a035b008e01a6008e0000000000000000025b
008e046d008e0375008d000000000375005a0000000002d8008e029b0057
025700040314005700000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00a100a100a100a1012f012f012f012f012f012f012f012f012f012f012f
012f012f012f01ac01ac01ac01ac01ac01ac021902190219021902950295
029502950295029502950295029502950295033c033c033c033c033c03dc
03dc03dc0427042704270427042704270427042704270427042704270427
04270427047504750475047504750475052205bd05bd05bd05bd05bd05bd
06350635063506350635063506350635063506350635063506ae06ae06ae
075907590759075907590759075907590759075907c007c007c007c0084b
084b084b084b084b084b084b084b084b084b084b08bd08bd08bd08bd08bd
08bd08bd08bd08bd08bd08bd08bd08bd08bd08bd08bd0923092309230923
092309230923092309230923092309230923092309890989098909890989
098909cb09cb09cb09cb0a240a240a240a240a240a240a240a240a240a24
0a710ae80ae80ae80ae80ae80b460b460b460b720b720b720b720b720b72
0b720b720b7d0b7d0b7d0b7d0b7d0b7d0b7d0bb20bb20bb20bb20bb20bb2
0c280c940c940c940c940c940c940ce20ce20ce20ce20ce20ce20ce20ce2
0ce20ce20ce20ce20d390d390d390db30db30db30db30e390e390e390e39
0e390e390e7a0e7a0e7a0e7a0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0f1c0f1c0f1c0f1c0f1c0f1c0f1c0f1c0f1c0f1c0f1c0f1c0f1c
0f1c0f1c0f1c0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb
0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb106210621062
10621103110311031103110311031103110311031103118611861186122e
12eb13ee1481148114811481148114811481148114811481155a155a155a
155a155a155a155a155a155a155a155a155a155a155a155a15e215e215e2
15e216ad175b175b175b1852193f193f193f193f193f19cf19cf19cf19cf
19cf1a531a531a531acc1acc1acc1acc1acc1acc1acc1acc1acc1af81af8
1af81af81af81af81af81af81af81b3b1b3b1b3b1b3b1b3b1b3b1b3b1bcc
1bcc1bcc1bcc1bcc1bcc1bcc1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
1c5a1c5a1c5a1c5a1c5a1c5a1cd31cd31cd31cd31d991d991d991d991d99
1d991e981e981e981e981f141f141f141f141fc11fcd1fcd1fcd1fcd1fcd
1fcd1fcd1fcd1fcd204320f521ea21f621f621f621f621f621f621f621f6
21f622b52345234523452345234523452345234523452345234523452345
234523452345234523452345234523452345234523452345234523452345
2345234523bb23bb23bb2421248524e625a92606264a264a264a26762676
26cc271527152715276827e0283a28932893289328932893289328932893
289328932893289328932893289328932893289328932893289328932893
289328932893289328932893289328932893289328932893289328932893
289328932893289328932893289328932893289328932893289328932893
28932893289328932893289328932893289328b728db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db2920292029202920292029202920296e296e296e296e296e296e
296e296e296e296e296e296e296e296e296e296e296e296e296e296e296e
296e296e296e296e296e296e296e296e296e296e296e296e296e296e296e
296e296e296e296e296e296e296e296e296e296e296e296e296e296e296e
296e296e296e296e296e296e296e296e296e296e296e296e296e296e296e
296e296e296e296e29b429b429b429b429b429b429b429b429b429b429b4
29b429b429b429b429b429b429b429b429b429b429b429b429b429b429b4
29b429b429b429b429b429b429b429b429b42a022a452abc2b5b2b5b2b5b
2bd72bd72c5e2cd42d222d7e2dec2e882e882e882f362f36305c30d93127
316a31dc32763276327632f132f1338233fe344b34a434ac34b434b434b4
352b352b35b03624367436b6372e37cb37cb37cb37d337d337db384838fb
39b23a523b463b463b463b4e3b4e3b563c0f3c183c213c2a3c333c333c33
3c3c3c3c3c453c4e3c4e3c4e3c4e3c4e3c4e3c993cdc3d3e3dcb3dcb3dcb
3e433e433ec93f413f413f413f413f413f413f8c3fce403540cd40cd40cd
4141414141c9423c4245424e4257426042604260426942694272427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b427b427b427b427b427b427b427b427b427b427b427b427b427b427b
427b4283428342e642ee42f642f642fe4306430e430e430e4316431e4326
432e43364336433e433e4346434e43914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143914391439143914391439143914391
439143914391439143914391439143dd43dd43dd43dd441f4478447844eb
454d457b457b457b45b346244694469446db46db472f47b547f8484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a484a484a484a484a484a484a484a
484a484a484a484a484a484a484a484a0000000100000f26009600050078
000300020010002f0065000011902410000200010000002d022200000003
00000000006400000000000300000001000e00640000000300000002000e
03040000000300000003002403120000000300000004000e006400000003
00000005001803360000000300000006000e006400000003000000070076
034e0000000300000008002a000e0000000300000009002003c400000003
0000000a02a00064000000030000000b005603e4000000030000000c002a
043a000000030000000d02980464000000030000000e006c06fc00010000
000000000032076800010000000000010007079a00010000000000020007
08ea0001000000000003001208f100010000000000040007079a00010000
00000005000c090300010000000000060007079a0001000000000007003b
090f00010000000000080015076f00010000000000090010094a00010000
0000000a0150079a000100000000000b002b095a000100000000000c0015
0985000100000000000d014c099a000100000000000e00360ae600030001
04090000006400000003000104090001000e00640003000104090002000e
03040003000104090003002403120003000104090004000e006400030001
04090005001803360003000104090006000e006400030001040900070076
034e0003000104090008002a000e0003000104090009002003c400030001
0409000a02a00064000300010409000b005603e4000300010409000c002a
043a000300010409000d02980464000300010409000e006c06fc00a90020
00320030003100320020004d006900630072006f0073006f006600740020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e00430061006c006900620072006900200069007300200061
0020006d006f006400650072006e002000730061006e0073002000730065
007200690066002000660061006d0069006c007900200077006900740068
00200073007500620074006c006500200072006f0075006e00640069006e
006700730020006f006e0020007300740065006d007300200061006e0064
00200063006f0072006e006500720073002e002000490074002000660065
0061007400750072006500730020007200650061006c0020006900740061
006c006900630073002c00200073006d0061006c006c0020006300610070
0073002c00200061006e00640020006d0075006c007400690070006c0065
0020006e0075006d006500720061006c00200073006500740073002e0020
004900740073002000700072006f0070006f007200740069006f006e0073
00200061006c006c006f00770020006800690067006800200069006d0070
00610063007400200069006e002000740069006700680074006c00790020
0073006500740020006c0069006e006500730020006f0066002000620069
006700200061006e006400200073006d0061006c006c0020007400650078
007400200061006c0069006b0065002e002000430061006c006900620072
0069002700730020006d0061006e00790020006300750072007600650073
00200061006e006400200074006800650020006e00650077002000720061
007300740065007200690073006500720020007400650061006d00200075
007000200069006e0020006200690067006700650072002000730069007a
0065007300200074006f002000720065007600650061006c002000610020
007700610072006d00200061006e006400200073006f0066007400200063
00680061007200610063007400650072002e0052006500670075006c0061
0072004d006900630072006f0073006f00660074003a002000430061006c
006900620072006900560065007200730069006f006e00200035002e0037
003200430061006c00690062007200690020006900730020006100200074
0072006100640065006d00610072006b0020006f00660020007400680065
0020004d006900630072006f0073006f00660074002000670072006f0075
00700020006f006600200063006f006d00700061006e006900650073002e
004c007500630028006100730029002000640065002000470072006f006f
00740068007400740070003a002f002f007700770077002e006d00690063
0072006f0073006f00660074002e0063006f006d002f007400790070006f
006700720061007000680079002f006300740066006f006e007400730068
007400740070003a002f002f0066006f006e007400660061006200720069
006b002e0063006f006d0059006f00750020006d00610079002000750073
00650020007400680069007300200066006f006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
0065002000450055004c004100200066006f007200200074006800650020
00700072006f006400750063007400200069006e00200077006800690063
00680020007400680069007300200066006f006e00740020006900730020
0069006e0063006c007500640065006400200074006f0020006400690073
0070006c0061007900200061006e00640020007000720069006e00740020
0063006f006e00740065006e0074002e00200059006f00750020006d0061
00790020006f006e006c0079002000280069002900200065006d00620065
00640020007400680069007300200066006f006e007400200069006e0020
0063006f006e00740065006e00740020006100730020007000650072006d
00690074007400650064002000620079002000740068006500200065006d
00620065006400640069006e006700200072006500730074007200690063
00740069006f006e007300200069006e0063006c00750064006500640020
0069006e0020007400680069007300200066006f006e0074003b00200061
006e006400200028006900690029002000740065006d0070006f00720061
00720069006c007900200064006f0077006e006c006f0061006400200074
00680069007300200066006f006e007400200074006f0020006100200070
00720069006e0074006500720020006f00720020006f0074006800650072
0020006f0075007400700075007400200064006500760069006300650020
0074006f002000680065006c00700020007000720069006e007400200063
006f006e00740065006e0074002e0068007400740070003a002f002f0077
00770077002e006d006900630072006f0073006f00660074002e0063006f
006d002f007400790070006f006700720061007000680079002f0066006f
006e00740073002f00640065006600610075006c0074002e006100730070
0078a92032303132204d6963726f736f667420436f72706f726174696f6e
2e20416c6c205269676874732052657365727665642e43616c6962726920
69732061206d6f6465726e2073616e732073657269662066616d696c7920
7769746820737562746c6520726f756e64696e6773206f6e207374656d73
20616e6420636f726e6572732e204974206665617475726573207265616c
206974616c6963732c20736d616c6c20636170732c20616e64206d756c74
69706c65206e756d6572616c20736574732e204974732070726f706f7274
696f6e7320616c6c6f77206869676820696d7061637420696e2074696768
746c7920736574206c696e6573206f662062696720616e6420736d616c6c
207465787420616c696b652e2043616c696272692773206d616e79206375
7276657320616e6420746865206e65772072617374657269736572207465
616d20757020696e206269676765722073697a657320746f207265766561
6c2061207761726d20616e6420736f6674206368617261637465722e5265
67756c61724d6963726f736f66743a2043616c6962726956657273696f6e
20352e373243616c6962726920697320612074726164656d61726b206f66
20746865204d6963726f736f66742067726f7570206f6620636f6d70616e
6965732e4c7563286173292064652047726f6f74687474703a2f2f777777
2e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374666f
6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f75206d61
7920757365207468697320666f6e74206173207065726d69747465642062
79207468652045554c4120666f72207468652070726f6475637420696e20
7768696368207468697320666f6e7420697320696e636c7564656420746f
20646973706c617920616e64207072696e7420636f6e74656e742e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e68747470
3a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f6772617068
792f666f6e74732f64656661756c742e61737078000000>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[15913 15445 5657 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 13262 1005 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>AXNBAA+Calibri AddT42Char 
3 13628 1006 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>AXNBAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/one 1005 def
/two 1006 def
end
AXNBAA+Calibri /Encoding get
dup 49 /one put
dup 50 /two put
pop
end
%ADOEndSubsetFont
/VGUSFQ+Calibri /AXNBAA+Calibri findfont ct_VMDictPut
/VGUSFQ+Calibri*1 
[49{/.notdef}rp /one /two 205{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
111.89 353.741 mo
(12)
[-7.77603 0 ]ysh
%ADOBeginSubsetFont: AXNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+Calibri gcheck setglobal} if
3 14468 1013 <00020052ffed03a605210030004200bd4013292e012a0501290401290301
2a2601260a0144b8ffc040200f024d60440131080d014d31100c0d014c1d
7a3101393149316931032b310131b8022c4009000e0e200070000200b8ff
e0b30f024d00b8ffe0b40f014d003bb8fff8b30d014d3bb8fff040120c0d
014c753b01363b463b663b03243b013bb8022b400e2f25012540f2202007
36f42a5318b80108b10756003fed3fed12392fed012f5de15d5d5d2b2bc4
2b2b5d392f10e15d5d5d322b2b31305d2b005d5d015d5d5d5d01140e0423
222e0435343e0233321e0233323e0237060623222e0235343e0233321e04
07342e0223220e0215141e0233323603a61430517ba9702b51412c140903
060b080b283d5233618b582c023594606c935927326aa472517d5c402711
af2242603f415c3b1c19385a424b8c02ba54ac9f8b683b0b1012121f1a16
1a0e050f120f4b7ea65c1f303b668c53569b7646294d6d8aa14680af6c30
2f4f64353b6244252d00>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/nine 1013 def
end
AXNBAA+Calibri /Encoding get
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFQ+Calibri*1 
[49{/.notdef}rp /one /two 6{/.notdef}rp /nine 198{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
205.42 366.221 mo
(9)sh
%ADOBeginSubsetFont: AXNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+Calibri gcheck setglobal} if
3 13948 1007 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/three 1007 def
end
AXNBAA+Calibri /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFQ+Calibri*1 
[49{/.notdef}rp /one /two /three 5{/.notdef}rp /nine 198{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
298.94 391.231 mo
(3)sh
%ADOBeginSubsetFont: AXNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+Calibri gcheck setglobal} if
3 12904 1004 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/zero 1004 def
end
AXNBAA+Calibri /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFQ+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 5{/.notdef}rp /nine 198{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
392.5 403.731 mo
(0)sh
VGUSFQ+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
486.02 395.411 mo
(2)sh
VGUSFQ+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
136.1 362.071 mo
(10)
[-7.77603 0 ]ysh
VGUSFQ+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
229.63 403.731 mo
(0)sh
%ADOBeginSubsetFont: AXNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+Calibri gcheck setglobal} if
3 8260 972 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>AXNBAA+Calibri AddT42Char 
3 14452 1012 <ffff0052ffed03ba0521020603cc0000>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/eight 1012 def
end
AXNBAA+Calibri /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFQ+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 4{/.notdef}rp /eight /nine 
198{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
323.16 370.401 mo
(8)sh
VGUSFQ+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
416.69 403.731 mo
(0)sh
%ADOBeginSubsetFont: AXNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+Calibri gcheck setglobal} if
3 7912 970 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>AXNBAA+Calibri AddT42Char 
3 14436 1010 <ffff006bffed03bd0520020603ca0000>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/six 1010 def
end
AXNBAA+Calibri /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFQ+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 2{/.notdef}rp /six /.notdef 
/eight /nine 198{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
510.22 149.531 mo
(61)
[-7.77603 0 ]ysh
%ADOBeginSubsetFont: AXNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+Calibri gcheck setglobal} if
2 322 4 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>AXNBAA+Calibri AddT42Char 
2 606 18 <00010061fff0040c051e00390062b31c003b2bb8ffe8b310014d2bb8fff0
b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b014d2bbe
0233000e0018012f00210026012cb2135304bb012a00350030012eb10956
003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c4313025140e0623222e02
35343e0233321e0615140e0223222e0223220e0215141e0233323e023332
1e02040c02050814405f7b497ecb8f4d5396d17f386a5a461b0805030408
0b080e324f714f568d64373563905b4d7351340f070a0603b71018120e14
29271b54a4f19da1fcaf5c15202a1b0e131a12141c1309272f274586c17c
7bbd7f41262f2606111e>AXNBAA+Calibri AddT42Char 
2 1074 28 <000100ac0000037c050e002c0076b11a27b8ffe8b310014d27b8fff0b30f
014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d27b80211
400909132013200009001ab80108400d802601c02601d0260126260619b8
010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f2f123939
2f2f10e12b2b2b2b2b32313025140e0223212226351134363321321e0215
140e0223211121321e0215140e0223211121321e02037c040a0d08fd9317
2929170266080d080505080d08fe0601b2080d090404090d08fe4e020108
0d0a0447121b12081f270482271f08121b14121b1108fe6a09101c13121a
1007fe3108111b00>AXNBAA+Calibri AddT42Char 
2 3420 90 <000200acfffa040b050e003600440091401e102e1137080b014d37100f01
4d37100c0d014c371810014d37180b014d37b80233b7294010014d293f11
b8fff0b310014d11b8fff0b30f014d11b8fff0b30d014d11b8fff6b30c01
4d11b8ffe8b30b014d11b80211b21c2e10b80108b67040014040173db801
0bb5215117550555003f3f3fed12392f5ded39012fe12b2b2b2b2b32d42b
e12b2b2b2b2b123939313025140e0223222e0227032e03232311140e0223
222e023511343633213216171e0315140e02071e03171316160134262726
2623231133323e02040b0614241e1a21140b0477152d3e543b7309132119
192114082917011331411a4b734e2723425c3920342d2814740e08fefd44
50193f3391a84463421f1a080c08040409100c013134573f23fdd9080c07
0505070c0804ae271f05030d38566f4341674f3a140e2b3c4e31fee3241d
03854c69170706fe4c213b50>AXNBAA+Calibri AddT42Char 
2 3762 100 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>AXNBAA+Calibri AddT42Char 
2 3968 104 <000100aaffed04790514002b0099401d602d01201810014d20100f014d20
100d014d200a0c014d20180b014d20b802104011004015014d004013014d
004011014d0016b8ffe8b310014d16b8fff0b30f014d16b8fff0b30d014d
16b8fff6b30c014d16b8ffe8b30b014d16ba0210000affc0b315014d0ab8
ffc0400913014d0a265210521bb80129b10556003fed3f3f012f2b2be12b
2b2b2b2bd42b2b2be12b2b2b2b2b31305d01140e0223222e023511343e02
33321e021511141e0233323e023511343e0233321e021504794580b8756b
b07e440814201a182213082c5375494b75512b081421191821130901de76
b980423e79b6770323080c070505070c08fcf25a86592d2c588257031708
0c070505070c0800>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/A 4 def
/C 18 def
/E 28 def
/R 90 def
/T 100 def
/U 104 def
end
AXNBAA+Calibri /Encoding get
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 82 /R put
dup 84 /T put
dup 85 /U put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFQ+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 2{/.notdef}rp /six /.notdef 
/eight /nine 7{/.notdef}rp /A /.notdef /C /.notdef /E 
12{/.notdef}rp /R /.notdef /T /U 170{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
76.056 439.011 mo
(ACCURATE)
[11.1624 10.5041 10.5041 12.0811 10.504 11.1624 9.79967 0 ]xsh
%ADOBeginSubsetFont: AXNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+Calibri gcheck setglobal} if
2 2628 69 <000100acfffa047e0511003d0085b3270f0f14b8ffe8b310014d14b8ffe8
b30f014d14b8ffe8b30d014d14b8fff0b30c014d14b8ffe8b30b014d14b8
0211401e1e0a2e2e321810014d32180f014d32180d014d32100c014d3218
0b014d32b802114010001e38520a2e0f270419225119550654003f3f3f12
17393f012fd4e12b2b2b2b2b32113310e12b2b2b2b2b322f33313025140e
022323222e0227012626272316161511140e0223222e0235113436333332
1e0217011e03173326263511343e0233321e0215047e0d151a0d371a2723
2315fe6820411c02020208131f18181f12082c1a521d271f1d11013a1d36
32311801020108131f191620120847141c12080b1d322702e0397d3b4896
4afcf3070d070505070d0704aa28220a17291ffdc83463605d2f4fab4f02
be070c090404090c0700>AXNBAA+Calibri AddT42Char 
2 3178 87 <000200acfffa03c7050e001c00290078b12406b8ffe8b310014d06b8fff0
b30f014d06b8fff0b30d014d06b8fff6b30c014d06b8ffe8b30b014d06b8
02114017111d1810014d1d100f014d1d100c0d014c1d200b014d1db80232
b2001125b8010ab306060c23b8010bb315510c55003f3fed12392fed012f
d4e12b2b2b2b10e12b2b2b2b2b32313001140e02232311140e0223222e02
351134363321321e0407342e0223231133323e0203c74077ad7893091321
19192114082a1a01152a4d696d4c29b53b575d2c9f9b4e6746240393619c
6e3cfe2e080c070505070c0804aa282207173f5c79574f6a340efdf92847
6300>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/N 69 def
/P 87 def
end
AXNBAA+Calibri /Encoding get
dup 78 /N put
dup 80 /P put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFQ+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 2{/.notdef}rp /six /.notdef 
/eight /nine 7{/.notdef}rp /A /.notdef /C /.notdef /E 
8{/.notdef}rp /N /.notdef /P /.notdef /R /.notdef /T 
/U 170{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
180.55 439.011 mo
(PARENT)
[10.259 11.1624 10.4734 9.79979 12.0811 0 ]xsh
%ADOBeginSubsetFont: AXNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+Calibri gcheck setglobal} if
2 856 24 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>AXNBAA+Calibri AddT42Char 
2 1656 44 <000100acfffa04500514002f00b8b43f3101230cb8ffe8b310014d0cb8ff
f0b30f014d0cb8fff0b30d014d0cb8fff6b30c014d0cb8ffe8b30b014d0c
b80211401c17240b1810014d0b100f014d0b100d014d0b0a0c014d0b180b
014d0bb802104017004015014d004013014d00401011014c00400c014d00
17b8ffc0b315014d17b8ffc0b613014d172a5224b8012c400fc00c01d00c
010c0c121d5212550555003f3f3f12392f5d71ed3f012f2b2bd42b2b2b2b
e12b2b2b2b2b3210e12b2b2b2b2b3231305d25140e0223222e0235112111
140e0223222e023511343e0233321e0215112111343e0233321e02150450
081421181a201408fdb308142119182214080814221819211408024d0814
201a182114081a080c070505070c08023efdc2080c070505070c0804da08
0c070505070c08fdfa0206080c070505070c0800>AXNBAA+Calibri AddT42Char 
2 1976 47 <000100acfffa0158051400150050b73f174f17af170300b8ffe8b310014d
00b8fff0b30f014d00b8fff0b30d014d00b8fff6b30c014d00b8ffe8b30b
014d00ba0211000affc0b715014d0a10520555003f3f012f2be12b2b2b2b
2b31305d25140e0223222e023511343e0233321e02150158081421191822
140809152117192114081a080c070505070c0804da080c070505070c0800
>AXNBAA+Calibri AddT42Char 
2 2126 62 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/D 24 def
/H 44 def
/I 47 def
/L 62 def
end
AXNBAA+Calibri /Encoding get
dup 68 /D put
dup 72 /H put
dup 73 /I put
dup 76 /L put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFQ+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 2{/.notdef}rp /six /.notdef 
/eight /nine 7{/.notdef}rp /A /.notdef /C /D /E 
2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef /N /.notdef 
/P /.notdef /R /.notdef /T /U 170{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
265.18 439.011 mo
(CHILDREN)
[10.4735 11.8668 6.1554 8.65128 11.6219 10.4734 9.79977 0 ]xsh
%ADOBeginSubsetFont: AXNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+Calibri gcheck setglobal} if
2 1322 39 <0001005bffee04780520003f00a2401d1c1c0f181810014d18100f014d18
100d014d180a0c014d18100b014d18b80211400d00bf2701202740276027
03270fb8ffe8b310014d0fb8fff0b30f014d0fb8ffecb30d014d0fb8ffee
b30c014d0fb8ffe8b30b014d0fb80232b42f34013418b8010ab42222392f
3ebb010a0005000a0129b2395314b8012cb12f56003fed3ffdd4ed111239
2fed012f5de12b2b2b2b2bd45d5dc4e12b2b2b2b2b12392f313001140e02
23222e0223220e0215141e02333236371121222635343e023321321e0215
11140e0423222e0235343e0233321e04047804080c070c385e835a6baa76
3f457aa9653c7b35fed4111104090c09019b0b16120a123a5c62643196ec
a3565da9ed904a8265451a0a045e131d1308262e264e8abe6f7cc084441d
1d01792224131b110808101c12fe131a261d22180c5dacf0949afab0611a
23291a22>AXNBAA+Calibri AddT42Char 
2 2938 75 <00020063ffed04e8052100130027007c401a141810014d14100f014d1414
0d014d14120c014d14180b014d14b80233400920003000800003001eb8ff
e8b310014d1eb8fff0b30f014d1eb8ffecb30d014d1eb8ffeeb30c014d1e
b8ffe8b30b014d1ebb0233000a00190129b20f5323b8012bb10556003fed
3fed012fe12b2b2b2b2bd45de12b2b2b2b2b313001140e0223222e023534
3e0233321e0207342e0223220e0215141e0233323e0204e84a93de9492d5
8b444a94de948fd48d45b5275b987070985f29265a9772719a5e2802969d
fcb15f57a6f6a099faaf5f56a5f3a96ebd8b4e548cbb6772c08b4d548fbc
>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/G 39 def
/O 75 def
end
AXNBAA+Calibri /Encoding get
dup 71 /G put
dup 79 /O put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFQ+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 2{/.notdef}rp /six /.notdef 
/eight /nine 7{/.notdef}rp /A /.notdef /C /D /E 
/.notdef /G /H /I 2{/.notdef}rp /L /.notdef /N 
/O /P /.notdef /R /.notdef /T /U 170{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
368.06 439.011 mo
(IGNORE)
[6.1554 11.8668 12.0811 12.3262 10.504 0 ]xsh
%ADOBeginSubsetFont: AXNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+Calibri gcheck setglobal} if
2 4246 115 <00010022fffa046805140024006e401d24080b014d2824011a080b014d26
1a01281701260d012c19012c180119b8ffe8b40f10014c19b8ffe8b40c0d
014c18b8ffe8b40f10014c18b8ffe840120c0d014c1918191826251f5218
0512520555003f3f12393f11120139392f2f2b2b2b2b3130005d5d015d5d
5d2b5d2b250e0323222e0427012626363633321e02170133013e03333216
16060702b7040e19271d162118110c0703fe5908011228221c2112090401
73010169030814241e1f240d03081e0b0e0803010405080b0804b2161b0e
0403080d0afbbf043f0b0e0803050e1b1600>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/V 115 def
end
AXNBAA+Calibri /Encoding get
dup 86 /V put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFQ+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 2{/.notdef}rp /six /.notdef 
/eight /nine 7{/.notdef}rp /A /.notdef /C /D /E 
/.notdef /G /H /I 2{/.notdef}rp /L /.notdef /N 
/O /P /.notdef /R /.notdef /T /U /V 
169{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
443.09 439.011 mo
(IRRELEVANT)
[6.1554 10.504 10.504 9.79977 8.66656 9.79977 10.9481 11.193 12.1118 0 ]xsh
%ADOBeginSubsetFont: YEKBAA+Calibri,Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /YEKBAA+Calibri,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc0ad74d000000cc000000606376
74202f4935490000012c000006086670676da1ea42ac0000073400000913
676c79665ef515ed000081dc0000189668656164ecbf33e5000010480000
0036686865610d8d0be90000108000000024686d747872740ddd000010a4
00002fd06c6f63614a6045750000407400001e4e6d6178701c0316490000
5ec4000000206e616d65de46508300005ee400000d5c70726570c7f0742e
00006c400000159c676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e00002ff4000acff00000001000000004d53202000200000
1d390600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b140465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
00000005b8523fe3f0a95f0f3cf50019080000000000bbeb7ccc00000000
cbdab477fbdafd8d09ec07c5000100090002000000000000000100000600
fe0001c40aa0fbdafa8609ec0001000000000000000000000000000008c2
040e0000000000000000000001cf00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000047c008d043c004f0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000003ac008d000000000000000000000000000000000000000000000000
00000000000000000222008d000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000006fe008d000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000003c8003f00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000438008603cb005a00000000000000000000000000000000
000000000491008600000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
035800860000000000000000000000000000000000000000000000000000
000000000000021000860000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
064800860000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000425
0086000000000000000000000000036f0043000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000044b004b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000002d8007e0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002f5003a000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000200005a00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000029b00e6000000000000000000000000000000000000
000000000000026900cf0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000003fcfff9000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000382007900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000030a0078031600540000000000000000029200780000
00000000000001b00078000000000000000000000000049a007800000000
000000000000000000000000000000000288003a00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000030a00780000000000000000000000000000000000000000
0000000001b00078000000000000000000000000049a0078000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e014001d301d301d301d301d301d301d301d301d301d301d3
01d301d301d301d301d301d301d301d301d3026a026a026a026a026a026a
026a026a026a02a202a202a202a202a202a202a202a202a202a202a202a2
02a202a202a202a202a202a202a202a202a2036603660366036603660366
036603660366036603660366036603660366036603660366036603660366
036603660366036603660422042204220422042204220422042204220422
042204220422042204220422042204220422042204220422042204220422
042204220422042204220422042204220422042204220422042204220422
0422042204220422042204220422042204220422049e0505050505050505
05050505054a054a054a054a054a054a054a054a054a054a054a054a054a
054a05990599059905990599059905990599059905c505c505c505c505c5
05c505c505c505c505c505c505c505c505c505c505c505c505c505c505c5
05c5063b063b063b063b063b063b063b063b063b063b063b063b063b063b
063b063b063b063b063b063b063b063b06b806b806b806b8074107410741
074107410741074107410741074107410741074107410741074107410741
074107410741074107410741074107410741074107410741074107410741
074107410741074107410741074107410741074107410741074107410741
074107410741074107410741074107410741074107410741074107dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd085c085c085c085c085c085c085c085c
085c085c085c085c085c085c085c085c085c085c085c085c085c085c085c
085c085c085c085c085c085c085c085c085c085c085c085c085c085c085c
085c085c085c085c085c085c085c085c085c085c085c085c085c085c085c
085c085c085c085c085c085c085c085c085c085c085c085c085c085c085c
085c085c085c085c085c085c08c208c208c208c208c208c208c208c208c2
08c208c208c208c208c20915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915096309630963096309630963096309b009b009b009b009b0
09b009b009b009b009b009b009b009b009b009b009b009b009b009b009b0
09b009b009b009b009b009b009b009b009b009b009b009b009b009b009b0
09b009b009b009b009b009b009d109d109d109d109d109d109d109d109d1
09d109d109d109d109d109d109d109d109d109d109d109d109d109d109d1
09d109d109d109d109d10a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a280a940a940a940ad50ad50ad50add0add0add0add0ae5
0ae50ae50ae50ae50ae50b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600bc40bc40bc40bc40bc4
0bc40bc40be90be90be90be90c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0000000100000f26004f0005
002c000300020010002f006000000c63159c000100010000002d02220000
000300000000006400000000000300000001000e00640000000300000002
0008032a0000000300000003002e030400000003000000040018031a0000
0003000000050018033200000003000000060018034a0000000300000007
007603620000000300000008002a000e0000000300000009002003d80000
00030000000a02a00064000000030000000b005603f8000000030000000c
002a044e000000030000000d02980478000000030000000e006c07100001
0000000000000032077c0001000000000001000707ae0001000000000002
000409110001000000000003001708fe0001000000000004000c09090001
000000000005000c09150001000000000006000c09210001000000000007
003b092d0001000000000008001507830001000000000009001009680001
00000000000a015007ae000100000000000b002b0978000100000000000c
001509a3000100000000000d014c09b8000100000000000e00360b040003
000104090000006400000003000104090001000e00640003000104090002
0008032a0003000104090003002e030400030001040900040018031a0003
0001040900050018033200030001040900060018034a0003000104090007
007603620003000104090008002a000e0003000104090009002003d80003
00010409000a02a00064000300010409000b005603f8000300010409000c
002a044e000300010409000d02980478000300010409000e006c071000a9
002000320030003100320020004d006900630072006f0073006f00660074
00200043006f00720070006f0072006100740069006f006e002e00200041
006c006c0020005200690067006800740073002000520065007300650072
007600650064002e00430061006c00690062007200690020006900730020
00610020006d006f006400650072006e002000730061006e007300200073
0065007200690066002000660061006d0069006c00790020007700690074
006800200073007500620074006c006500200072006f0075006e00640069
006e006700730020006f006e0020007300740065006d007300200061006e
006400200063006f0072006e006500720073002e00200049007400200066
00650061007400750072006500730020007200650061006c002000690074
0061006c006900630073002c00200073006d0061006c006c002000630061
00700073002c00200061006e00640020006d0075006c007400690070006c
00650020006e0075006d006500720061006c00200073006500740073002e
0020004900740073002000700072006f0070006f007200740069006f006e
007300200061006c006c006f00770020006800690067006800200069006d
007000610063007400200069006e002000740069006700680074006c0079
00200073006500740020006c0069006e006500730020006f006600200062
0069006700200061006e006400200073006d0061006c006c002000740065
0078007400200061006c0069006b0065002e002000430061006c00690062
00720069002700730020006d0061006e0079002000630075007200760065
007300200061006e006400200074006800650020006e0065007700200072
0061007300740065007200690073006500720020007400650061006d0020
0075007000200069006e0020006200690067006700650072002000730069
007a0065007300200074006f002000720065007600650061006c00200061
0020007700610072006d00200061006e006400200073006f006600740020
006300680061007200610063007400650072002e004d006900630072006f
0073006f00660074003a002000430061006c006900620072006900200042
006f006c006400560065007200730069006f006e00200035002e00370032
00430061006c0069006200720069002d0042006f006c006400430061006c
006900620072006900200069007300200061002000740072006100640065
006d00610072006b0020006f006600200074006800650020004d00690063
0072006f0073006f00660074002000670072006f007500700020006f0066
00200063006f006d00700061006e006900650073002e004c007500630028
006100730029002000640065002000470072006f006f0074006800740074
0070003a002f002f007700770077002e006d006900630072006f0073006f
00660074002e0063006f006d002f007400790070006f0067007200610070
00680079002f006300740066006f006e007400730068007400740070003a
002f002f0066006f006e007400660061006200720069006b002e0063006f
006d0059006f00750020006d006100790020007500730065002000740068
0069007300200066006f006e00740020006100730020007000650072006d
006900740074006500640020006200790020007400680065002000450055
004c004100200066006f00720020007400680065002000700072006f0064
00750063007400200069006e002000770068006900630068002000740068
0069007300200066006f006e007400200069007300200069006e0063006c
007500640065006400200074006f00200064006900730070006c00610079
00200061006e00640020007000720069006e007400200063006f006e0074
0065006e0074002e00200059006f00750020006d006100790020006f006e
006c0079002000280069002900200065006d006200650064002000740068
0069007300200066006f006e007400200069006e00200063006f006e0074
0065006e00740020006100730020007000650072006d0069007400740065
0064002000620079002000740068006500200065006d0062006500640064
0069006e00670020007200650073007400720069006300740069006f006e
007300200069006e0063006c007500640065006400200069006e00200074
00680069007300200066006f006e0074003b00200061006e006400200028
006900690029002000740065006d0070006f0072006100720069006c0079
00200064006f0077006e006c006f00610064002000740068006900730020
0066006f006e007400200074006f002000610020007000720069006e0074
006500720020006f00720020006f00740068006500720020006f00750074
007000750074002000640065007600690063006500200074006f00200068
0065006c00700020007000720069006e007400200063006f006e00740065
006e0074002e0068007400740070003a002f002f007700770077002e006d
006900630072006f0073006f00660074002e0063006f006d002f00740079
0070006f006700720061007000680079002f0066006f006e00740073002f
00640065006600610075006c0074002e0061007300700078a92032303132
204d6963726f736f667420436f72706f726174696f6e2e20416c6c205269
676874732052657365727665642e43616c696272692069732061206d6f64
65726e2073616e732073657269662066616d696c79207769746820737562
746c6520726f756e64696e6773206f6e207374656d7320616e6420636f72
6e6572732e204974206665617475726573207265616c206974616c696373
2c20736d616c6c20636170732c20616e64206d756c7469706c65206e756d
6572616c20736574732e204974732070726f706f7274696f6e7320616c6c
6f77206869676820696d7061637420696e2074696768746c792073657420
6c696e6573206f662062696720616e6420736d616c6c207465787420616c
696b652e2043616c696272692773206d616e792063757276657320616e64
20746865206e65772072617374657269736572207465616d20757020696e
206269676765722073697a657320746f2072657665616c2061207761726d
20616e6420736f6674206368617261637465722e4d6963726f736f66743a
2043616c6962726920426f6c6456657273696f6e20352e373243616c6962
72692d426f6c6443616c6962726920697320612074726164656d61726b20
6f6620746865204d6963726f736f66742067726f7570206f6620636f6d70
616e6965732e4c7563286173292064652047726f6f74687474703a2f2f77
77772e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374
666f6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f7520
6d617920757365207468697320666f6e74206173207065726d6974746564
206279207468652045554c4120666f72207468652070726f647563742069
6e207768696368207468697320666f6e7420697320696e636c7564656420
746f20646973706c617920616e64207072696e7420636f6e74656e742e20
596f75206d6179206f6e6c792028692920656d626564207468697320666f
6e7420696e20636f6e74656e74206173207065726d697474656420627920
74686520656d62656464696e67207265737472696374696f6e7320696e63
6c7564656420696e207468697320666f6e743b20616e6420286969292074
656d706f726172696c7920646f776e6c6f6164207468697320666f6e7420
746f2061207072696e746572206f72206f74686572206f75747075742064
657669636520746f2068656c70207072696e7420636f6e74656e742e6874
74703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f677261
7068792f666f6e74732f64656661756c742e6173707800>
<b10903b802f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c
1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb8
02f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802ed
b21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e
2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1f
b802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802
e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb2
1d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f
1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb8
02d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cf
b21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d121fb802cbb21d
121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1f
b802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802
c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb2
1d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f
1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb8
02b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1
b21c321fb802b0b21c321fb802afb21c331fb802aeb21c331fb802adb21c
331fb802acb21c331fb802abb21c331fb802aab21c311fb802a9b21c311f
b802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5b21c321fb802
a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c331fb802a0b2
1c331fb8029fb21c331fb8029eb21c331fb8029db21c331fb8029cb21c31
1fb8029bb21c311fb8029ab21c321fb80299b21c321fb80298b21c321fb8
0297b21c321fb80296b21c321fb80295b21c331fb80294b21c331fb80293
b21c331fb80292b21c331fb80291b21c331fb80290b21c331fb8028fb21c
331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8028bb21c321f
b8028ab21c321fb80289b21c321fb80288b21c331fb80287b21c331fb802
86b21c331fb80285b21c331fb80284b21c331fb80283b21c331fb80282b2
1b341fb80281b21b341fb80280b21b341fb8027fb21b341fb8027eb21b34
1fb8027db21b341fb8027cb21b341fb8027bb21b341fb8027ab21b341fb8
0279b21b341fb80278b21b341fb80277b21b341fb80276b21b341fb80275
b21b341fb80274b21b341fb80273b21b341fb80272b21b341fb80271b21b
341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8026db21a351f
b8026cb21a351fb8026bb21a351fb8026ab21a351fb80269b21a351fb802
68b21a351fb80267b21a351fb80266b21a351fb80265b21a351fb80264b2
1a351fb80263b21a351fb80262b21a351fb80261b21a351fb80260b21a35
1fb8025fb21a351fb8025eb21a351fb8025db21a351fb8025cb21a351fb8
025bb21a351fb8025ab21a351fb80259b219371fb80258b219371fb80257
b219371fb80256b219371fb80255b219371fb80254b219371fb80253b219
371fb80252b219371fb80251b219371fb80250b219371fb8024fb219371f
b8024eb219371fb8024db219371fb8024cb219371fb8024bb219371fb802
4ab219371fb80249b219371fb80248b219371fb80247b219371fb80246b2
19371fb80245b219371fb80244b219371fb80243b219371fb80242b21937
1fb80241b219371fb80240b219371fb8023fb219371fb8023eb219371fb8
023db219371fb8023cb219371fb8023bb219371fb8023ab219371fb80239
b218391fb80238b218391fb80237b218391fb80236b218391fb80235b218
391fb80234b218391fb80233b218391fb80232b218391fb80231b218391f
b80230b218391fb80301b2182e1fb8022fb218391fb8022eb218391fb802
2db218391fb8022cb218391fb8022bb218391fb8022ab218391fb80229b2
18391fb80228b218391fb80227b218391fb80226b218391fb80225b2173b
1fb80224b2173b1fb80223b217321fb80222b2173a1fb80221b2173b1fb8
0220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2173b1fb8021c
b2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b1fb80218b217
3b1fb80217b2173b1fb80216b2173b1fb80215b217321fb80214b2173a1f
b80213b2173b1fb80212b2173b1fb80211b2173b1fb80210b2173b1fb802
0fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb2173b1fb8020bb2
173b1fb8020ab2173b1fb80209b217321fb80208b217321fb80207b2173b
1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb80203b2173b1fb8
0202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2173b1fb801fe
b2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b1fb801fab217
3b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb801f6b2173a1f
b801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2b2173b1fb801
f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb2173b1fb801edb2
173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1fb801e9b2173b
1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801e5b216231fb8
01e4b216371fb801e3b216371fb801e2b216381fb801e1b216381fb801e0
b216431fb801dfb216441fb801deb216441fb801ddb216441fb801dcb216
451fb801dbb216461fb801dab216461fb801d9b216461fb801d8b216231f
b801d7b216231fb801d6b216381fb801d5b216431fb801d4b216431fb801
d3b216431fb801d2b216441fb801d1b216461fb801d0b216461fb801cfb2
16461fb801ceb216461fb801cdb216461fb801ccb216461fb801cbb21643
1fb801cab216231fb801c9b216231fb801c8b216371fb801c7b216371fb8
01c6b216381fb801c5b216421fb801c4b216431fb801c3b216441fb801c2
b216451fb801c1b216461fb801c0b216461fb801bfb216461fb801beb216
461fb801bdb216461fb801bcb216461fb801bbb216461fb801bab216371f
b801b9b216381fb801b8b216421fb801b7b216431fb801b6b216431fb801
b5b216431fb801b4b216441fb801b3b216441fb801b2b216441fb801b1b2
16451fb801b0b216451fb801afb216451fb801aeb216461fb801adb21646
1fb801acb216461fb801abb216461fb801aab216461fb801a9b215341fb8
01a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2154e1fb801a4
b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d1fb801a0b215
4e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8019cb215401f
b8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198b2154f1fb801
97b2154f1fb80196b215501fb80195b215521fb80194b215521fb80193b2
15521fb80192b215411fb80191b2154f1fb80190b215501fb8018fb21550
1fb8018eb215511fb8018db215521fb8018cb215521fb8018bb215521fb8
018ab214581fb80189b214591fb80188b2145c1fb80187b2145d1fb80186
b2144a1fb80185b2145b1fb80184b2145c1fb80183b214591fb80182b214
5d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c4e1fc10c4e1f
c00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561fae0b561fad0b
561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b561fa60b561f
a50b561fa40b561fa30b561fa20b561fa10b561fa00b561f9f0b561f9e0a
681f9a0a681f990a681f980a681f970a681f960a681f950a681f940a681f
930a681f920a681f910a681f9009681f8f09681f8e09681f8d09681f8c09
681f410902fc02fa0056001f02fb02fa0068001f017fb213321fb8017eb2
12371fb80174b212371fb80173b211421fb80172b211421fb80171b21142
1fb80170b211421fb8016fb211421fb8016eb211421fb8016db211421fb8
016cb211421fb8016bb211421fb8016ab211421fb8013cb211421fb8013b
b210421fb8013ab210421fb80139b210421fb80138b210421fb80137b210
421fb80136b210421fb80135b210421fb80134b210421fb80133b210421f
b80132b20f451fb80131b20f451fb80130b20f451fb80112b20f451fb801
11b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451fb8010db2
0e481fb8010cb20e481fb8010bb20e481fb8010ab20e481fb80109b20e48
1fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a
1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc
0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe0b561fbd0b56
1fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180b213321fb801
7ab211401fb80179b211421fb80178b211421fb80177b211421fb80176b2
11421fb80175b211421fb80143b211421fb80142b210421fb80141b21042
1fb80140b210421fb8013fb210421fb8013eb210421fb8013db20f451fb8
0115b20f451fb80114b20f451fb80113b20f451fb903030302b2401fa4be
030200b4030200c4030200030300b213321fb8017bb213321fb80153b212
371fb80152b211401fb80151b211401fb80150b211401fb8014fb211401f
b8014eb211401fb8014db211401fb8014cb211401fb8014bb211401fb801
4ab211401fb80149b211401fb80148b211401fb80147b211401fb80146b2
11401fb80145b211401fb80144b211401fb80122b211401fb80121b21042
1fb80120b210421fb8011fb210421fb8011eb210421fb8011db210421fb8
011cb210421fb8011bb210421fb8011ab210421fb80119b210421fb80118
b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc0f451ffb0f45
1ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e481ff40e481ff3
0d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a
1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc8
0c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b56
1fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fdb212371fb801
7db212371fb8017cb212371fb80169b2112e1fb80168b2112e1fb80167b2
11401fb80166b211401fb80165b211401fb80164b211401fb80163b21140
1fb80162b211401fb80161b211401fb80160b211401fb8015fb211401fb8
015eb211401fb8015db211401fb8015cb211401fb8015bb211401fb8015a
b211401fb80159b211401fb80158b211401fb80157b211401fb80156b211
401fb80155b211401fb80154b211401fb8012fb211401fb8012eb210421f
b8012db210421fb8012cb210421fb8012bb210421fb8012ab210421fb801
29b210421fb80128b210421fb80127b210421fb80126b210421fb80125b2
0f451fb80124b20f451fb80123b20f451fb80105b20f451fb80104b20f45
1fb80103b20f451fb80102b20f451fb80101b20e481fb8010040a20e481f
ff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c
4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f
83012e1f8248805581ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b
7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a7948775578ab
77550b77010c764875555475e475f4750314755475647574759475d475e4
7507a475b475c47503b8ffc0401275383b46807590750214757475020075
010fb8ffc04021750b0e467448725573ab725504723472023bf47201e072
01023072015072607202b8ffc0b372242846b8ffc0403572161a46107230
7240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6f
bf6f02406f090d466e486d55df6d0100bc02ff001002ff00c002ffb2030a
6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e675568ab675566
2e645565ab6455632e6255612e60555f2e5d555eab5d555c2e5a555bab5a
55592e58555703251f562e545555ab5455532e515552ab51554f2e4e554e
03251f4d2e4b554cab4b554a2e485549ab4855504801472e46554503361f
001f01001e01001e701e801ef01e040b601d701d02701de01df01d03701c
f01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f191f198f199f
19af19050f198f199f19030c7012801202701180110230114011d011e011
040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0e
cf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f0d1f0d40472f
0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f0c4f0c5f0c03
9f0c01400c262946ef0aff0a02400a242746ef09ff0902ff090100030120
01010001100120010308b8ffc0b301151f46b80100b316010501b80190b1
54532b2b4bb807ff524bb008505bb00188b02553b00188b040515ab00688
b000555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d
00421d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db1
160042592b5e73757373742b732b73742b2b73745e732b5e737475737475
5e73747573015e7374737475757473745e737473002b2b732b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b
732b2b73755f75755e732b2b2b5e7373732b7374752b5e732b2b5e732b2b
73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b185f5e00>
[6295 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> YEKBAA+Calibri,Bold AddT42Char 
2 316 17 <0003008d00000436050e001e002b0038009fb10102435558b9001f0293b5
1a0b15150b00b8029cb22c2633b80279b20b1a27b80103b331310724b8ff
e8b40b0f014c24b801254009105134180b0f014c34b80129b24007540018
3f1a4ded2b3fed2b12392fed39012fed322fed11392f1239ed31301bb11a
27b80103b331310724b8ffe8b40b0f014c24b801254009105134180b0f01
4c34b80129b240075400183f1a4ded2b3fed2b12392fed3931305901140e
0423212226351134363321321e0215140e02071e0301342e022323113332
3e0213342e0223231133323e02043626435d707f4efea8212d2d21014577
a5713c182e432b375d4528feac1830493d859339442d16431e3a5a489cbe
374b371f01844570563e2813272c04682c2728517c542f534434100a324f
6a01df273e2916feb01b2f3ffdf92d47301afe90172d4300>YEKBAA+Calibri,Bold AddT42Char 
2 640 18 <0001004fffeb040c05230039008bb10102435558b21c002bbe02c7000e00
18016100210026ffe8b40b0f014c26b80160b2135304b8015ab73530180b
0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed012fedd4c4
31301bbc0018016100210026ffe8b40b0f014c26b80160b2135304b8015a
b73530180b0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed
31305925140e0623222e02353412363633321e0615140e0223222e022322
0e0215141e0233323e0233321e02040c03060a163f5b754485d69650589e
dd85366455441b0a0603040a0e090f2e4965464d79552c2f577b4d466649
2f0d0a0c0804c4192319121724211652a3f4a2a50100ae5a121d261b121c
261c1e2a1a0c232b233f75a66872a76c3521282008182b00>YEKBAA+Calibri,Bold AddT42Char 
2 934 38 <0001008dfffa0363050e002700b9b10102435558b10713b8029440160d1d
001e1d07280f014d07180c0d014c07100b014d07ba01570013fff0b60b01
4d13131906b8ffe0b30f014d06b8ffe8b40b0e014c06b8015bb440225119
5500183f3f1a4ded2b2b12392f2bed2b2b2b012f2fc41139ed3231301b40
1107280f014d07180c0d014c07100b014d07ba01570013fff0b60b014d13
131906b8ffe0b30f014d06b8ffe8b40b0e014c06b8015bb4402251195500
183f3f1a4ded2b2b12392f2bed2b2b2b31305901140e0223211121321e02
15140e02232111140e0223222e02351134363321321e020363050b0e09fe
59018d090e0b05050b0e09fe730c1f322726331e0d2d210261090e0b0504
a21e29180cfea40a18281e1e281a0bfe1e0b100b06060b100b04952c270b
192a>YEKBAA+Calibri,Bold AddT42Char 
2 1236 47 <0001008dfffa019505140015002ab10102435558b900000294b5400a1052
055500183f3f012f1a4ded31301bb31052055500183f3f31305925140e02
23222e023511343e0233321e021501950d1e322726331e0d0d1f32262732
1e0d240a100a06060a100a04c60a100a06060a100a00>YEKBAA+Calibri,Bold AddT42Char 
2 1740 94 <0001003fffe9038c0525004900bbb10102435558b900410297b524322432
0c1bb8029cb2000c2ebb012d0037000a012db61137113711163cb8ffe8b4
0b0f014c3cb8012d400c411b05295316180b0f014c16b80158b240055600
183f1a4ded2b3f123939ed2b1139392f2f10ed10ed012fd4ed1239392f2f
ed31301bbc002e012d0037000a012db61137113711163cb8ffe8b40b0f01
4c3cb8012d400c411b05295316180b0f014c16b80158b240055600183f1a
4ded2b3f123939ed2b1139392f2f10ed10ed31305901140e0223222e0435
343e0233321e0233323e0235342e0635343e0233321e0615140e0223222e
0223220e0215141e06038c4c82ae634373583b1a0b04090f0a0e33506f49
304c351c304d6268624d3045759f592e5c503e1407050203070d0b0b3046
5c372b402b152f4f6468644e300184669a6734161f221a312e1f2a1a0b21
2821172a3e262c3f312b303d5574515d8d5d2e0e181e140e17231a1d281a
0c1c211b1525341d2b3f312b303d5573>YEKBAA+Calibri,Bold AddT42Char 
2 4960 890 <0001fff9fe930402ff4d000d000fb500070af5044f003fed012fcd313001
1406232122263534363321321604021316fc4a1713131703b61613fef032
2b2a32322c2a>YEKBAA+Calibri,Bold AddT42Char 
2 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>YEKBAA+Calibri,Bold AddT42Char 
YEKBAA+Calibri,Bold /CharStrings get begin
/space 3 def
/B 17 def
/C 18 def
/F 38 def
/I 47 def
/S 94 def
/underscore 890 def
end
YEKBAA+Calibri,Bold /Encoding get
dup 32 /space put
dup 66 /B put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 83 /S put
dup 95 /underscore put
pop
end
%ADOEndSubsetFont
/VGUSFR+Calibri,Bold /YEKBAA+Calibri,Bold findfont ct_VMDictPut
/VGUSFR+Calibri,Bold*1 
[32{/.notdef}rp /space 33{/.notdef}rp /B /C 2{/.notdef}rp /F 2{/.notdef}rp 
/I 9{/.notdef}rp /S 11{/.notdef}rp /underscore 160{/.notdef}rp]
VGUSFR+Calibri,Bold nf
VGUSFR+Calibri,Bold*1 [30.384 0 0 -30.384 0 0 ]msf
272.04 57.0811 mo
(FIC_BS )
[16.1947 10.2393 18.2306 17.3189 19.3851 16.6506 0 ]xsh
159.62 90.9011 mo
169.029 90.9011 li
169.029 81.4916 li
159.62 81.4916 li
cp
.719692 .439979 .027985 3.0518e-5 cmyk
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: AXNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+Calibri gcheck setglobal} if

2 0 3 <> AXNBAA+Calibri AddT42Char 
2 7736 258 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>AXNBAA+Calibri AddT42Char 
2 8086 282 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>AXNBAA+Calibri AddT42Char 
2 8388 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>AXNBAA+Calibri AddT42Char 
2 8710 296 <00010025fffa02860578003c0064b2161000b8ffe0b40b014d001bb8fff0
b30d014d1bb8fff0b40f10014c1bb8fff6b30c014d1bb8ffe8b30b014d1b
b801f9b2302a25b8ffd040121011014c250aed36471a26ed3048204c1048
003f3f3fed323fed012f2bc433f12b2b2b2bc42b33c4313001140e022322
2e0223220e02151533321e02151406232311140e0223222e023511232226
35343e02333335343e0233321e0402860405080607151e291b2534200ec9
080b0905120fc908132018182013087f101004080c087f23486d4a234224
0c0803050f13170e05090b091833513a6207111a132420fceb080b080404
080b0803152024131a11075d5e8756290d0f0c131b00>AXNBAA+Calibri AddT42Char 
2 12452 336 <00030035fe93038903c8003e004e005f00d04015122d47100f014d47080c
014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d3fb8ffe0
b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707b8ffe0b3
10014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040340b014d
0058100f014d58201012014c582a25400b12014c250f300703384ada0c53
e81515603803e93c482a2042d9384a5bd9204f003fed3fed12393fed1112
392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b1112173910
cd2b10cd2b2b2b10cd2b2b2b10cd31300114062323161615140e02232226
27060615141617171e0315140e0223222e0235343e023726263534363726
2635343e023332161721321601342623220e0215141633323e0213342627
270e0315141633323e020389130f81231c325d804e37631b12174136eb43
70522e346ba6716d99622c10213120312f32251f24345c814c29471f0110
1111fefe655d30472f17655b31482f17535f51e92029180984764b653e1b
0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e70553125
405934213e383319194c2c3d6026255d424d7a542d090821fef15c672038
492859661f3748fd5e3a3f0208192d29281541431d303e00>AXNBAA+Calibri AddT42Char 
2 13808 367 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>AXNBAA+Calibri AddT42Char 
2 13942 374 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>AXNBAA+Calibri AddT42Char 
2 14232 381 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>AXNBAA+Calibri AddT42Char 
2 14516 396 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>AXNBAA+Calibri AddT42Char 
2 14758 400 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>AXNBAA+Calibri AddT42Char 
2 15664 410 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>AXNBAA+Calibri AddT42Char 
3 1858 437 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/space 3 def
/a 258 def
/d 282 def
/e 286 def
/f 296 def
/g 336 def
/l 367 def
/n 374 def
/o 381 def
/r 396 def
/s 400 def
/t 410 def
/u 437 def
end
AXNBAA+Calibri /Encoding get
dup 32 /space put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFQ+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three 2{/.notdef}rp 
/six /.notdef /eight /nine 7{/.notdef}rp /A /.notdef /C 
/D /E /.notdef /G /H /I 2{/.notdef}rp /L 
/.notdef /N /O /P /.notdef /R /.notdef /T 
/U /V 10{/.notdef}rp /a 2{/.notdef}rp /d /e /f 
/g 4{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r 
/s /t /u 138{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
173.04 91.0411 mo
(regard as one fault)
[5.98045 8.63655 7.98526 8.20821 5.98045 8.92775 3.87271 8.20821 6.88878 3.66707 9.13336 8.92775 
8.67084 3.87268 5.22638 8.25961 8.92773 3.8898 0 ]xsh
328.46 90.9011 mo
337.87 90.9011 li
337.87 81.4916 li
328.46 81.4916 li
cp
.18497 .816068 .688869 .0602731 cmyk
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: AXNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+Calibri gcheck setglobal} if
2 13214 346 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>AXNBAA+Calibri AddT42Char 
2 13478 349 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>AXNBAA+Calibri AddT42Char 
AXNBAA+Calibri /CharStrings get begin
/h 346 def
/i 349 def
end
AXNBAA+Calibri /Encoding get
dup 104 /h put
dup 105 /i put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFQ+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three 2{/.notdef}rp 
/six /.notdef /eight /nine 7{/.notdef}rp /A /.notdef /C 
/D /E /.notdef /G /H /I 2{/.notdef}rp /L 
/.notdef /N /O /P /.notdef /R /.notdef /T 
/U /V 10{/.notdef}rp /a 2{/.notdef}rp /d /e /f 
/g /h /i 2{/.notdef}rp /l /.notdef /n /o 
2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]
VGUSFQ+Calibri nf
VGUSFQ+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
341.93 91.0411 mo
(distinguish faults)
[8.91061 4.07831 6.63174 5.74066 3.85553 9.13339 7.98526 8.91061 4.07828 6.63174 8.91061 3.87271 
5.22635 8.25961 9.13339 3.8898 5.74066 0 ]xsh
gsave
50.4 456.151 mo
561.6 456.151 li
561.6 3.87109 li
50.4 3.87109 li
cp
eclp
.95174 lw
51.188 455.501 mo
561.128 455.501 li
561.128 4.40106 li
51.188 4.40106 li
cp
1 /0 /CSD get_res sepcs
.149 sep
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/VGUSFQ+Calibri*1 uf
/VGUSFQ+Calibri uf
/AXNBAA+Calibri uf
/VGUSFR+Calibri,Bold*1 uf
/VGUSFR+Calibri,Bold uf
/YEKBAA+Calibri,Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 102 1121 a Fq(\(a\))25 b(Caption)h(of)h(sub\014gure)d(1)
1277 1034 y @beginspecial 0 @llx 0 @lly 521 @urx 459
@ury 1591 @rwi @setspecial
%%BeginDocument: OFOT_normal.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OFOT_normal.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: niuxintao
%%CreationDate: 3/7/2014, 11:16:17 PM
%%BoundingBox: 0 0 521 459
%%HiResBoundingBox: 0 0 520.3686 458.5134
%%CropBox: 0 0 520.3686 458.5134
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 722 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-03-07T23:11:25+08:00"
   xmp:CreatorTool="Microsoft® Excel® 2013"
   xmp:ModifyDate="2014-03-07T23:11:25+08:00"
   pdf:Producer="Microsoft® Excel® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>xintao niu</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -458.513 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 458.513 li
520.369 458.513 li
520.369 0 li
cp
clp
[1 0 0 1 -46.1459 0 ]ct
50.933 454.709 mo
561.103 454.709 li
561.103 3.33929 li
50.933 3.33929 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
1.4283 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
71.88 122.179 mo
71.88 414.069 li
165.39 122.179 mo
165.39 414.069 li
259.09 122.179 mo
259.09 414.069 li
352.55 122.179 mo
352.55 414.069 li
446.02 122.179 mo
446.02 414.069 li
539.64 122.179 mo
539.64 414.069 li
1 /0 /CSD get_res sepcs
.149 sep
@
100.26 163.959 mo
112.83 163.959 li
112.83 414.069 li
100.26 414.069 li
cp
193.73 163.959 mo
206.53 163.959 li
206.53 414.069 li
193.73 414.069 li
cp
287.19 351.579 mo
299.99 351.579 li
299.99 414.069 li
287.19 414.069 li
cp
474.35 330.779 mo
487.15 330.779 li
487.15 414.069 li
474.35 414.069 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.719692 .439979 .027985 3.0518e-5 cmyk
f
124.49 205.549 mo
137.06 205.549 li
137.06 414.069 li
124.49 414.069 li
cp
311.42 247.369 mo
324.21 247.369 li
324.21 414.069 li
311.42 414.069 li
cp
.18497 .816068 .688869 .0602731 cmyk
f
71.88 414.069 mo
539.64 414.069 li
1 /0 /CSD get_res sepcs
.149 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LLIBAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /LLIBAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9ddb2dc000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c796614749fac00008f600000894a68656164ecde32e000000f640000
0036686865610dad0c0b00000f9c00000024686d74787cbf3e1100000fc0
00002fe06c6f6361784e596000003fa000001e4e6d617870213625500000
5df0000000206e616d6519aa717b00005e1000000d3e707265706baf02fe
00006b5000002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
fb040600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d0000000100000005b852c6e92fe05f0f3cf500190800
00000000bbeb7ccc00000000cbdab383fbfafd8b09ec07b6000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000008ca040e0000000000000000000001cf000004a1
002300000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000044400610000
00000000000000000000000000000000000004ec00ac0000000000000000
0000000003e800ac00000000000000000000000000000000000000000000
000000000000000000000000000000000000050c005b0000000000000000
000000000000000004fc00ac0000000000000000020400ac000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000035d00ac000000000000
000000000000000000000000000006d700ac052a00ac0000000000000000
000000000000000000000000054c00630000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
042200ac0000000000000000045800ac0000000000000000000000000000
0000000000000000000000000000000000000000000003e6000f00000000
0000000000000000052200aa000000000000000000000000000000000000
00000000000000000000000000000000000000000000048a002200000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000003f40010
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000003cb006d00000000
00000000000000000000000000000000046500a100000000000000000000
0000038000a1000000000000000000000000000000000000000000000000
000000000000000000000000035000a10482006c00000000000000000000
000000000000047800a1000000000000000001ec00a10000000000000000
000000000000000000000000000000000000000001ec0011000000000000
00000000000000000000000000000000000002e000a10000000000000000
000000000000000000000000060600a1049100a100000000000000000000
0000000000000000000004aa006600000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000003c5
00a1000000000000000003ed00a1000000000000000000000000034f0049
00000000000000000000000000000000000000000359001c000000000000
000000000000048d009f0000000000000000000000000000000000000000
000000000000000000000000000000000000000003fd0021000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000003d5005c0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0434006000000000000000000000000003fb005d00000000000000000000
000000000000000000000000000000000000000000000000000002710025
000000000000000004ab0025069b002508d50025043c0025000000000000
000000000000000000000000000000000000000000000000000000000000
067600250000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
043c00250000000000000000000000000676002504ed0025000000000000
00000728002503c400350000000000000000000000000000000004340060
0000000000000000000000000000000004340099000000000000000001d6
008500000000000000000000000000000000000000000000000000000000
0000000001d6009900000000000000000000000000000000000000000000
0000000000000000000001d6009900000000000000000000000000000000
000000000000000004340099000000000000000000000000000000000000
0000000000000438005a0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002ca00990000000000000000000000000321005100000000
0000000000000000000000000000000005ae005100000000000000000000
000002ae002100000000000000000000000004e600210475002100000000
000000000000000000000000000000000000000000000000000000000475
002105130021074b002106d9002100000000000000000000000000000000
0000000000000000000000000000000006d9002104340094000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002ac0044000000000000
000002e5004802b8004701c100240297002a02e9006c0163006100000000
00000000015e006c0000000002e6006c02e60045000000000000000001f6
006c0230004201e3002302e9006c00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001d6000001ce000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000029b010a000000000000
000000000000000000000000000000000000026000ed0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000494005f02cb002303ec0062
03ec0051045500220000000000000000000000000436006300000000040e
0048040e00ae040e0072040e0067040e0020000000000000000000000000
040e00520000000004430067028d00190381005c0373005903ac00260000
0000000000000000000003b5004b00000000039f0050039f008d039f0065
039f0062039f003a000000000000000000000000039f0051000000000494
005f02cb002303ec006203ec005104280022000000000000000000000000
0436006300000000040e0048040e00ae040e0072040e0067040e00300000
00000000000000000000040e0052000000000321004801f8002302b0004b
02ad004102db002500000000000000000000000002e1004b000000000000
0000000000000000000000000000000000000321004801f8002302b0004b
02ad004102db002500000000000000000000000002e1004b000000000000
000000000000000000000000000000000000029d003801f500310252003c
0249002d024a00140000000000000000000000000257002500000000029d
003801f500310252003c0249002d024a0014000000000000000000000000
025700250000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000002f5001c000000000306005a034b
008e02a8008e000000000344005a035b008e01a6008e0000000000000000
025b008e046d008e0375008d0375005a02d8008e00000000029b00570000
0000025700040314005702e3001a00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002f5001c000000000000000000000000034b008e
02a8008e000000000344005a035b008e01a6008e0000000000000000025b
008e046d008e0375008d000000000375005a0000000002d8008e029b0057
025700040314005700000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00a100a100a100a1012f012f012f012f012f012f012f012f012f012f012f
012f012f012f01ac01ac01ac01ac01ac01ac021902190219021902950295
029502950295029502950295029502950295033c033c033c033c033c03dc
03dc03dc0427042704270427042704270427042704270427042704270427
04270427047504750475047504750475052205bd05bd05bd05bd05bd05bd
06350635063506350635063506350635063506350635063506ae06ae06ae
075907590759075907590759075907590759075907c007c007c007c0084b
084b084b084b084b084b084b084b084b084b084b08bd08bd08bd08bd08bd
08bd08bd08bd08bd08bd08bd08bd08bd08bd08bd08bd0923092309230923
092309230923092309230923092309230923092309890989098909890989
098909cb09cb09cb09cb0a240a240a240a240a240a240a240a240a240a24
0a710ae80ae80ae80ae80ae80b460b460b460b720b720b720b720b720b72
0b720b720b7d0b7d0b7d0b7d0b7d0b7d0b7d0bb20bb20bb20bb20bb20bb2
0c280c940c940c940c940c940c940ce20ce20ce20ce20ce20ce20ce20ce2
0ce20ce20ce20ce20d390d390d390db30db30db30db30e390e390e390e39
0e390e390e7a0e7a0e7a0e7a0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0f1c0f1c0f1c0f1c0f1c0f1c0f1c0f1c0f1c0f1c0f1c0f1c0f1c
0f1c0f1c0f1c0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb
0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb0fcb106210621062
10621103110311031103110311031103110311031103118611861186122e
12eb13ee1481148114811481148114811481148114811481155a155a155a
155a155a155a155a155a155a155a155a155a155a155a155a15e215e215e2
15e216ad175b175b175b1852193f193f193f193f193f19cf19cf19cf19cf
19cf1a531a531a531acc1acc1acc1acc1acc1acc1acc1acc1acc1af81af8
1af81af81af81af81af81af81af81b3b1b3b1b3b1b3b1b3b1b3b1b3b1bcc
1bcc1bcc1bcc1bcc1bcc1bcc1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
1c5a1c5a1c5a1c5a1c5a1c5a1cd31cd31cd31cd31d991d991d991d991d99
1d991e981e981e981e981f141f141f141f141fc11fcd1fcd1fcd1fcd1fcd
1fcd1fcd1fcd1fcd204320f521ea21f621f621f621f621f621f621f621f6
21f622b52345234523452345234523452345234523452345234523452345
234523452345234523452345234523452345234523452345234523452345
2345234523bb23bb23bb2421248524e625a92606264a264a264a26762676
26cc271527152715276827e0283a28932893289328932893289328932893
289328932893289328932893289328932893289328932893289328932893
289328932893289328932893289328932893289328932893289328932893
289328932893289328932893289328932893289328932893289328932893
28932893289328932893289328932893289328b728db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db28db28db28db28db28db28db28db28db28db28db28db28db28db
28db28db2920292029202920292029202920296e296e296e296e296e296e
296e296e296e296e296e296e296e296e296e296e296e296e296e296e296e
296e296e296e296e296e296e296e296e296e296e296e296e296e296e296e
296e296e296e296e296e296e296e296e296e296e296e296e296e296e296e
296e296e296e296e296e296e296e296e296e296e296e296e296e296e296e
296e296e296e296e29b429b429b429b429b429b429b429b429b429b429b4
29b429b429b429b429b429b429b429b429b429b429b429b429b429b429b4
29b429b429b429b429b429b429b429b429b42a022a452abc2b5b2bbd2bbd
2bbd2bbd2c442c442c922cee2d5c2df82e5a2e5a2e5a2e5a2f802f802fce
30113083311d318231823182318232133213326032b932c132c9332c332c
332c332c33b133b13401344334bb355835bd35bd35bd35bd35c535c53678
372f37cf38c3398839883988398839903990399939a239ab39b439bd39bd
39bd39bd39c639c639c639c639c639c639c63a113a543ab63b433ba43ba4
3ba43ba43c2a3c2a3c2a3c2a3c2a3c2a3c2a3c753cb73d1e3db63e183e18
3e183e183ea03ea03ea93eb23ebb3ec43ecd3ecd3ecd3ecd3ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed63ed6
3ed63ede3ede3f413f493f513f513f593f613f693f693f693f713f793f81
3f893f913f913f993f993fa13fa93fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec3fec
3fec3fec3fec3fec3fec3fec3fec4038403840384038407a40d340d34146
41a841d641d641d6420e427f42ef42ef43364336438a4410445344a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a544a544a544a544a544a544a544a5
44a544a544a544a544a544a544a544a50000000100000f26009600050078
000300020010002f0065000011902410000200010000002d022200000003
00000000006400000000000300000001000e00640000000300000002000e
03040000000300000003002403120000000300000004000e006400000003
00000005001803360000000300000006000e006400000003000000070076
034e0000000300000008002a000e0000000300000009002003c400000003
0000000a02a00064000000030000000b005603e4000000030000000c002a
043a000000030000000d02980464000000030000000e006c06fc00010000
000000000032076800010000000000010007079a00010000000000020007
08ea0001000000000003001208f100010000000000040007079a00010000
00000005000c090300010000000000060007079a0001000000000007003b
090f00010000000000080015076f00010000000000090010094a00010000
0000000a0150079a000100000000000b002b095a000100000000000c0015
0985000100000000000d014c099a000100000000000e00360ae600030001
04090000006400000003000104090001000e00640003000104090002000e
03040003000104090003002403120003000104090004000e006400030001
04090005001803360003000104090006000e006400030001040900070076
034e0003000104090008002a000e0003000104090009002003c400030001
0409000a02a00064000300010409000b005603e4000300010409000c002a
043a000300010409000d02980464000300010409000e006c06fc00a90020
00320030003100320020004d006900630072006f0073006f006600740020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e00430061006c006900620072006900200069007300200061
0020006d006f006400650072006e002000730061006e0073002000730065
007200690066002000660061006d0069006c007900200077006900740068
00200073007500620074006c006500200072006f0075006e00640069006e
006700730020006f006e0020007300740065006d007300200061006e0064
00200063006f0072006e006500720073002e002000490074002000660065
0061007400750072006500730020007200650061006c0020006900740061
006c006900630073002c00200073006d0061006c006c0020006300610070
0073002c00200061006e00640020006d0075006c007400690070006c0065
0020006e0075006d006500720061006c00200073006500740073002e0020
004900740073002000700072006f0070006f007200740069006f006e0073
00200061006c006c006f00770020006800690067006800200069006d0070
00610063007400200069006e002000740069006700680074006c00790020
0073006500740020006c0069006e006500730020006f0066002000620069
006700200061006e006400200073006d0061006c006c0020007400650078
007400200061006c0069006b0065002e002000430061006c006900620072
0069002700730020006d0061006e00790020006300750072007600650073
00200061006e006400200074006800650020006e00650077002000720061
007300740065007200690073006500720020007400650061006d00200075
007000200069006e0020006200690067006700650072002000730069007a
0065007300200074006f002000720065007600650061006c002000610020
007700610072006d00200061006e006400200073006f0066007400200063
00680061007200610063007400650072002e0052006500670075006c0061
0072004d006900630072006f0073006f00660074003a002000430061006c
006900620072006900560065007200730069006f006e00200035002e0037
003200430061006c00690062007200690020006900730020006100200074
0072006100640065006d00610072006b0020006f00660020007400680065
0020004d006900630072006f0073006f00660074002000670072006f0075
00700020006f006600200063006f006d00700061006e006900650073002e
004c007500630028006100730029002000640065002000470072006f006f
00740068007400740070003a002f002f007700770077002e006d00690063
0072006f0073006f00660074002e0063006f006d002f007400790070006f
006700720061007000680079002f006300740066006f006e007400730068
007400740070003a002f002f0066006f006e007400660061006200720069
006b002e0063006f006d0059006f00750020006d00610079002000750073
00650020007400680069007300200066006f006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
0065002000450055004c004100200066006f007200200074006800650020
00700072006f006400750063007400200069006e00200077006800690063
00680020007400680069007300200066006f006e00740020006900730020
0069006e0063006c007500640065006400200074006f0020006400690073
0070006c0061007900200061006e00640020007000720069006e00740020
0063006f006e00740065006e0074002e00200059006f00750020006d0061
00790020006f006e006c0079002000280069002900200065006d00620065
00640020007400680069007300200066006f006e007400200069006e0020
0063006f006e00740065006e00740020006100730020007000650072006d
00690074007400650064002000620079002000740068006500200065006d
00620065006400640069006e006700200072006500730074007200690063
00740069006f006e007300200069006e0063006c00750064006500640020
0069006e0020007400680069007300200066006f006e0074003b00200061
006e006400200028006900690029002000740065006d0070006f00720061
00720069006c007900200064006f0077006e006c006f0061006400200074
00680069007300200066006f006e007400200074006f0020006100200070
00720069006e0074006500720020006f00720020006f0074006800650072
0020006f0075007400700075007400200064006500760069006300650020
0074006f002000680065006c00700020007000720069006e007400200063
006f006e00740065006e0074002e0068007400740070003a002f002f0077
00770077002e006d006900630072006f0073006f00660074002e0063006f
006d002f007400790070006f006700720061007000680079002f0066006f
006e00740073002f00640065006600610075006c0074002e006100730070
0078a92032303132204d6963726f736f667420436f72706f726174696f6e
2e20416c6c205269676874732052657365727665642e43616c6962726920
69732061206d6f6465726e2073616e732073657269662066616d696c7920
7769746820737562746c6520726f756e64696e6773206f6e207374656d73
20616e6420636f726e6572732e204974206665617475726573207265616c
206974616c6963732c20736d616c6c20636170732c20616e64206d756c74
69706c65206e756d6572616c20736574732e204974732070726f706f7274
696f6e7320616c6c6f77206869676820696d7061637420696e2074696768
746c7920736574206c696e6573206f662062696720616e6420736d616c6c
207465787420616c696b652e2043616c696272692773206d616e79206375
7276657320616e6420746865206e65772072617374657269736572207465
616d20757020696e206269676765722073697a657320746f207265766561
6c2061207761726d20616e6420736f6674206368617261637465722e5265
67756c61724d6963726f736f66743a2043616c6962726956657273696f6e
20352e373243616c6962726920697320612074726164656d61726b206f66
20746865204d6963726f736f66742067726f7570206f6620636f6d70616e
6965732e4c7563286173292064652047726f6f74687474703a2f2f777777
2e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374666f
6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f75206d61
7920757365207468697320666f6e74206173207065726d69747465642062
79207468652045554c4120666f72207468652070726f6475637420696e20
7768696368207468697320666f6e7420697320696e636c7564656420746f
20646973706c617920616e64207072696e7420636f6e74656e742e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e68747470
3a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f6772617068
792f666f6e74732f64656661756c742e61737078000000>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[15913 16277 2959 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 11976 1005 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>LLIBAA+Calibri AddT42Char 
3 12342 1006 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>LLIBAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>LLIBAA+Calibri AddT42Char 
LLIBAA+Calibri /CharStrings get begin
/one 1005 def
/two 1006 def
end
LLIBAA+Calibri /Encoding get
dup 49 /one put
dup 50 /two put
pop
end
%ADOEndSubsetFont
/VGUSFU+Calibri /LLIBAA+Calibri findfont ct_VMDictPut
/VGUSFU+Calibri*1 
[49{/.notdef}rp /one /two 205{/.notdef}rp]
VGUSFU+Calibri nf
VGUSFU+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
111.67 152.509 mo
(12)
[-7.77603 0 ]ysh
VGUSFU+Calibri*1 [-6.74784e-7 -15.336 -15.336 6.74784e-7 0 0 ]msf
205.22 152.509 mo
(12)
[-7.77606 0 ]ysh
%ADOBeginSubsetFont: LLIBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIBAA+Calibri gcheck setglobal} if
3 12662 1007 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>LLIBAA+Calibri AddT42Char 
LLIBAA+Calibri /CharStrings get begin
/three 1007 def
end
LLIBAA+Calibri /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFU+Calibri*1 
[49{/.notdef}rp /one /two /three 204{/.notdef}rp]
VGUSFU+Calibri nf
VGUSFU+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
298.8 340.139 mo
(3)sh
%ADOBeginSubsetFont: LLIBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIBAA+Calibri gcheck setglobal} if
3 11618 1004 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>LLIBAA+Calibri AddT42Char 
LLIBAA+Calibri /CharStrings get begin
/zero 1004 def
end
LLIBAA+Calibri /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFU+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 204{/.notdef}rp]
VGUSFU+Calibri nf
VGUSFU+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
392.38 402.709 mo
(0)sh
%ADOBeginSubsetFont: LLIBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIBAA+Calibri gcheck setglobal} if
3 13150 1008 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>LLIBAA+Calibri AddT42Char 
LLIBAA+Calibri /CharStrings get begin
/four 1008 def
end
LLIBAA+Calibri /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFU+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]
VGUSFU+Calibri nf
VGUSFU+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
485.95 319.279 mo
(4)sh
VGUSFU+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
135.89 194.189 mo
(10)
[-7.75204 0 ]ysh
VGUSFU+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
229.46 402.709 mo
(0)sh
%ADOBeginSubsetFont: LLIBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIBAA+Calibri gcheck setglobal} if
3 7820 972 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>LLIBAA+Calibri AddT42Char 
3 13544 1012 <ffff0052ffed03ba0521020603cc0000>LLIBAA+Calibri AddT42Char 
LLIBAA+Calibri /CharStrings get begin
/eight 1012 def
end
LLIBAA+Calibri /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFU+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 3{/.notdef}rp /eight 
199{/.notdef}rp]
VGUSFU+Calibri nf
VGUSFU+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
323.04 235.879 mo
(8)sh
VGUSFU+Calibri*1 [-6.74784e-7 -15.336 -15.336 6.74784e-7 0 0 ]msf
416.59 402.709 mo
(0)sh
VGUSFU+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
510.17 402.709 mo
(0)sh
%ADOBeginSubsetFont: LLIBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIBAA+Calibri gcheck setglobal} if
2 322 4 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>LLIBAA+Calibri AddT42Char 
2 606 18 <00010061fff0040c051e00390062b31c003b2bb8ffe8b310014d2bb8fff0
b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b014d2bbe
0233000e0018012f00210026012cb2135304bb012a00350030012eb10956
003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c4313025140e0623222e02
35343e0233321e0615140e0223222e0223220e0215141e0233323e023332
1e02040c02050814405f7b497ecb8f4d5396d17f386a5a461b0805030408
0b080e324f714f568d64373563905b4d7351340f070a0603b71018120e14
29271b54a4f19da1fcaf5c15202a1b0e131a12141c1309272f274586c17c
7bbd7f41262f2606111e>LLIBAA+Calibri AddT42Char 
2 1074 28 <000100ac0000037c050e002c0076b11a27b8ffe8b310014d27b8fff0b30f
014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d27b80211
400909132013200009001ab80108400d802601c02601d0260126260619b8
010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f2f123939
2f2f10e12b2b2b2b2b32313025140e0223212226351134363321321e0215
140e0223211121321e0215140e0223211121321e02037c040a0d08fd9317
2929170266080d080505080d08fe0601b2080d090404090d08fe4e020108
0d0a0447121b12081f270482271f08121b14121b1108fe6a09101c13121a
1007fe3108111b00>LLIBAA+Calibri AddT42Char 
2 3420 90 <000200acfffa040b050e003600440091401e102e1137080b014d37100f01
4d37100c0d014c371810014d37180b014d37b80233b7294010014d293f11
b8fff0b310014d11b8fff0b30f014d11b8fff0b30d014d11b8fff6b30c01
4d11b8ffe8b30b014d11b80211b21c2e10b80108b67040014040173db801
0bb5215117550555003f3f3fed12392f5ded39012fe12b2b2b2b2b32d42b
e12b2b2b2b2b123939313025140e0223222e0227032e03232311140e0223
222e023511343633213216171e0315140e02071e03171316160134262726
2623231133323e02040b0614241e1a21140b0477152d3e543b7309132119
192114082917011331411a4b734e2723425c3920342d2814740e08fefd44
50193f3391a84463421f1a080c08040409100c013134573f23fdd9080c07
0505070c0804ae271f05030d38566f4341674f3a140e2b3c4e31fee3241d
03854c69170706fe4c213b50>LLIBAA+Calibri AddT42Char 
2 3762 100 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>LLIBAA+Calibri AddT42Char 
2 3968 104 <000100aaffed04790514002b0099401d602d01201810014d20100f014d20
100d014d200a0c014d20180b014d20b802104011004015014d004013014d
004011014d0016b8ffe8b310014d16b8fff0b30f014d16b8fff0b30d014d
16b8fff6b30c014d16b8ffe8b30b014d16ba0210000affc0b315014d0ab8
ffc0400913014d0a265210521bb80129b10556003fed3f3f012f2b2be12b
2b2b2b2bd42b2b2be12b2b2b2b2b31305d01140e0223222e023511343e02
33321e021511141e0233323e023511343e0233321e021504794580b8756b
b07e440814201a182213082c5375494b75512b081421191821130901de76
b980423e79b6770323080c070505070c08fcf25a86592d2c588257031708
0c070505070c0800>LLIBAA+Calibri AddT42Char 
LLIBAA+Calibri /CharStrings get begin
/A 4 def
/C 18 def
/E 28 def
/R 90 def
/T 100 def
/U 104 def
end
LLIBAA+Calibri /Encoding get
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 82 /R put
dup 84 /T put
dup 85 /U put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFU+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 3{/.notdef}rp /eight 
8{/.notdef}rp /A /.notdef /C /.notdef /E 12{/.notdef}rp /R 
/.notdef /T /U 170{/.notdef}rp]
VGUSFU+Calibri nf
VGUSFU+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
75.792 438.229 mo
(ACCURATE)
[11.193 10.5194 10.5194 12.1118 10.5193 11.193 9.83029 0 ]xsh
%ADOBeginSubsetFont: LLIBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIBAA+Calibri gcheck setglobal} if
2 2628 69 <000100acfffa047e0511003d0085b3270f0f14b8ffe8b310014d14b8ffe8
b30f014d14b8ffe8b30d014d14b8fff0b30c014d14b8ffe8b30b014d14b8
0211401e1e0a2e2e321810014d32180f014d32180d014d32100c014d3218
0b014d32b802114010001e38520a2e0f270419225119550654003f3f3f12
17393f012fd4e12b2b2b2b2b32113310e12b2b2b2b2b322f33313025140e
022323222e0227012626272316161511140e0223222e0235113436333332
1e0217011e03173326263511343e0233321e0215047e0d151a0d371a2723
2315fe6820411c02020208131f18181f12082c1a521d271f1d11013a1d36
32311801020108131f191620120847141c12080b1d322702e0397d3b4896
4afcf3070d070505070d0704aa28220a17291ffdc83463605d2f4fab4f02
be070c090404090c0700>LLIBAA+Calibri AddT42Char 
2 3178 87 <000200acfffa03c7050e001c00290078b12406b8ffe8b310014d06b8fff0
b30f014d06b8fff0b30d014d06b8fff6b30c014d06b8ffe8b30b014d06b8
02114017111d1810014d1d100f014d1d100c0d014c1d200b014d1db80232
b2001125b8010ab306060c23b8010bb315510c55003f3fed12392fed012f
d4e12b2b2b2b10e12b2b2b2b2b32313001140e02232311140e0223222e02
351134363321321e0407342e0223231133323e0203c74077ad7893091321
19192114082a1a01152a4d696d4c29b53b575d2c9f9b4e6746240393619c
6e3cfe2e080c070505070c0804aa282207173f5c79574f6a340efdf92847
6300>LLIBAA+Calibri AddT42Char 
LLIBAA+Calibri /CharStrings get begin
/N 69 def
/P 87 def
end
LLIBAA+Calibri /Encoding get
dup 78 /N put
dup 80 /P put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFU+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 3{/.notdef}rp /eight 
8{/.notdef}rp /A /.notdef /C /.notdef /E 8{/.notdef}rp /N 
/.notdef /P /.notdef /R /.notdef /T /U 170{/.notdef}rp]
VGUSFU+Calibri nf
VGUSFU+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
180.34 438.229 mo
(PARENT)
[10.2743 11.193 10.504 9.8304 12.1117 0 ]xsh
%ADOBeginSubsetFont: LLIBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIBAA+Calibri gcheck setglobal} if
2 856 24 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>LLIBAA+Calibri AddT42Char 
2 1656 44 <000100acfffa04500514002f00b8b43f3101230cb8ffe8b310014d0cb8ff
f0b30f014d0cb8fff0b30d014d0cb8fff6b30c014d0cb8ffe8b30b014d0c
b80211401c17240b1810014d0b100f014d0b100d014d0b0a0c014d0b180b
014d0bb802104017004015014d004013014d00401011014c00400c014d00
17b8ffc0b315014d17b8ffc0b613014d172a5224b8012c400fc00c01d00c
010c0c121d5212550555003f3f3f12392f5d71ed3f012f2b2bd42b2b2b2b
e12b2b2b2b2b3210e12b2b2b2b2b3231305d25140e0223222e0235112111
140e0223222e023511343e0233321e0215112111343e0233321e02150450
081421181a201408fdb308142119182214080814221819211408024d0814
201a182114081a080c070505070c08023efdc2080c070505070c0804da08
0c070505070c08fdfa0206080c070505070c0800>LLIBAA+Calibri AddT42Char 
2 1976 47 <000100acfffa0158051400150050b73f174f17af170300b8ffe8b310014d
00b8fff0b30f014d00b8fff0b30d014d00b8fff6b30c014d00b8ffe8b30b
014d00ba0211000affc0b715014d0a10520555003f3f012f2be12b2b2b2b
2b31305d25140e0223222e023511343e0233321e02150158081421191822
140809152117192114081a080c070505070c0804da080c070505070c0800
>LLIBAA+Calibri AddT42Char 
2 2126 62 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>LLIBAA+Calibri AddT42Char 
LLIBAA+Calibri /CharStrings get begin
/D 24 def
/H 44 def
/I 47 def
/L 62 def
end
LLIBAA+Calibri /Encoding get
dup 68 /D put
dup 72 /H put
dup 73 /I put
dup 76 /L put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFU+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 3{/.notdef}rp /eight 
8{/.notdef}rp /A /.notdef /C /D /E 2{/.notdef}rp /H 
/I 2{/.notdef}rp /L /.notdef /N /.notdef /P /.notdef 
/R /.notdef /T /U 170{/.notdef}rp]
VGUSFU+Calibri nf
VGUSFU+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
265.01 438.229 mo
(CHILDREN)
[10.5041 11.8668 6.15543 8.66656 11.6525 10.504 9.7998 0 ]xsh
%ADOBeginSubsetFont: LLIBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIBAA+Calibri gcheck setglobal} if
2 1322 39 <0001005bffee04780520003f00a2401d1c1c0f181810014d18100f014d18
100d014d180a0c014d18100b014d18b80211400d00bf2701202740276027
03270fb8ffe8b310014d0fb8fff0b30f014d0fb8ffecb30d014d0fb8ffee
b30c014d0fb8ffe8b30b014d0fb80232b42f34013418b8010ab42222392f
3ebb010a0005000a0129b2395314b8012cb12f56003fed3ffdd4ed111239
2fed012f5de12b2b2b2b2bd45d5dc4e12b2b2b2b2b12392f313001140e02
23222e0223220e0215141e02333236371121222635343e023321321e0215
11140e0423222e0235343e0233321e04047804080c070c385e835a6baa76
3f457aa9653c7b35fed4111104090c09019b0b16120a123a5c62643196ec
a3565da9ed904a8265451a0a045e131d1308262e264e8abe6f7cc084441d
1d01792224131b110808101c12fe131a261d22180c5dacf0949afab0611a
23291a22>LLIBAA+Calibri AddT42Char 
2 2938 75 <00020063ffed04e8052100130027007c401a141810014d14100f014d1414
0d014d14120c014d14180b014d14b80233400920003000800003001eb8ff
e8b310014d1eb8fff0b30f014d1eb8ffecb30d014d1eb8ffeeb30c014d1e
b8ffe8b30b014d1ebb0233000a00190129b20f5323b8012bb10556003fed
3fed012fe12b2b2b2b2bd45de12b2b2b2b2b313001140e0223222e023534
3e0233321e0207342e0223220e0215141e0233323e0204e84a93de9492d5
8b444a94de948fd48d45b5275b987070985f29265a9772719a5e2802969d
fcb15f57a6f6a099faaf5f56a5f3a96ebd8b4e548cbb6772c08b4d548fbc
>LLIBAA+Calibri AddT42Char 
LLIBAA+Calibri /CharStrings get begin
/G 39 def
/O 75 def
end
LLIBAA+Calibri /Encoding get
dup 71 /G put
dup 79 /O put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFU+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 3{/.notdef}rp /eight 
8{/.notdef}rp /A /.notdef /C /D /E /.notdef /G 
/H /I 2{/.notdef}rp /L /.notdef /N /O /P 
/.notdef /R /.notdef /T /U 170{/.notdef}rp]
VGUSFU+Calibri nf
VGUSFU+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
367.94 438.229 mo
(IGNORE)
[6.1554 11.8668 12.1117 12.3262 10.504 0 ]xsh
%ADOBeginSubsetFont: LLIBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIBAA+Calibri gcheck setglobal} if
2 4246 115 <00010022fffa046805140024006e401d24080b014d2824011a080b014d26
1a01281701260d012c19012c180119b8ffe8b40f10014c19b8ffe8b40c0d
014c18b8ffe8b40f10014c18b8ffe840120c0d014c1918191826251f5218
0512520555003f3f12393f11120139392f2f2b2b2b2b3130005d5d015d5d
5d2b5d2b250e0323222e0427012626363633321e02170133013e03333216
16060702b7040e19271d162118110c0703fe5908011228221c2112090401
73010169030814241e1f240d03081e0b0e0803010405080b0804b2161b0e
0403080d0afbbf043f0b0e0803050e1b1600>LLIBAA+Calibri AddT42Char 
LLIBAA+Calibri /CharStrings get begin
/V 115 def
end
LLIBAA+Calibri /Encoding get
dup 86 /V put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFU+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 3{/.notdef}rp /eight 
8{/.notdef}rp /A /.notdef /C /D /E /.notdef /G 
/H /I 2{/.notdef}rp /L /.notdef /N /O /P 
/.notdef /R /.notdef /T /U /V 169{/.notdef}rp]
VGUSFU+Calibri nf
VGUSFU+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
443.02 438.229 mo
(IRRELEVANT)
[6.1554 10.504 10.504 9.79977 8.66656 9.79977 10.9481 11.1624 12.0811 0 ]xsh
%ADOBeginSubsetFont: FXYAAA+Calibri,Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /FXYAAA+Calibri,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc0ad754000000cc000000606376
74202f4935490000012c000006086670676da1ea42ac0000073400000913
676c79669b40d417000081ec000011a068656164ecbf33e5000010480000
0036686865610d8d0bf00000108000000024686d74785fc809d7000010a4
00002fde6c6f6361211c1d4c0000408400001e4e6d6178701c0216490000
5ed4000000206e616d65de46508300005ef400000d5c70726570c7f0742e
00006c500000159c676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e00002ff4000acff00000001000000004d53202000200000
1d400600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b140465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
00000005b85237fbbba35f0f3cf50019080000000000bbeb7ccc00000000
cbdab477fbdafd8d09ec07c5000100090002000000000000000100000600
fe0001c40aa0fbdafa8609ec0001000000000000000000000000000008c9
040e00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000003ac008d000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000006fe008d000000000000000000000000000000000000000000000000
056900500000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003f6000c00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000491008600000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
035800860000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0648008600000000000000000000000000000000000000000000000004da
005500000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000425
008600000000000000000000000000000000000000000000000000000000
0000000000000000037b001b000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000044b004b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000002d8007e0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002f5003a000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000200005a00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000029b00e6000000000000000000000000000000000000
000000000000026900cf0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000382007900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000029200780000
00000000000000000000000000000000000000000000049a007800000000
03a100550000000000000000000000000000000002b0001e000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000049a0078000000000000
000003a1005500000000000000000000000002b0001e0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e0135013501350135013501350135013501350135013501350135
013501350135013501350135013501350135013501350135013501350135
0135013501f901f901f901f901f901f901f9026c026c026c026c026c026c
026c026c026c026c026c026c026c026c026c026c026c026c026c026c026c
026c026c026c026c02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb
02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb
02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb
02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb03100310031003100310
031003100310031003100310031003100310035f035f035f035f035f035f
035f035f035f035f035f035f035f035f035f035f035f035f035f035f035f
035f035f035f035f035f035f035f035f035f03d503d503d503d503d503d5
03d504230423042304230423042304230423042304230423042304230423
042304a004a004a004a004a004a004a004a004a004a004e004e004e004e0
04e004e004e004e004e004e004e004e004e004e004e004e004e004e004e0
04e004e004e004e004e004e004e004e004e004e004e004e004e004e004e0
04e004e004e004e004e004e004e004e004e004e004e004e004e004e004e0
04e004e004e004e004e004e0057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb
05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb
05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb
05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb
05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb0661
066106610661066106610661066106610661066106610661066106b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b40702070207020702
070207020702074f074f074f074f074f074f074f074f074f074f074f074f
074f074f074f074f074f074f074f074f074f074f074f074f074f074f074f
074f074f074f074f074f074f074f074f074f074f074f074f074f074f074f
074f074f074f074f074f074f074f074f074f074f074f074f074f074f074f
074f074f074f074f074f074f074f074f074f074f074f074f074f079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
07df07df07df07df07df07df07df07e707e707ef07ef07ef07ef07ef07f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f70859
08590859089c089c089c089c08d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d00000000100000f26004f0005002c000200020010002f00600000
0c63159c000100010000002d022200000003000000000064000000000003
00000001000e006400000003000000020008032a0000000300000003002e
030400000003000000040018031a00000003000000050018033200000003
000000060018034a0000000300000007007603620000000300000008002a
000e0000000300000009002003d8000000030000000a02a0006400000003
0000000b005603f8000000030000000c002a044e000000030000000d0298
0478000000030000000e006c071000010000000000000032077c00010000
00000001000707ae00010000000000020004091100010000000000030017
08fe0001000000000004000c09090001000000000005000c091500010000
00000006000c09210001000000000007003b092d00010000000000080015
0783000100000000000900100968000100000000000a015007ae00010000
0000000b002b0978000100000000000c001509a3000100000000000d014c
09b8000100000000000e00360b0400030001040900000064000000030001
04090001000e006400030001040900020008032a0003000104090003002e
030400030001040900040018031a00030001040900050018033200030001
040900060018034a0003000104090007007603620003000104090008002a
000e0003000104090009002003d8000300010409000a02a0006400030001
0409000b005603f8000300010409000c002a044e000300010409000d0298
0478000300010409000e006c071000a9002000320030003100320020004d
006900630072006f0073006f0066007400200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e00430061006c
0069006200720069002000690073002000610020006d006f006400650072
006e002000730061006e0073002000730065007200690066002000660061
006d0069006c00790020007700690074006800200073007500620074006c
006500200072006f0075006e00640069006e006700730020006f006e0020
007300740065006d007300200061006e006400200063006f0072006e0065
00720073002e002000490074002000660065006100740075007200650073
0020007200650061006c0020006900740061006c006900630073002c0020
0073006d0061006c006c00200063006100700073002c00200061006e0064
0020006d0075006c007400690070006c00650020006e0075006d00650072
0061006c00200073006500740073002e0020004900740073002000700072
006f0070006f007200740069006f006e007300200061006c006c006f0077
0020006800690067006800200069006d007000610063007400200069006e
002000740069006700680074006c007900200073006500740020006c0069
006e006500730020006f0066002000620069006700200061006e00640020
0073006d0061006c006c0020007400650078007400200061006c0069006b
0065002e002000430061006c0069006200720069002700730020006d0061
006e0079002000630075007200760065007300200061006e006400200074
006800650020006e00650077002000720061007300740065007200690073
006500720020007400650061006d00200075007000200069006e00200062
00690067006700650072002000730069007a0065007300200074006f0020
00720065007600650061006c002000610020007700610072006d00200061
006e006400200073006f0066007400200063006800610072006100630074
00650072002e004d006900630072006f0073006f00660074003a00200043
0061006c006900620072006900200042006f006c00640056006500720073
0069006f006e00200035002e0037003200430061006c0069006200720069
002d0042006f006c006400430061006c0069006200720069002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00670072006f007500700020006f006600200063006f006d00700061006e
006900650073002e004c0075006300280061007300290020006400650020
00470072006f006f00740068007400740070003a002f002f007700770077
002e006d006900630072006f0073006f00660074002e0063006f006d002f
007400790070006f006700720061007000680079002f006300740066006f
006e007400730068007400740070003a002f002f0066006f006e00740066
0061006200720069006b002e0063006f006d0059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
0020006100730020007000650072006d0069007400740065006400200062
00790020007400680065002000450055004c004100200066006f00720020
007400680065002000700072006f006400750063007400200069006e0020
007700680069006300680020007400680069007300200066006f006e0074
00200069007300200069006e0063006c007500640065006400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e0074002e00200059006f
00750020006d006100790020006f006e006c007900200028006900290020
0065006d0062006500640020007400680069007300200066006f006e0074
00200069006e00200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
006500200065006d00620065006400640069006e00670020007200650073
007400720069006300740069006f006e007300200069006e0063006c0075
00640065006400200069006e0020007400680069007300200066006f006e
0074003b00200061006e006400200028006900690029002000740065006d
0070006f0072006100720069006c007900200064006f0077006e006c006f
006100640020007400680069007300200066006f006e007400200074006f
002000610020007000720069006e0074006500720020006f00720020006f
00740068006500720020006f007500740070007500740020006400650076
00690063006500200074006f002000680065006c00700020007000720069
006e007400200063006f006e00740065006e0074002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f0066006f006e00740073002f00640065006600610075006c0074
002e0061007300700078a92032303132204d6963726f736f667420436f72
706f726174696f6e2e20416c6c205269676874732052657365727665642e
43616c696272692069732061206d6f6465726e2073616e73207365726966
2066616d696c79207769746820737562746c6520726f756e64696e677320
6f6e207374656d7320616e6420636f726e6572732e204974206665617475
726573207265616c206974616c6963732c20736d616c6c20636170732c20
616e64206d756c7469706c65206e756d6572616c20736574732e20497473
2070726f706f7274696f6e7320616c6c6f77206869676820696d70616374
20696e2074696768746c7920736574206c696e6573206f66206269672061
6e6420736d616c6c207465787420616c696b652e2043616c696272692773
206d616e792063757276657320616e6420746865206e6577207261737465
7269736572207465616d20757020696e206269676765722073697a657320
746f2072657665616c2061207761726d20616e6420736f66742063686172
61637465722e4d6963726f736f66743a2043616c6962726920426f6c6456
657273696f6e20352e373243616c696272692d426f6c6443616c69627269
20697320612074726164656d61726b206f6620746865204d6963726f736f
66742067726f7570206f6620636f6d70616e6965732e4c75632861732920
64652047726f6f74687474703a2f2f7777772e6d6963726f736f66742e63
6f6d2f7479706f6772617068792f6374666f6e7473687474703a2f2f666f
6e7466616272696b2e636f6d596f75206d61792075736520746869732066
6f6e74206173207065726d6974746564206279207468652045554c412066
6f72207468652070726f6475637420696e20776869636820746869732066
6f6e7420697320696e636c7564656420746f20646973706c617920616e64
207072696e7420636f6e74656e742e20596f75206d6179206f6e6c792028
692920656d626564207468697320666f6e7420696e20636f6e74656e7420
6173207065726d69747465642062792074686520656d62656464696e6720
7265737472696374696f6e7320696e636c7564656420696e207468697320
666f6e743b20616e6420286969292074656d706f726172696c7920646f77
6e6c6f6164207468697320666f6e7420746f2061207072696e746572206f
72206f74686572206f75747075742064657669636520746f2068656c7020
7072696e7420636f6e74656e742e687474703a2f2f7777772e6d6963726f
736f66742e636f6d2f7479706f6772617068792f666f6e74732f64656661
756c742e6173707800>
<b10903b802f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c
1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb8
02f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802ed
b21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e
2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1f
b802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802
e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb2
1d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f
1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb8
02d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cf
b21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d121fb802cbb21d
121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1f
b802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802
c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb2
1d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f
1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb8
02b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1
b21c321fb802b0b21c321fb802afb21c331fb802aeb21c331fb802adb21c
331fb802acb21c331fb802abb21c331fb802aab21c311fb802a9b21c311f
b802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5b21c321fb802
a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c331fb802a0b2
1c331fb8029fb21c331fb8029eb21c331fb8029db21c331fb8029cb21c31
1fb8029bb21c311fb8029ab21c321fb80299b21c321fb80298b21c321fb8
0297b21c321fb80296b21c321fb80295b21c331fb80294b21c331fb80293
b21c331fb80292b21c331fb80291b21c331fb80290b21c331fb8028fb21c
331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8028bb21c321f
b8028ab21c321fb80289b21c321fb80288b21c331fb80287b21c331fb802
86b21c331fb80285b21c331fb80284b21c331fb80283b21c331fb80282b2
1b341fb80281b21b341fb80280b21b341fb8027fb21b341fb8027eb21b34
1fb8027db21b341fb8027cb21b341fb8027bb21b341fb8027ab21b341fb8
0279b21b341fb80278b21b341fb80277b21b341fb80276b21b341fb80275
b21b341fb80274b21b341fb80273b21b341fb80272b21b341fb80271b21b
341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8026db21a351f
b8026cb21a351fb8026bb21a351fb8026ab21a351fb80269b21a351fb802
68b21a351fb80267b21a351fb80266b21a351fb80265b21a351fb80264b2
1a351fb80263b21a351fb80262b21a351fb80261b21a351fb80260b21a35
1fb8025fb21a351fb8025eb21a351fb8025db21a351fb8025cb21a351fb8
025bb21a351fb8025ab21a351fb80259b219371fb80258b219371fb80257
b219371fb80256b219371fb80255b219371fb80254b219371fb80253b219
371fb80252b219371fb80251b219371fb80250b219371fb8024fb219371f
b8024eb219371fb8024db219371fb8024cb219371fb8024bb219371fb802
4ab219371fb80249b219371fb80248b219371fb80247b219371fb80246b2
19371fb80245b219371fb80244b219371fb80243b219371fb80242b21937
1fb80241b219371fb80240b219371fb8023fb219371fb8023eb219371fb8
023db219371fb8023cb219371fb8023bb219371fb8023ab219371fb80239
b218391fb80238b218391fb80237b218391fb80236b218391fb80235b218
391fb80234b218391fb80233b218391fb80232b218391fb80231b218391f
b80230b218391fb80301b2182e1fb8022fb218391fb8022eb218391fb802
2db218391fb8022cb218391fb8022bb218391fb8022ab218391fb80229b2
18391fb80228b218391fb80227b218391fb80226b218391fb80225b2173b
1fb80224b2173b1fb80223b217321fb80222b2173a1fb80221b2173b1fb8
0220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2173b1fb8021c
b2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b1fb80218b217
3b1fb80217b2173b1fb80216b2173b1fb80215b217321fb80214b2173a1f
b80213b2173b1fb80212b2173b1fb80211b2173b1fb80210b2173b1fb802
0fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb2173b1fb8020bb2
173b1fb8020ab2173b1fb80209b217321fb80208b217321fb80207b2173b
1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb80203b2173b1fb8
0202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2173b1fb801fe
b2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b1fb801fab217
3b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb801f6b2173a1f
b801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2b2173b1fb801
f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb2173b1fb801edb2
173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1fb801e9b2173b
1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801e5b216231fb8
01e4b216371fb801e3b216371fb801e2b216381fb801e1b216381fb801e0
b216431fb801dfb216441fb801deb216441fb801ddb216441fb801dcb216
451fb801dbb216461fb801dab216461fb801d9b216461fb801d8b216231f
b801d7b216231fb801d6b216381fb801d5b216431fb801d4b216431fb801
d3b216431fb801d2b216441fb801d1b216461fb801d0b216461fb801cfb2
16461fb801ceb216461fb801cdb216461fb801ccb216461fb801cbb21643
1fb801cab216231fb801c9b216231fb801c8b216371fb801c7b216371fb8
01c6b216381fb801c5b216421fb801c4b216431fb801c3b216441fb801c2
b216451fb801c1b216461fb801c0b216461fb801bfb216461fb801beb216
461fb801bdb216461fb801bcb216461fb801bbb216461fb801bab216371f
b801b9b216381fb801b8b216421fb801b7b216431fb801b6b216431fb801
b5b216431fb801b4b216441fb801b3b216441fb801b2b216441fb801b1b2
16451fb801b0b216451fb801afb216451fb801aeb216461fb801adb21646
1fb801acb216461fb801abb216461fb801aab216461fb801a9b215341fb8
01a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2154e1fb801a4
b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d1fb801a0b215
4e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8019cb215401f
b8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198b2154f1fb801
97b2154f1fb80196b215501fb80195b215521fb80194b215521fb80193b2
15521fb80192b215411fb80191b2154f1fb80190b215501fb8018fb21550
1fb8018eb215511fb8018db215521fb8018cb215521fb8018bb215521fb8
018ab214581fb80189b214591fb80188b2145c1fb80187b2145d1fb80186
b2144a1fb80185b2145b1fb80184b2145c1fb80183b214591fb80182b214
5d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c4e1fc10c4e1f
c00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561fae0b561fad0b
561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b561fa60b561f
a50b561fa40b561fa30b561fa20b561fa10b561fa00b561f9f0b561f9e0a
681f9a0a681f990a681f980a681f970a681f960a681f950a681f940a681f
930a681f920a681f910a681f9009681f8f09681f8e09681f8d09681f8c09
681f410902fc02fa0056001f02fb02fa0068001f017fb213321fb8017eb2
12371fb80174b212371fb80173b211421fb80172b211421fb80171b21142
1fb80170b211421fb8016fb211421fb8016eb211421fb8016db211421fb8
016cb211421fb8016bb211421fb8016ab211421fb8013cb211421fb8013b
b210421fb8013ab210421fb80139b210421fb80138b210421fb80137b210
421fb80136b210421fb80135b210421fb80134b210421fb80133b210421f
b80132b20f451fb80131b20f451fb80130b20f451fb80112b20f451fb801
11b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451fb8010db2
0e481fb8010cb20e481fb8010bb20e481fb8010ab20e481fb80109b20e48
1fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a
1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc
0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe0b561fbd0b56
1fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180b213321fb801
7ab211401fb80179b211421fb80178b211421fb80177b211421fb80176b2
11421fb80175b211421fb80143b211421fb80142b210421fb80141b21042
1fb80140b210421fb8013fb210421fb8013eb210421fb8013db20f451fb8
0115b20f451fb80114b20f451fb80113b20f451fb903030302b2401fa4be
030200b4030200c4030200030300b213321fb8017bb213321fb80153b212
371fb80152b211401fb80151b211401fb80150b211401fb8014fb211401f
b8014eb211401fb8014db211401fb8014cb211401fb8014bb211401fb801
4ab211401fb80149b211401fb80148b211401fb80147b211401fb80146b2
11401fb80145b211401fb80144b211401fb80122b211401fb80121b21042
1fb80120b210421fb8011fb210421fb8011eb210421fb8011db210421fb8
011cb210421fb8011bb210421fb8011ab210421fb80119b210421fb80118
b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc0f451ffb0f45
1ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e481ff40e481ff3
0d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a
1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc8
0c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b56
1fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fdb212371fb801
7db212371fb8017cb212371fb80169b2112e1fb80168b2112e1fb80167b2
11401fb80166b211401fb80165b211401fb80164b211401fb80163b21140
1fb80162b211401fb80161b211401fb80160b211401fb8015fb211401fb8
015eb211401fb8015db211401fb8015cb211401fb8015bb211401fb8015a
b211401fb80159b211401fb80158b211401fb80157b211401fb80156b211
401fb80155b211401fb80154b211401fb8012fb211401fb8012eb210421f
b8012db210421fb8012cb210421fb8012bb210421fb8012ab210421fb801
29b210421fb80128b210421fb80127b210421fb80126b210421fb80125b2
0f451fb80124b20f451fb80123b20f451fb80105b20f451fb80104b20f45
1fb80103b20f451fb80102b20f451fb80101b20e481fb8010040a20e481f
ff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c
4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f
83012e1f8248805581ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b
7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a7948775578ab
77550b77010c764875555475e475f4750314755475647574759475d475e4
7507a475b475c47503b8ffc0401275383b46807590750214757475020075
010fb8ffc04021750b0e467448725573ab725504723472023bf47201e072
01023072015072607202b8ffc0b372242846b8ffc0403572161a46107230
7240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6f
bf6f02406f090d466e486d55df6d0100bc02ff001002ff00c002ffb2030a
6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e675568ab675566
2e645565ab6455632e6255612e60555f2e5d555eab5d555c2e5a555bab5a
55592e58555703251f562e545555ab5455532e515552ab51554f2e4e554e
03251f4d2e4b554cab4b554a2e485549ab4855504801472e46554503361f
001f01001e01001e701e801ef01e040b601d701d02701de01df01d03701c
f01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f191f198f199f
19af19050f198f199f19030c7012801202701180110230114011d011e011
040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0e
cf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f0d1f0d40472f
0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f0c4f0c5f0c03
9f0c01400c262946ef0aff0a02400a242746ef09ff0902ff090100030120
01010001100120010308b8ffc0b301151f46b80100b316010501b80190b1
54532b2b4bb807ff524bb008505bb00188b02553b00188b040515ab00688
b000555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d
00421d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db1
160042592b5e73757373742b732b73742b2b73745e732b5e737475737475
5e73747573015e7374737475757473745e737473002b2b732b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b
732b2b73755f75755e732b2b2b5e7373732b7374752b5e732b2b5e732b2b
73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b185f5e00>
[4513 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 316 38 <0001008dfffa0363050e002700b9b10102435558b10713b8029440160d1d
001e1d07280f014d07180c0d014c07100b014d07ba01570013fff0b60b01
4d13131906b8ffe0b30f014d06b8ffe8b40b0e014c06b8015bb440225119
5500183f3f1a4ded2b2b12392f2bed2b2b2b012f2fc41139ed3231301b40
1107280f014d07180c0d014c07100b014d07ba01570013fff0b60b014d13
131906b8ffe0b30f014d06b8ffe8b40b0e014c06b8015bb4402251195500
183f3f1a4ded2b2b12392f2bed2b2b2b31305901140e0223211121321e02
15140e02232111140e0223222e02351134363321321e020363050b0e09fe
59018d090e0b05050b0e09fe730c1f322726331e0d2d210261090e0b0504
a21e29180cfea40a18281e1e281a0bfe1e0b100b06060b100b04952c270b
192a>FXYAAA+Calibri,Bold AddT42Char 
2 1010 75 <00020050ffe905190525001300270071b10102435558bf001402c2000000
1e02c2000a0019ffe8b40b0f014c19b8015c40090f5323180b0f014c23b8
015db240055600183f1a4ded2b3fed2b012fedd4ed31301bb90019ffe8b4
0b0f014c19b8015c40090f5323180b0f014c23b8015db240055600183f1a
4ded2b3fed2b31305901140e0223222e0235343e0233321e0205342e0223
220e0215141e0233323e020519509ee99997e1964b509ee99a93e1974dfe
ec204d806061825021204c8061618250210296a1feb15d4fa2faab9dfbb0
5e4ea2f7b666a77741497aa35b6aa9783f487ca5>FXYAAA+Calibri,Bold AddT42Char 
2 1240 100 <0001000cfffa03ea050e00220055b10102435558b10006b80294b3181106
12b8ffe8b40b0f014c12b8015bb4401d510c5500183f3f1a4ded2b32012f
c4fdcd31301bb10612b8ffe8b40b0f014c12b8015bb4401d510c5500183f
3f1a4ded2b3231305901140e02232111140e0223222e02351121222e0235
343e023321321e0203ea050a0f09febc0d1e332626331e0dfebc0a0e0a05
050a0e0a0390090f0a0504a21d29190cfbed0a100a06060a100a04130c19
291d1e2a190b0b192a00>FXYAAA+Calibri,Bold AddT42Char 
2 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>FXYAAA+Calibri,Bold AddT42Char 
FXYAAA+Calibri,Bold /CharStrings get begin
/F 38 def
/O 75 def
/T 100 def
end
FXYAAA+Calibri,Bold /Encoding get
dup 70 /F put
dup 79 /O put
dup 84 /T put
pop
end
%ADOEndSubsetFont
/VGUSFV+Calibri,Bold /FXYAAA+Calibri,Bold findfont ct_VMDictPut
/VGUSFV+Calibri,Bold*1 
[70{/.notdef}rp /F 8{/.notdef}rp /O 4{/.notdef}rp /T 171{/.notdef}rp]
VGUSFV+Calibri,Bold nf
VGUSFV+Calibri,Bold*1 [30.384 0 0 -30.384 0 0 ]msf
271.66 56.0493 mo
(OFOT)
[22.8182 15.982 22.1498 0 ]xsh
159.41 89.8693 mo
168.824 89.8693 li
168.824 80.4556 li
159.41 80.4556 li
cp
.719692 .439979 .027985 3.0518e-5 cmyk
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LLIBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIBAA+Calibri gcheck setglobal} if

2 0 3 <> LLIBAA+Calibri AddT42Char 
2 7736 258 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>LLIBAA+Calibri AddT42Char 
2 8086 282 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>LLIBAA+Calibri AddT42Char 
2 8388 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>LLIBAA+Calibri AddT42Char 
2 8710 296 <00010025fffa02860578003c0064b2161000b8ffe0b40b014d001bb8fff0
b30d014d1bb8fff0b40f10014c1bb8fff6b30c014d1bb8ffe8b30b014d1b
b801f9b2302a25b8ffd040121011014c250aed36471a26ed3048204c1048
003f3f3fed323fed012f2bc433f12b2b2b2bc42b33c4313001140e022322
2e0223220e02151533321e02151406232311140e0223222e023511232226
35343e02333335343e0233321e0402860405080607151e291b2534200ec9
080b0905120fc908132018182013087f101004080c087f23486d4a234224
0c0803050f13170e05090b091833513a6207111a132420fceb080b080404
080b0803152024131a11075d5e8756290d0f0c131b00>LLIBAA+Calibri AddT42Char 
2 12452 336 <00030035fe93038903c8003e004e005f00d04015122d47100f014d47080c
014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d3fb8ffe0
b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707b8ffe0b3
10014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040340b014d
0058100f014d58201012014c582a25400b12014c250f300703384ada0c53
e81515603803e93c482a2042d9384a5bd9204f003fed3fed12393fed1112
392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b1112173910
cd2b10cd2b2b2b10cd2b2b2b10cd31300114062323161615140e02232226
27060615141617171e0315140e0223222e0235343e023726263534363726
2635343e023332161721321601342623220e0215141633323e0213342627
270e0315141633323e020389130f81231c325d804e37631b12174136eb43
70522e346ba6716d99622c10213120312f32251f24345c814c29471f0110
1111fefe655d30472f17655b31482f17535f51e92029180984764b653e1b
0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e70553125
405934213e383319194c2c3d6026255d424d7a542d090821fef15c672038
492859661f3748fd5e3a3f0208192d29281541431d303e00>LLIBAA+Calibri AddT42Char 
2 13808 367 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>LLIBAA+Calibri AddT42Char 
2 13942 374 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>LLIBAA+Calibri AddT42Char 
2 14232 381 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>LLIBAA+Calibri AddT42Char 
2 14516 396 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>LLIBAA+Calibri AddT42Char 
2 14758 400 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>LLIBAA+Calibri AddT42Char 
2 15664 410 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>LLIBAA+Calibri AddT42Char 
3 1858 437 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>LLIBAA+Calibri AddT42Char 
LLIBAA+Calibri /CharStrings get begin
/space 3 def
/a 258 def
/d 282 def
/e 286 def
/f 296 def
/g 336 def
/l 367 def
/n 374 def
/o 381 def
/r 396 def
/s 400 def
/t 410 def
/u 437 def
end
LLIBAA+Calibri /Encoding get
dup 32 /space put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFU+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
3{/.notdef}rp /eight 8{/.notdef}rp /A /.notdef /C /D /E 
/.notdef /G /H /I 2{/.notdef}rp /L /.notdef /N 
/O /P /.notdef /R /.notdef /T /U /V 
10{/.notdef}rp /a 2{/.notdef}rp /d /e /f /g 4{/.notdef}rp 
/l /.notdef /n /o 2{/.notdef}rp /r /s /t 
/u 138{/.notdef}rp]
VGUSFU+Calibri nf
VGUSFU+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
172.85 90.0293 mo
(regard as one fault)
[5.92905 8.67082 7.98526 8.20821 5.98045 8.87634 3.8727 8.20822 6.88878 3.64993 9.13335 8.91061 
8.67084 3.87271 5.22635 8.25961 8.91061 3.8898 0 ]xsh
328.33 89.8693 mo
337.744 89.8693 li
337.744 80.4556 li
328.33 80.4556 li
cp
.18497 .816068 .688869 .0602731 cmyk
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LLIBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIBAA+Calibri gcheck setglobal} if
2 13214 346 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>LLIBAA+Calibri AddT42Char 
2 13478 349 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>LLIBAA+Calibri AddT42Char 
LLIBAA+Calibri /CharStrings get begin
/h 346 def
/i 349 def
end
LLIBAA+Calibri /Encoding get
dup 104 /h put
dup 105 /i put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFU+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
3{/.notdef}rp /eight 8{/.notdef}rp /A /.notdef /C /D /E 
/.notdef /G /H /I 2{/.notdef}rp /L /.notdef /N 
/O /P /.notdef /R /.notdef /T /U /V 
10{/.notdef}rp /a 2{/.notdef}rp /d /e /f /g /h 
/i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r 
/s /t /u 138{/.notdef}rp]
VGUSFU+Calibri nf
VGUSFU+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
341.81 90.0293 mo
(distinguish faults)
[8.91061 4.07831 6.63174 5.74066 3.85553 9.13339 7.98526 8.91061 4.07828 6.63174 8.91061 3.87271 
5.22635 8.25961 9.13339 3.8898 5.74066 0 ]xsh
.95217 lw
50.933 454.709 mo
561.103 454.709 li
561.103 3.33929 li
50.933 3.33929 li
cp
1 /0 /CSD get_res sepcs
.149 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/VGUSFU+Calibri*1 uf
/VGUSFU+Calibri uf
/LLIBAA+Calibri uf
/VGUSFV+Calibri,Bold*1 uf
/VGUSFV+Calibri,Bold uf
/FXYAAA+Calibri,Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 1503 1121 a(\(b\))g(Caption)i(of)g(sub\014gure)f(2)2680
1034 y @beginspecial 0 @llx 0 @lly 521 @urx 466 @ury
1591 @rwi @setspecial
%%BeginDocument: CTA_normal.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: CTA_normal.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: niuxintao
%%CreationDate: 3/7/2014, 11:14:25 PM
%%BoundingBox: 0 0 521 466
%%HiResBoundingBox: 0 0 520.3686 465.3862
%%CropBox: 0 0 520.3686 465.3862
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 722 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-03-07T23:11:54+08:00"
   xmp:CreatorTool="Microsoft® Excel® 2013"
   xmp:ModifyDate="2014-03-07T23:11:54+08:00"
   pdf:Producer="Microsoft® Excel® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>xintao niu</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -465.386 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 465.386 li
520.369 465.386 li
520.369 0 li
cp
clp
[1 0 0 1 -45.1641 0 ]ct
50.947 456.683 mo
561.117 456.683 li
561.117 5.2829 li
50.947 5.2829 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
1.4276 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
71.885 124.063 mo
71.885 416.053 li
165.36 124.063 mo
165.36 416.053 li
258.78 124.063 mo
258.78 416.053 li
352.2 124.063 mo
352.2 416.053 li
445.62 124.063 mo
445.62 416.053 li
538.96 124.063 mo
538.96 416.053 li
1 /0 /CSD get_res sepcs
.149 sep
@
100.03 211.743 mo
112.82 211.743 li
112.82 416.053 li
100.03 416.053 li
cp
193.45 182.503 mo
206.24 182.503 li
206.24 416.053 li
193.45 416.053 li
cp
286.87 343.083 mo
299.67 343.083 li
299.67 416.053 li
286.87 416.053 li
cp
473.72 138.643 mo
486.51 138.643 li
486.51 416.053 li
473.72 416.053 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.719692 .439979 .027985 3.0518e-5 cmyk
f
124.24 255.373 mo
137.03 255.373 li
137.03 416.053 li
124.24 416.053 li
cp
311.09 328.463 mo
323.88 328.463 li
323.88 416.053 li
311.09 416.053 li
cp
497.93 343.083 mo
510.72 343.083 li
510.72 416.053 li
497.93 416.053 li
cp
.18497 .816068 .688869 .0602731 cmyk
f
71.885 416.053 mo
538.96 416.053 li
1 /0 /CSD get_res sepcs
.149 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HJCBAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /HJCBAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9ddb2dc000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c79661437cc0800008f600000848c68656164ecde32e000000f640000
0036686865610dad0c0b00000f9c00000024686d747860843c5c00000fc0
00002fe06c6f6361dc6bbd1400003fa000001e4e6d617870213625500000
5df0000000206e616d6519aa717b00005e1000000d3e707265706baf02fe
00006b5000002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
fb040600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d0000000100000005b8522e4b6b545f0f3cf500190800
00000000bbeb7ccc00000000cbdab383fbfafd8b09ec07b6000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000008ca040e0000000000000000000001cf000004a1
002300000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000044400610000
00000000000000000000000000000000000004ec00ac0000000000000000
0000000003e800ac00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000004fc00ac0000000000000000020400ac000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000035d00ac000000000000
000000000000000000000000000006d700ac052a00ac0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
042200ac0000000000000000045800ac00000000000000000000000003ad
0047000000000000000000000000000000000000000003e6000f00000000
0000000000000000052200aa000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000003f40010
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000003cb006d00000000
00000000000000000000000000000000046500a100000000000000000000
0000038000a1000000000000000000000000000000000000000000000000
000000000000000000000000035000a10482006c00000000000000000000
000000000000047800a1000000000000000001ec00a10000000000000000
000000000000000000000000000000000000000001ec0011000000000000
00000000000000000000000000000000000002e000a10000000000000000
000000000000000000000000060600a1049100a100000000000000000000
0000000000000000000004aa006600000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000003c5
00a1000000000000000003ed00a1000000000000000000000000034f0049
00000000000000000000000000000000000000000359001c000000000000
000000000000048d009f0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000003d5005c0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0434006000000000000000000000000003fb005d00000000000000000000
000000000000000000000000000000000000000000000000000002710025
000000000000000004ab0025069b002508d50025043c0025000000000000
000000000000000000000000000000000000000000000000000000000000
067600250000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
043c00250000000000000000000000000676002504ed0025000000000000
00000728002503c400350000000000000000000000000000000004340060
0000000000000000000000000000000004340099000000000000000001d6
008500000000000000000000000000000000000000000000000000000000
0000000001d6009900000000000000000000000000000000000000000000
0000000000000000000001d6009900000000000000000000000000000000
000000000000000004340099000000000000000000000000000000000000
0000000000000438005a0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002ca00990000000000000000000000000321005100000000
0000000000000000000000000000000005ae005100000000000000000000
000002ae002100000000000000000000000004e600210475002100000000
000000000000000000000000000000000000000000000000000000000475
002105130021074b002106d9002100000000000000000000000000000000
0000000000000000000000000000000006d9002104340094000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002ac0044000000000000
000002e5004802b8004701c100240297002a02e9006c0163006100000000
00000000015e006c0000000002e6006c02e60045000000000000000001f6
006c0230004201e3002302e9006c00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001d6000001ce000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000029b010a000000000000
000000000000000000000000000000000000026000ed0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000494005f02cb002300000000
000000000455002203d700510436007e00000000000000000436005c040e
0048040e00ae0000000000000000040e0020040e0065040e006b00000000
00000000040e005204430067028d0019000000000000000003ac00260368
006103b7006e000000000000000003bc0052039f0050039f008d00000000
00000000039f003a039f0067039f00610000000000000000039f00500494
005f02cb002300000000000000000428002203d700510436007e00000000
000000000436005c040e0048040e00ae0000000000000000040e0030040e
0065040e006b0000000000000000040e00520321004801f8002300000000
0000000002db002502a6004502df005b000000000000000002df00440000
0000000000000000000000000000000000000321004801f8002300000000
0000000002db002502a6004502df005b000000000000000002df00440000
000000000000000000000000000000000000029d003801f5003100000000
00000000024a001402460032025100300000000000000000024d0023029d
003801f500310000000000000000024a0014024600320251003000000000
00000000024d002300000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000002f5001c000000000306005a034b
008e02a8008e0000000000000000035b008e01a6008e0000000000000000
025b008e046d008e0375008d0000000002d8008e00000000029b00570280
004602570004031400570000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002f5001c000000000000000000000000034b008e
02a8008e0000000000000000035b008e01a6008e0000000000000000025b
008e046d008e0375008d00000000000000000000000002d8008e029b0057
025700040314005700000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00a100a100a100a1012f012f012f012f012f012f012f012f012f012f012f
012f012f012f01ac01ac01ac01ac01ac01ac021902190219021902950295
029502950295029502950295029502950295029502950295029502950335
033503350380038003800380038003800380038003800380038003800380
0380038003ce03ce03ce03ce03ce03ce047b051605160516051605160516
051605160516051605160516051605160516051605160516058f058f058f
063a063a063a063a070c070c070c070c070c070c077307730773077307fe
07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe
07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe0864086408640864
086408640864086408640864086408640864086408ca08ca08ca08ca08ca
08ca090c090c090c090c0965096509650965096509650965096509650965
09b20a290a290a290a290a290a870a870a870ab30ab30ab30ab30ab30ab3
0ab30ab30abe0abe0abe0abe0abe0abe0abe0af30af30af30af30af30af3
0b690bd50bd50bd50bd50bd50bd50c230c230c230c230c230c230c230c23
0c230c230c230c230c7a0c7a0c7a0cf40cf40cf40cf40d7a0d7a0d7a0d7a
0d7a0d7a0dbb0dbb0dbb0dbb0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b
0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b
0e0b0e0b0e0b0eba0eba0eba0eba0eba0eba0eba0eba0eba0eba0eba0eba
0eba0eba0eba0eba0eba0eba0eba0eba0eba0eba0eba0eba0f510f510f51
0f510ff20ff20ff20ff20ff20ff20ff20ff20ff20ff2107510751075111d
11da12dd1370137013701370137013701370137013701370144914491449
14491449144914491449144914491449144914491449144914d114d114d1
14d1159c164a164a164a1741182e182e182e182e182e18be18be18be18be
18be19421942194219bb19bb19bb19bb19bb19bb19bb19bb19bb19e719e7
19e719e719e719e719e719e719e71a2a1a2a1a2a1a2a1a2a1a2a1a2a1abb
1abb1abb1abb1abb1abb1abb1b491b491b491b491b491b491b491b491b49
1b491b491b491b491b491b491bc21bc21bc21bc21c881c881c881c881c88
1c881d871d871d871d871e031e031e031e031eb01ebc1ebc1ebc1ebc1ebc
1ebc1ebc1ebc1ebc1f321fe420d920e520e520e520e520e520e520e520e5
20e521a42234223422342234223422342234223422342234223422342234
223422342234223422342234223422342234223422342234223422342234
2234223422aa22aa22aa2310237423d5249824f525392539253925652565
25bb260426042604265726cf272927822782278227822782278227822782
278227822782278227822782278227822782278227822782278227822782
278227822782278227822782278227822782278227822782278227822782
278227822782278227822782278227822782278227822782278227822782
27822782278227822782278227822782278227a627ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca27ca
27ca27ca280f280f280f280f280f280f280f285d285d285d285d285d285d
285d285d285d285d285d285d285d285d285d285d285d285d285d285d285d
285d285d285d285d285d285d285d285d285d285d285d285d285d285d285d
285d285d285d285d285d285d285d285d285d285d285d285d285d285d285d
285d285d285d285d285d285d285d285d285d285d285d285d285d285d285d
285d285d285d285d28a328a328a328a328a328a328a328a328a328a328a3
28a328a328a328a328a328a328a328a328a328a328a328a328a328a328a3
28a328a328a328a328a328a328a328a328a328f129342934293429962a09
2a852a852a852afb2b492ba52ba52ba52c072c7e2d2c2d2c2d2c2da92df7
2e3a2e3a2e3a2e9f2f182f932f932f93300f305c30b530b530b531183192
320932093209327d32cd330f330f330f337433ef33f733f733f734643517
35ce35ce35ce3693374837503750375038093812381b381b381b3824382d
383638363836383f383f383f383f383f383f388a38cd38cd38cd392e399c
3a143a143a143a8c3a8c3a8c3a8c3a8c3a8c3ad73b193b193b193b7b3be8
3c5c3c5c3c5c3ccf3cd83ce13ce13ce13cea3cf33cfc3cfc3cfc3d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d053d053d053d053d053d053d053d053d053d053d053d053d053d05
3d053d0d3d0d3d703d783d803d803d803d883d903d903d903d983da03da8
3da83db03db03db83e373e3f3e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e473e473e473e473e473e473e473e47
3e473e473e473e473e473e473e473e933e933e933e933ed53f2e3f2e3f2e
3f903fbe3fbe3fbe3ff6406740d740d740d740d7412b41b141f442464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642464246424642464246424642464246
424642464246424642464246424642460000000100000f26009600050078
000300020010002f0065000011902410000200010000002d022200000003
00000000006400000000000300000001000e00640000000300000002000e
03040000000300000003002403120000000300000004000e006400000003
00000005001803360000000300000006000e006400000003000000070076
034e0000000300000008002a000e0000000300000009002003c400000003
0000000a02a00064000000030000000b005603e4000000030000000c002a
043a000000030000000d02980464000000030000000e006c06fc00010000
000000000032076800010000000000010007079a00010000000000020007
08ea0001000000000003001208f100010000000000040007079a00010000
00000005000c090300010000000000060007079a0001000000000007003b
090f00010000000000080015076f00010000000000090010094a00010000
0000000a0150079a000100000000000b002b095a000100000000000c0015
0985000100000000000d014c099a000100000000000e00360ae600030001
04090000006400000003000104090001000e00640003000104090002000e
03040003000104090003002403120003000104090004000e006400030001
04090005001803360003000104090006000e006400030001040900070076
034e0003000104090008002a000e0003000104090009002003c400030001
0409000a02a00064000300010409000b005603e4000300010409000c002a
043a000300010409000d02980464000300010409000e006c06fc00a90020
00320030003100320020004d006900630072006f0073006f006600740020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e00430061006c006900620072006900200069007300200061
0020006d006f006400650072006e002000730061006e0073002000730065
007200690066002000660061006d0069006c007900200077006900740068
00200073007500620074006c006500200072006f0075006e00640069006e
006700730020006f006e0020007300740065006d007300200061006e0064
00200063006f0072006e006500720073002e002000490074002000660065
0061007400750072006500730020007200650061006c0020006900740061
006c006900630073002c00200073006d0061006c006c0020006300610070
0073002c00200061006e00640020006d0075006c007400690070006c0065
0020006e0075006d006500720061006c00200073006500740073002e0020
004900740073002000700072006f0070006f007200740069006f006e0073
00200061006c006c006f00770020006800690067006800200069006d0070
00610063007400200069006e002000740069006700680074006c00790020
0073006500740020006c0069006e006500730020006f0066002000620069
006700200061006e006400200073006d0061006c006c0020007400650078
007400200061006c0069006b0065002e002000430061006c006900620072
0069002700730020006d0061006e00790020006300750072007600650073
00200061006e006400200074006800650020006e00650077002000720061
007300740065007200690073006500720020007400650061006d00200075
007000200069006e0020006200690067006700650072002000730069007a
0065007300200074006f002000720065007600650061006c002000610020
007700610072006d00200061006e006400200073006f0066007400200063
00680061007200610063007400650072002e0052006500670075006c0061
0072004d006900630072006f0073006f00660074003a002000430061006c
006900620072006900560065007200730069006f006e00200035002e0037
003200430061006c00690062007200690020006900730020006100200074
0072006100640065006d00610072006b0020006f00660020007400680065
0020004d006900630072006f0073006f00660074002000670072006f0075
00700020006f006600200063006f006d00700061006e006900650073002e
004c007500630028006100730029002000640065002000470072006f006f
00740068007400740070003a002f002f007700770077002e006d00690063
0072006f0073006f00660074002e0063006f006d002f007400790070006f
006700720061007000680079002f006300740066006f006e007400730068
007400740070003a002f002f0066006f006e007400660061006200720069
006b002e0063006f006d0059006f00750020006d00610079002000750073
00650020007400680069007300200066006f006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
0065002000450055004c004100200066006f007200200074006800650020
00700072006f006400750063007400200069006e00200077006800690063
00680020007400680069007300200066006f006e00740020006900730020
0069006e0063006c007500640065006400200074006f0020006400690073
0070006c0061007900200061006e00640020007000720069006e00740020
0063006f006e00740065006e0074002e00200059006f00750020006d0061
00790020006f006e006c0079002000280069002900200065006d00620065
00640020007400680069007300200066006f006e007400200069006e0020
0063006f006e00740065006e00740020006100730020007000650072006d
00690074007400650064002000620079002000740068006500200065006d
00620065006400640069006e006700200072006500730074007200690063
00740069006f006e007300200069006e0063006c00750064006500640020
0069006e0020007400680069007300200066006f006e0074003b00200061
006e006400200028006900690029002000740065006d0070006f00720061
00720069006c007900200064006f0077006e006c006f0061006400200074
00680069007300200066006f006e007400200074006f0020006100200070
00720069006e0074006500720020006f00720020006f0074006800650072
0020006f0075007400700075007400200064006500760069006300650020
0074006f002000680065006c00700020007000720069006e007400200063
006f006e00740065006e0074002e0068007400740070003a002f002f0077
00770077002e006d006900630072006f0073006f00660074002e0063006f
006d002f007400790070006f006700720061007000680079002f0066006f
006e00740073002f00640065006600610075006c0074002e006100730070
0078a92032303132204d6963726f736f667420436f72706f726174696f6e
2e20416c6c205269676874732052657365727665642e43616c6962726920
69732061206d6f6465726e2073616e732073657269662066616d696c7920
7769746820737562746c6520726f756e64696e6773206f6e207374656d73
20616e6420636f726e6572732e204974206665617475726573207265616c
206974616c6963732c20736d616c6c20636170732c20616e64206d756c74
69706c65206e756d6572616c20736574732e204974732070726f706f7274
696f6e7320616c6c6f77206869676820696d7061637420696e2074696768
746c7920736574206c696e6573206f662062696720616e6420736d616c6c
207465787420616c696b652e2043616c696272692773206d616e79206375
7276657320616e6420746865206e65772072617374657269736572207465
616d20757020696e206269676765722073697a657320746f207265766561
6c2061207761726d20616e6420736f6674206368617261637465722e5265
67756c61724d6963726f736f66743a2043616c6962726956657273696f6e
20352e373243616c6962726920697320612074726164656d61726b206f66
20746865204d6963726f736f66742067726f7570206f6620636f6d70616e
6965732e4c7563286173292064652047726f6f74687474703a2f2f777777
2e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374666f
6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f75206d61
7920757365207468697320666f6e74206173207065726d69747465642062
79207468652045554c4120666f72207468652070726f6475637420696e20
7768696368207468697320666f6e7420697320696e636c7564656420746f
20646973706c617920616e64207072696e7420636f6e74656e742e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e68747470
3a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f6772617068
792f666f6e74732f64656661756c742e61737078000000>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[16329 16309 1297 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 10854 1005 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>HJCBAA+Calibri AddT42Char 
3 11220 1008 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>HJCBAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>HJCBAA+Calibri AddT42Char 
HJCBAA+Calibri /CharStrings get begin
/one 1005 def
/four 1008 def
end
HJCBAA+Calibri /Encoding get
dup 49 /one put
dup 52 /four put
pop
end
%ADOEndSubsetFont
/VGUSFM+Calibri /HJCBAA+Calibri findfont ct_VMDictPut
/VGUSFM+Calibri*1 
[49{/.notdef}rp /one 2{/.notdef}rp /four 203{/.notdef}rp]
VGUSFM+Calibri nf
VGUSFM+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
111.62 200.353 mo
(14)
[-7.77606 0 ]ysh
%ADOBeginSubsetFont: HJCBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HJCBAA+Calibri gcheck setglobal} if
3 6452 970 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>HJCBAA+Calibri AddT42Char 
3 11976 1010 <ffff006bffed03bd0520020603ca0000>HJCBAA+Calibri AddT42Char 
HJCBAA+Calibri /CharStrings get begin
/six 1010 def
end
HJCBAA+Calibri /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFM+Calibri*1 
[49{/.notdef}rp /one 2{/.notdef}rp /four /.notdef /six 201{/.notdef}rp]
VGUSFM+Calibri nf
VGUSFM+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
205.06 171.153 mo
(16)
[-7.77606 0 ]ysh
%ADOBeginSubsetFont: HJCBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HJCBAA+Calibri gcheck setglobal} if
3 11614 1009 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>HJCBAA+Calibri AddT42Char 
HJCBAA+Calibri /CharStrings get begin
/five 1009 def
end
HJCBAA+Calibri /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFM+Calibri*1 
[49{/.notdef}rp /one 2{/.notdef}rp /four /five /six 201{/.notdef}rp]
VGUSFM+Calibri nf
VGUSFM+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
298.49 331.733 mo
(5)sh
%ADOBeginSubsetFont: HJCBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HJCBAA+Calibri gcheck setglobal} if
3 10496 1004 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>HJCBAA+Calibri AddT42Char 
HJCBAA+Calibri /CharStrings get begin
/zero 1004 def
end
HJCBAA+Calibri /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFM+Calibri*1 
[48{/.notdef}rp /zero /one 2{/.notdef}rp /four /five /six 201{/.notdef}rp]
VGUSFM+Calibri nf
VGUSFM+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
391.92 404.743 mo
(0)sh
%ADOBeginSubsetFont: HJCBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HJCBAA+Calibri gcheck setglobal} if
3 11992 1013 <00020052ffed03a605210030004200bd4013292e012a0501290401290301
2a2601260a0144b8ffc040200f024d60440131080d014d31100c0d014c1d
7a3101393149316931032b310131b8022c4009000e0e200070000200b8ff
e0b30f024d00b8ffe0b40f014d003bb8fff8b30d014d3bb8fff040120c0d
014c753b01363b463b663b03243b013bb8022b400e2f25012540f2202007
36f42a5318b80108b10756003fed3fed12392fed012f5de15d5d5d2b2bc4
2b2b5d392f10e15d5d5d322b2b31305d2b005d5d015d5d5d5d01140e0423
222e0435343e0233321e0233323e0237060623222e0235343e0233321e04
07342e0223220e0215141e0233323603a61430517ba9702b51412c140903
060b080b283d5233618b582c023594606c935927326aa472517d5c402711
af2242603f415c3b1c19385a424b8c02ba54ac9f8b683b0b1012121f1a16
1a0e050f120f4b7ea65c1f303b668c53569b7646294d6d8aa14680af6c30
2f4f64353b6244252d00>HJCBAA+Calibri AddT42Char 
HJCBAA+Calibri /CharStrings get begin
/nine 1013 def
end
HJCBAA+Calibri /Encoding get
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFM+Calibri*1 
[48{/.notdef}rp /zero /one 2{/.notdef}rp /four /five /six 2{/.notdef}rp 
/nine 198{/.notdef}rp]
VGUSFM+Calibri nf
VGUSFM+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
485.35 127.353 mo
(19)
[-7.77603 0 ]ysh
VGUSFM+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
135.79 244.153 mo
(11)
[-7.77603 0 ]ysh
VGUSFM+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
229.22 404.743 mo
(0)sh
VGUSFM+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
322.68 317.143 mo
(6)sh
VGUSFM+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
416.11 404.743 mo
(0)sh
VGUSFM+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
509.54 331.733 mo
(5)sh
%ADOBeginSubsetFont: HJCBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HJCBAA+Calibri gcheck setglobal} if
2 322 4 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>HJCBAA+Calibri AddT42Char 
2 606 18 <00010061fff0040c051e00390062b31c003b2bb8ffe8b310014d2bb8fff0
b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b014d2bbe
0233000e0018012f00210026012cb2135304bb012a00350030012eb10956
003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c4313025140e0623222e02
35343e0233321e0615140e0223222e0223220e0215141e0233323e023332
1e02040c02050814405f7b497ecb8f4d5396d17f386a5a461b0805030408
0b080e324f714f568d64373563905b4d7351340f070a0603b71018120e14
29271b54a4f19da1fcaf5c15202a1b0e131a12141c1309272f274586c17c
7bbd7f41262f2606111e>HJCBAA+Calibri AddT42Char 
2 1074 28 <000100ac0000037c050e002c0076b11a27b8ffe8b310014d27b8fff0b30f
014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d27b80211
400909132013200009001ab80108400d802601c02601d0260126260619b8
010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f2f123939
2f2f10e12b2b2b2b2b32313025140e0223212226351134363321321e0215
140e0223211121321e0215140e0223211121321e02037c040a0d08fd9317
2929170266080d080505080d08fe0601b2080d090404090d08fe4e020108
0d0a0447121b12081f270482271f08121b14121b1108fe6a09101c13121a
1007fe3108111b00>HJCBAA+Calibri AddT42Char 
2 2846 90 <000200acfffa040b050e003600440091401e102e1137080b014d37100f01
4d37100c0d014c371810014d37180b014d37b80233b7294010014d293f11
b8fff0b310014d11b8fff0b30f014d11b8fff0b30d014d11b8fff6b30c01
4d11b8ffe8b30b014d11b80211b21c2e10b80108b67040014040173db801
0bb5215117550555003f3f3fed12392f5ded39012fe12b2b2b2b2b32d42b
e12b2b2b2b2b123939313025140e0223222e0227032e03232311140e0223
222e023511343633213216171e0315140e02071e03171316160134262726
2623231133323e02040b0614241e1a21140b0477152d3e543b7309132119
192114082917011331411a4b734e2723425c3920342d2814740e08fefd44
50193f3391a84463421f1a080c08040409100c013134573f23fdd9080c07
0505070c0804ae271f05030d38566f4341674f3a140e2b3c4e31fee3241d
03854c69170706fe4c213b50>HJCBAA+Calibri AddT42Char 
2 3608 100 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>HJCBAA+Calibri AddT42Char 
2 3814 104 <000100aaffed04790514002b0099401d602d01201810014d20100f014d20
100d014d200a0c014d20180b014d20b802104011004015014d004013014d
004011014d0016b8ffe8b310014d16b8fff0b30f014d16b8fff0b30d014d
16b8fff6b30c014d16b8ffe8b30b014d16ba0210000affc0b315014d0ab8
ffc0400913014d0a265210521bb80129b10556003fed3f3f012f2b2be12b
2b2b2b2bd42b2b2be12b2b2b2b2b31305d01140e0223222e023511343e02
33321e021511141e0233323e023511343e0233321e021504794580b8756b
b07e440814201a182213082c5375494b75512b081421191821130901de76
b980423e79b6770323080c070505070c08fcf25a86592d2c588257031708
0c070505070c0800>HJCBAA+Calibri AddT42Char 
HJCBAA+Calibri /CharStrings get begin
/A 4 def
/C 18 def
/E 28 def
/R 90 def
/T 100 def
/U 104 def
end
HJCBAA+Calibri /Encoding get
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 82 /R put
dup 84 /T put
dup 85 /U put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFM+Calibri*1 
[48{/.notdef}rp /zero /one 2{/.notdef}rp /four /five /six 2{/.notdef}rp 
/nine 7{/.notdef}rp /A /.notdef /C /.notdef /E 12{/.notdef}rp 
/R /.notdef /T /U 170{/.notdef}rp]
VGUSFM+Calibri nf
VGUSFM+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
75.648 440.193 mo
(ACCURATE)
[11.1624 10.5041 10.5041 12.0811 10.504 11.1624 9.79968 0 ]xsh
%ADOBeginSubsetFont: HJCBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HJCBAA+Calibri gcheck setglobal} if
2 2294 69 <000100acfffa047e0511003d0085b3270f0f14b8ffe8b310014d14b8ffe8
b30f014d14b8ffe8b30d014d14b8fff0b30c014d14b8ffe8b30b014d14b8
0211401e1e0a2e2e321810014d32180f014d32180d014d32100c014d3218
0b014d32b802114010001e38520a2e0f270419225119550654003f3f3f12
17393f012fd4e12b2b2b2b2b32113310e12b2b2b2b2b322f33313025140e
022323222e0227012626272316161511140e0223222e0235113436333332
1e0217011e03173326263511343e0233321e0215047e0d151a0d371a2723
2315fe6820411c02020208131f18181f12082c1a521d271f1d11013a1d36
32311801020108131f191620120847141c12080b1d322702e0397d3b4896
4afcf3070d070505070d0704aa28220a17291ffdc83463605d2f4fab4f02
be070c090404090c0700>HJCBAA+Calibri AddT42Char 
2 2604 87 <000200acfffa03c7050e001c00290078b12406b8ffe8b310014d06b8fff0
b30f014d06b8fff0b30d014d06b8fff6b30c014d06b8ffe8b30b014d06b8
02114017111d1810014d1d100f014d1d100c0d014c1d200b014d1db80232
b2001125b8010ab306060c23b8010bb315510c55003f3fed12392fed012f
d4e12b2b2b2b10e12b2b2b2b2b32313001140e02232311140e0223222e02
351134363321321e0407342e0223231133323e0203c74077ad7893091321
19192114082a1a01152a4d696d4c29b53b575d2c9f9b4e6746240393619c
6e3cfe2e080c070505070c0804aa282207173f5c79574f6a340efdf92847
6300>HJCBAA+Calibri AddT42Char 
HJCBAA+Calibri /CharStrings get begin
/N 69 def
/P 87 def
end
HJCBAA+Calibri /Encoding get
dup 78 /N put
dup 80 /P put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFM+Calibri*1 
[48{/.notdef}rp /zero /one 2{/.notdef}rp /four /five /six 2{/.notdef}rp 
/nine 7{/.notdef}rp /A /.notdef /C /.notdef /E 8{/.notdef}rp 
/N /.notdef /P /.notdef /R /.notdef /T /U 
170{/.notdef}rp]
VGUSFM+Calibri nf
VGUSFM+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
180.05 440.193 mo
(PARENT)
[10.259 11.1624 10.504 9.79979 12.0811 0 ]xsh
%ADOBeginSubsetFont: HJCBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HJCBAA+Calibri gcheck setglobal} if
2 856 24 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>HJCBAA+Calibri AddT42Char 
2 1322 44 <000100acfffa04500514002f00b8b43f3101230cb8ffe8b310014d0cb8ff
f0b30f014d0cb8fff0b30d014d0cb8fff6b30c014d0cb8ffe8b30b014d0c
b80211401c17240b1810014d0b100f014d0b100d014d0b0a0c014d0b180b
014d0bb802104017004015014d004013014d00401011014c00400c014d00
17b8ffc0b315014d17b8ffc0b613014d172a5224b8012c400fc00c01d00c
010c0c121d5212550555003f3f3f12392f5d71ed3f012f2b2bd42b2b2b2b
e12b2b2b2b2b3210e12b2b2b2b2b3231305d25140e0223222e0235112111
140e0223222e023511343e0233321e0215112111343e0233321e02150450
081421181a201408fdb308142119182214080814221819211408024d0814
201a182114081a080c070505070c08023efdc2080c070505070c0804da08
0c070505070c08fdfa0206080c070505070c0800>HJCBAA+Calibri AddT42Char 
2 1642 47 <000100acfffa0158051400150050b73f174f17af170300b8ffe8b310014d
00b8fff0b30f014d00b8fff0b30d014d00b8fff6b30c014d00b8ffe8b30b
014d00ba0211000affc0b715014d0a10520555003f3f012f2be12b2b2b2b
2b31305d25140e0223222e023511343e0233321e02150158081421191822
140809152117192114081a080c070505070c0804da080c070505070c0800
>HJCBAA+Calibri AddT42Char 
2 1792 62 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>HJCBAA+Calibri AddT42Char 
HJCBAA+Calibri /CharStrings get begin
/D 24 def
/H 44 def
/I 47 def
/L 62 def
end
HJCBAA+Calibri /Encoding get
dup 68 /D put
dup 72 /H put
dup 73 /I put
dup 76 /L put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFM+Calibri*1 
[48{/.notdef}rp /zero /one 2{/.notdef}rp /four /five /six 2{/.notdef}rp 
/nine 7{/.notdef}rp /A /.notdef /C /D /E 2{/.notdef}rp 
/H /I 2{/.notdef}rp /L /.notdef /N /.notdef /P 
/.notdef /R /.notdef /T /U 170{/.notdef}rp]
VGUSFM+Calibri nf
VGUSFM+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
264.79 440.193 mo
(CHILDREN)
[10.5041 11.8668 6.15543 8.66656 11.6525 10.504 9.83041 0 ]xsh
%ADOBeginSubsetFont: HJCBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HJCBAA+Calibri gcheck setglobal} if
2 1948 68 <000100acfffa062b050e003c00ac4010603e703e020d3030172f2f0a2e18
181ab8ffe8b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b3
0c014d1ab8ffe8b30b014d1ab80211401e24310c0c0a1810014d0a100f01
4d0a100d014d0a0a0c014d0a180b014d0aba02110000ffc040190b014d00
2436510b18170d2f18312e061f28511f5512550555003f3f3f3f12173911
333f012fd42be12b2b2b2b2b32113310e12b2b2b2b2b32113311393d2f33
33113331305d25140e0223222e02351123010e0323222e0227012311140e
0223222e02351134363333321e02170133013e033333321e0215062b0814
1f191721130802fe33030b151d14151e140b02fe47010814201918201307
2c1b68203024180901770501860b1a1f26196d0f1b130c1a080c07050507
0c080467fb94070a070304070a06046cfb99080c070505070c0804a62a24
0c1a281bfc5703a61e2a190b09131d15>HJCBAA+Calibri AddT42Char 
2 3188 94 <00010047ffed03630521004900e7b90041ffe8b40f10014c41b8fff0b30d
014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d41b8022c
402b32401314014c324011014d243224320c1b180f10014c1b100d014d1b
1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d00b8ffc0
b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb0127003700
0a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c3711371116
3cb8010cb5411b05295316b80129b10556003fed3f123939ed1139392f2f
2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b2be12b2b
2b2b2b313001140e0223222e0435343e0233321e0233323e0235342e0635
343e0233321e0615140e0223222e0223220e0215141e0603634377a15d41
6f573b170b04080c080e3350714a385d43243252696e6852333b6991542b
574d3c1306040203060b070b2f445d3a3650341a32536a6e6a5333016b5b
8e633216202218251f161d12072228231e375033374e3b31333e54714f51
7f562d0f191f130b111813121c13091c231d1d304225364e3c32333d5371
>HJCBAA+Calibri AddT42Char 
HJCBAA+Calibri /CharStrings get begin
/M 68 def
/S 94 def
end
HJCBAA+Calibri /Encoding get
dup 77 /M put
dup 83 /S put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFM+Calibri*1 
[48{/.notdef}rp /zero /one 2{/.notdef}rp /four /five /six 2{/.notdef}rp 
/nine 7{/.notdef}rp /A /.notdef /C /D /E 2{/.notdef}rp 
/H /I 2{/.notdef}rp /L /M /N /.notdef /P 
/.notdef /R /S /T /U 170{/.notdef}rp]
VGUSFM+Calibri nf
VGUSFM+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
378.79 440.193 mo
(MISS)
[15.2966 6.1554 9.34033 0 ]xsh
VGUSFM+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
441.84 440.193 mo
(REDUNDANT)
[10.504 9.79977 11.6525 12.1118 12.1117 11.6525 11.193 12.1118 0 ]xsh
%ADOBeginSubsetFont: UGXAAA+Calibri,Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /UGXAAA+Calibri,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc0ad754000000cc000000606376
74202f4935490000012c000006086670676da1ea42ac0000073400000913
676c7966af6c6cbf000081ec0000130c68656164ecbf33e5000010480000
0036686865610d8d0bf00000108000000024686d74785f10084b000010a4
00002fde6c6f63619edf9b1e0000408400001e4e6d6178701c0216490000
5ed4000000206e616d65de46508300005ef400000d5c70726570c7f0742e
00006c500000159c676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e00002ff4000acff00000001000000004d53202000200000
1d400600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b140465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
00000005b852037921f85f0f3cf50019080000000000bbeb7ccc00000000
cbdab477fbdafd8d09ec07c5000100090002000000000000000100000600
fe0001c40aa0fbdafa8609ec0001000000000000000000000000000008c9
040e000000000000000000000000000004d9001700000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000043c004f0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000006fe008d000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003f6000c00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000447000a000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003cb005a00000000000000000000000000000000
000000000491008600000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
064800860000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000425
008600000000000000000000000000000000000000000000000000000000
0000000000000000037b001b000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000044b004b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000002d8007e0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002f5003a000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000200005a00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000029b00e6000000000000000000000000000000000000
000000000000026900cf0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000382007900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000313001800000000031600540000000000000000000000000000
00000000000000000000000000000000000000000000049a007800000000
000000000000000000000000000000000000000002b0001e000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000313
001800000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000049a0078000000000000
00000000000000000000000000000000000002b0001e0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000009e009e009e009e014d014d
014d014d014d014d014d014d014d014d014d014d014d014d01e001e001e0
01e001e001e001e001e001e001e001e001e001e001e001e001e001e001e0
01e001e001e001e001e001e001e001e001e001e001e001e001e001e001e0
01e001e001e001e001e001e001e001e001e001e001e001e001e001e001e0
01e001e002a402a402a402a402a402a402a402a402a402a402a402a402a4
02a402a402a402a402a402a402a402a402a402a402a402a402a402a402a4
02a402a402a402a403030303030303030303030303030303030303030303
030303030303030303030303030303030303030303030303030303030303
03030303030303030303036b036b036b036b036b036b036b036b036b036b
036b036b036b036b03d203d203d203d203d203d204170417041704170417
041704170417041704170417041704170417041704170417041704170417
041704170417041704170417041704170417041704170417041704170417
041704170417041704170417041704170417048d048d048d048d048d048d
048d048d048d048d048d048d048d048d048d048d048d048d048d048d048d
048d050a050a050a050a050a050a050a050a050a050a054a054a054a054a
054a054a054a054a054a054a054a054a054a054a054a054a054a054a054a
054a054a054a054a054a054a054a054a054a054a054a054a054a054a054a
054a054a054a054a054a054a054a054a054a054a054a054a054a054a054a
054a054a054a054a054a054a05e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
066506650665066506650665066506650665066506650665066506650665
066506650665066506650665066506650665066506650665066506650665
066506650665066506650665066506650665066506650665066506650665
066506650665066506650665066506650665066506650665066506650665
0665066506650665066506650665066506650665066506650665066506cb
06cb06cb06cb06cb06cb06cb06cb06cb06cb06cb06cb06cb06cb071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e076c076c076c076c
076c076c076c07b907b907b907b907b907b907b907b907b907b907b907b9
07b907b907b907b907b907b907b907b907b907b907b907b907b907b907b9
07b907b907b907b907b907b907b907b907b907b907b907b907b907b907b9
07b907b907b907b907b907b907b907b907b907b907b907b907b907b907b9
07b907b907b907b907b907b907b907b907b907b907b907b907b908080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808100810087c087c087c
087c087c087c087c087c087c087c0884088408840884088408840884088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c08f008f008f008f008f008f008f008f008f008f008f008f008f00952
095209520952095209520952098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860000000100000f26004f0005002c000200020010002f00600000
0c63159c000100010000002d022200000003000000000064000000000003
00000001000e006400000003000000020008032a0000000300000003002e
030400000003000000040018031a00000003000000050018033200000003
000000060018034a0000000300000007007603620000000300000008002a
000e0000000300000009002003d8000000030000000a02a0006400000003
0000000b005603f8000000030000000c002a044e000000030000000d0298
0478000000030000000e006c071000010000000000000032077c00010000
00000001000707ae00010000000000020004091100010000000000030017
08fe0001000000000004000c09090001000000000005000c091500010000
00000006000c09210001000000000007003b092d00010000000000080015
0783000100000000000900100968000100000000000a015007ae00010000
0000000b002b0978000100000000000c001509a3000100000000000d014c
09b8000100000000000e00360b0400030001040900000064000000030001
04090001000e006400030001040900020008032a0003000104090003002e
030400030001040900040018031a00030001040900050018033200030001
040900060018034a0003000104090007007603620003000104090008002a
000e0003000104090009002003d8000300010409000a02a0006400030001
0409000b005603f8000300010409000c002a044e000300010409000d0298
0478000300010409000e006c071000a9002000320030003100320020004d
006900630072006f0073006f0066007400200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e00430061006c
0069006200720069002000690073002000610020006d006f006400650072
006e002000730061006e0073002000730065007200690066002000660061
006d0069006c00790020007700690074006800200073007500620074006c
006500200072006f0075006e00640069006e006700730020006f006e0020
007300740065006d007300200061006e006400200063006f0072006e0065
00720073002e002000490074002000660065006100740075007200650073
0020007200650061006c0020006900740061006c006900630073002c0020
0073006d0061006c006c00200063006100700073002c00200061006e0064
0020006d0075006c007400690070006c00650020006e0075006d00650072
0061006c00200073006500740073002e0020004900740073002000700072
006f0070006f007200740069006f006e007300200061006c006c006f0077
0020006800690067006800200069006d007000610063007400200069006e
002000740069006700680074006c007900200073006500740020006c0069
006e006500730020006f0066002000620069006700200061006e00640020
0073006d0061006c006c0020007400650078007400200061006c0069006b
0065002e002000430061006c0069006200720069002700730020006d0061
006e0079002000630075007200760065007300200061006e006400200074
006800650020006e00650077002000720061007300740065007200690073
006500720020007400650061006d00200075007000200069006e00200062
00690067006700650072002000730069007a0065007300200074006f0020
00720065007600650061006c002000610020007700610072006d00200061
006e006400200073006f0066007400200063006800610072006100630074
00650072002e004d006900630072006f0073006f00660074003a00200043
0061006c006900620072006900200042006f006c00640056006500720073
0069006f006e00200035002e0037003200430061006c0069006200720069
002d0042006f006c006400430061006c0069006200720069002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00670072006f007500700020006f006600200063006f006d00700061006e
006900650073002e004c0075006300280061007300290020006400650020
00470072006f006f00740068007400740070003a002f002f007700770077
002e006d006900630072006f0073006f00660074002e0063006f006d002f
007400790070006f006700720061007000680079002f006300740066006f
006e007400730068007400740070003a002f002f0066006f006e00740066
0061006200720069006b002e0063006f006d0059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
0020006100730020007000650072006d0069007400740065006400200062
00790020007400680065002000450055004c004100200066006f00720020
007400680065002000700072006f006400750063007400200069006e0020
007700680069006300680020007400680069007300200066006f006e0074
00200069007300200069006e0063006c007500640065006400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e0074002e00200059006f
00750020006d006100790020006f006e006c007900200028006900290020
0065006d0062006500640020007400680069007300200066006f006e0074
00200069006e00200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
006500200065006d00620065006400640069006e00670020007200650073
007400720069006300740069006f006e007300200069006e0063006c0075
00640065006400200069006e0020007400680069007300200066006f006e
0074003b00200061006e006400200028006900690029002000740065006d
0070006f0072006100720069006c007900200064006f0077006e006c006f
006100640020007400680069007300200066006f006e007400200074006f
002000610020007000720069006e0074006500720020006f00720020006f
00740068006500720020006f007500740070007500740020006400650076
00690063006500200074006f002000680065006c00700020007000720069
006e007400200063006f006e00740065006e0074002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f0066006f006e00740073002f00640065006600610075006c0074
002e0061007300700078a92032303132204d6963726f736f667420436f72
706f726174696f6e2e20416c6c205269676874732052657365727665642e
43616c696272692069732061206d6f6465726e2073616e73207365726966
2066616d696c79207769746820737562746c6520726f756e64696e677320
6f6e207374656d7320616e6420636f726e6572732e204974206665617475
726573207265616c206974616c6963732c20736d616c6c20636170732c20
616e64206d756c7469706c65206e756d6572616c20736574732e20497473
2070726f706f7274696f6e7320616c6c6f77206869676820696d70616374
20696e2074696768746c7920736574206c696e6573206f66206269672061
6e6420736d616c6c207465787420616c696b652e2043616c696272692773
206d616e792063757276657320616e6420746865206e6577207261737465
7269736572207465616d20757020696e206269676765722073697a657320
746f2072657665616c2061207761726d20616e6420736f66742063686172
61637465722e4d6963726f736f66743a2043616c6962726920426f6c6456
657273696f6e20352e373243616c696272692d426f6c6443616c69627269
20697320612074726164656d61726b206f6620746865204d6963726f736f
66742067726f7570206f6620636f6d70616e6965732e4c75632861732920
64652047726f6f74687474703a2f2f7777772e6d6963726f736f66742e63
6f6d2f7479706f6772617068792f6374666f6e7473687474703a2f2f666f
6e7466616272696b2e636f6d596f75206d61792075736520746869732066
6f6e74206173207065726d6974746564206279207468652045554c412066
6f72207468652070726f6475637420696e20776869636820746869732066
6f6e7420697320696e636c7564656420746f20646973706c617920616e64
207072696e7420636f6e74656e742e20596f75206d6179206f6e6c792028
692920656d626564207468697320666f6e7420696e20636f6e74656e7420
6173207065726d69747465642062792074686520656d62656464696e6720
7265737472696374696f6e7320696e636c7564656420696e207468697320
666f6e743b20616e6420286969292074656d706f726172696c7920646f77
6e6c6f6164207468697320666f6e7420746f2061207072696e746572206f
72206f74686572206f75747075742064657669636520746f2068656c7020
7072696e7420636f6e74656e742e687474703a2f2f7777772e6d6963726f
736f66742e636f6d2f7479706f6772617068792f666f6e74732f64656661
756c742e6173707800>
<b10903b802f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c
1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb8
02f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802ed
b21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e
2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1f
b802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802
e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb2
1d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f
1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb8
02d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cf
b21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d121fb802cbb21d
121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1f
b802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802
c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb2
1d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f
1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb8
02b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1
b21c321fb802b0b21c321fb802afb21c331fb802aeb21c331fb802adb21c
331fb802acb21c331fb802abb21c331fb802aab21c311fb802a9b21c311f
b802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5b21c321fb802
a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c331fb802a0b2
1c331fb8029fb21c331fb8029eb21c331fb8029db21c331fb8029cb21c31
1fb8029bb21c311fb8029ab21c321fb80299b21c321fb80298b21c321fb8
0297b21c321fb80296b21c321fb80295b21c331fb80294b21c331fb80293
b21c331fb80292b21c331fb80291b21c331fb80290b21c331fb8028fb21c
331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8028bb21c321f
b8028ab21c321fb80289b21c321fb80288b21c331fb80287b21c331fb802
86b21c331fb80285b21c331fb80284b21c331fb80283b21c331fb80282b2
1b341fb80281b21b341fb80280b21b341fb8027fb21b341fb8027eb21b34
1fb8027db21b341fb8027cb21b341fb8027bb21b341fb8027ab21b341fb8
0279b21b341fb80278b21b341fb80277b21b341fb80276b21b341fb80275
b21b341fb80274b21b341fb80273b21b341fb80272b21b341fb80271b21b
341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8026db21a351f
b8026cb21a351fb8026bb21a351fb8026ab21a351fb80269b21a351fb802
68b21a351fb80267b21a351fb80266b21a351fb80265b21a351fb80264b2
1a351fb80263b21a351fb80262b21a351fb80261b21a351fb80260b21a35
1fb8025fb21a351fb8025eb21a351fb8025db21a351fb8025cb21a351fb8
025bb21a351fb8025ab21a351fb80259b219371fb80258b219371fb80257
b219371fb80256b219371fb80255b219371fb80254b219371fb80253b219
371fb80252b219371fb80251b219371fb80250b219371fb8024fb219371f
b8024eb219371fb8024db219371fb8024cb219371fb8024bb219371fb802
4ab219371fb80249b219371fb80248b219371fb80247b219371fb80246b2
19371fb80245b219371fb80244b219371fb80243b219371fb80242b21937
1fb80241b219371fb80240b219371fb8023fb219371fb8023eb219371fb8
023db219371fb8023cb219371fb8023bb219371fb8023ab219371fb80239
b218391fb80238b218391fb80237b218391fb80236b218391fb80235b218
391fb80234b218391fb80233b218391fb80232b218391fb80231b218391f
b80230b218391fb80301b2182e1fb8022fb218391fb8022eb218391fb802
2db218391fb8022cb218391fb8022bb218391fb8022ab218391fb80229b2
18391fb80228b218391fb80227b218391fb80226b218391fb80225b2173b
1fb80224b2173b1fb80223b217321fb80222b2173a1fb80221b2173b1fb8
0220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2173b1fb8021c
b2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b1fb80218b217
3b1fb80217b2173b1fb80216b2173b1fb80215b217321fb80214b2173a1f
b80213b2173b1fb80212b2173b1fb80211b2173b1fb80210b2173b1fb802
0fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb2173b1fb8020bb2
173b1fb8020ab2173b1fb80209b217321fb80208b217321fb80207b2173b
1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb80203b2173b1fb8
0202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2173b1fb801fe
b2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b1fb801fab217
3b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb801f6b2173a1f
b801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2b2173b1fb801
f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb2173b1fb801edb2
173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1fb801e9b2173b
1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801e5b216231fb8
01e4b216371fb801e3b216371fb801e2b216381fb801e1b216381fb801e0
b216431fb801dfb216441fb801deb216441fb801ddb216441fb801dcb216
451fb801dbb216461fb801dab216461fb801d9b216461fb801d8b216231f
b801d7b216231fb801d6b216381fb801d5b216431fb801d4b216431fb801
d3b216431fb801d2b216441fb801d1b216461fb801d0b216461fb801cfb2
16461fb801ceb216461fb801cdb216461fb801ccb216461fb801cbb21643
1fb801cab216231fb801c9b216231fb801c8b216371fb801c7b216371fb8
01c6b216381fb801c5b216421fb801c4b216431fb801c3b216441fb801c2
b216451fb801c1b216461fb801c0b216461fb801bfb216461fb801beb216
461fb801bdb216461fb801bcb216461fb801bbb216461fb801bab216371f
b801b9b216381fb801b8b216421fb801b7b216431fb801b6b216431fb801
b5b216431fb801b4b216441fb801b3b216441fb801b2b216441fb801b1b2
16451fb801b0b216451fb801afb216451fb801aeb216461fb801adb21646
1fb801acb216461fb801abb216461fb801aab216461fb801a9b215341fb8
01a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2154e1fb801a4
b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d1fb801a0b215
4e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8019cb215401f
b8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198b2154f1fb801
97b2154f1fb80196b215501fb80195b215521fb80194b215521fb80193b2
15521fb80192b215411fb80191b2154f1fb80190b215501fb8018fb21550
1fb8018eb215511fb8018db215521fb8018cb215521fb8018bb215521fb8
018ab214581fb80189b214591fb80188b2145c1fb80187b2145d1fb80186
b2144a1fb80185b2145b1fb80184b2145c1fb80183b214591fb80182b214
5d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c4e1fc10c4e1f
c00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561fae0b561fad0b
561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b561fa60b561f
a50b561fa40b561fa30b561fa20b561fa10b561fa00b561f9f0b561f9e0a
681f9a0a681f990a681f980a681f970a681f960a681f950a681f940a681f
930a681f920a681f910a681f9009681f8f09681f8e09681f8d09681f8c09
681f410902fc02fa0056001f02fb02fa0068001f017fb213321fb8017eb2
12371fb80174b212371fb80173b211421fb80172b211421fb80171b21142
1fb80170b211421fb8016fb211421fb8016eb211421fb8016db211421fb8
016cb211421fb8016bb211421fb8016ab211421fb8013cb211421fb8013b
b210421fb8013ab210421fb80139b210421fb80138b210421fb80137b210
421fb80136b210421fb80135b210421fb80134b210421fb80133b210421f
b80132b20f451fb80131b20f451fb80130b20f451fb80112b20f451fb801
11b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451fb8010db2
0e481fb8010cb20e481fb8010bb20e481fb8010ab20e481fb80109b20e48
1fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a
1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc
0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe0b561fbd0b56
1fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180b213321fb801
7ab211401fb80179b211421fb80178b211421fb80177b211421fb80176b2
11421fb80175b211421fb80143b211421fb80142b210421fb80141b21042
1fb80140b210421fb8013fb210421fb8013eb210421fb8013db20f451fb8
0115b20f451fb80114b20f451fb80113b20f451fb903030302b2401fa4be
030200b4030200c4030200030300b213321fb8017bb213321fb80153b212
371fb80152b211401fb80151b211401fb80150b211401fb8014fb211401f
b8014eb211401fb8014db211401fb8014cb211401fb8014bb211401fb801
4ab211401fb80149b211401fb80148b211401fb80147b211401fb80146b2
11401fb80145b211401fb80144b211401fb80122b211401fb80121b21042
1fb80120b210421fb8011fb210421fb8011eb210421fb8011db210421fb8
011cb210421fb8011bb210421fb8011ab210421fb80119b210421fb80118
b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc0f451ffb0f45
1ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e481ff40e481ff3
0d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a
1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc8
0c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b56
1fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fdb212371fb801
7db212371fb8017cb212371fb80169b2112e1fb80168b2112e1fb80167b2
11401fb80166b211401fb80165b211401fb80164b211401fb80163b21140
1fb80162b211401fb80161b211401fb80160b211401fb8015fb211401fb8
015eb211401fb8015db211401fb8015cb211401fb8015bb211401fb8015a
b211401fb80159b211401fb80158b211401fb80157b211401fb80156b211
401fb80155b211401fb80154b211401fb8012fb211401fb8012eb210421f
b8012db210421fb8012cb210421fb8012bb210421fb8012ab210421fb801
29b210421fb80128b210421fb80127b210421fb80126b210421fb80125b2
0f451fb80124b20f451fb80123b20f451fb80105b20f451fb80104b20f45
1fb80103b20f451fb80102b20f451fb80101b20e481fb8010040a20e481f
ff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c
4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f
83012e1f8248805581ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b
7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a7948775578ab
77550b77010c764875555475e475f4750314755475647574759475d475e4
7507a475b475c47503b8ffc0401275383b46807590750214757475020075
010fb8ffc04021750b0e467448725573ab725504723472023bf47201e072
01023072015072607202b8ffc0b372242846b8ffc0403572161a46107230
7240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6f
bf6f02406f090d466e486d55df6d0100bc02ff001002ff00c002ffb2030a
6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e675568ab675566
2e645565ab6455632e6255612e60555f2e5d555eab5d555c2e5a555bab5a
55592e58555703251f562e545555ab5455532e515552ab51554f2e4e554e
03251f4d2e4b554cab4b554a2e485549ab4855504801472e46554503361f
001f01001e01001e701e801ef01e040b601d701d02701de01df01d03701c
f01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f191f198f199f
19af19050f198f199f19030c7012801202701180110230114011d011e011
040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0e
cf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f0d1f0d40472f
0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f0c4f0c5f0c03
9f0c01400c262946ef0aff0a02400a242746ef09ff0902ff090100030120
01010001100120010308b8ffc0b301151f46b80100b316010501b80190b1
54532b2b4bb807ff524bb008505bb00188b02553b00188b040515ab00688
b000555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d
00421d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db1
160042592b5e73757373742b732b73742b2b73745e732b5e737475737475
5e73747573015e7374737475757473745e737473002b2b732b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b
732b2b73755f75755e732b2b2b5e7373732b7374752b5e732b2b5e732b2b
73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b185f5e00>
[4877 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 316 4 <00020017fffa04c305140022002600e1b10102435558b90024ffe8b40b0f
014c23b8ffe8401e0b0f014c250c0d23180d0016010e16260b0a23220a00
2004230111232625b8012a401e400b000c0112030c0c271d2423231e0a0d
160023221807121d521255055500183f3f3f1217393811331112392f5f5e
5d331a4ded3201192f5e5d1a18cd32337d87c4c40118c45e5d32337d87c4
c43130002b2b1bb90024ffe8b40b0f014c23b8ffe8b50b0f014c2625b801
2a401e400b000c0112030c0c271d2423231e0a0d160023221807121d5212
55055500183f3f3f1217393811331112392f5f5e5d331a4ded3231302b2b
59251616060623222e02270321070e03232226263637013e0333321e0217
0723032104b10c0616383133391e0c0457fe1a52040d1d352b2e3414060c
018f0610233e333b46271106c201b7016f62242a15050309100d0104fd0e
130b0406172a23047c11150b03030b1613c6fdda>UGXAAA+Calibri,Bold AddT42Char 
2 666 18 <0001004fffeb040c05230039008bb10102435558b21c002bbe02c7000e00
18016100210026ffe8b40b0f014c26b80160b2135304b8015ab73530180b
0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed012fedd4c4
31301bbc0018016100210026ffe8b40b0f014c26b80160b2135304b8015a
b73530180b0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed
31305925140e0623222e02353412363633321e0615140e0223222e022322
0e0215141e0233323e0233321e02040c03060a163f5b754485d69650589e
dd85366455441b0a0603040a0e090f2e4965464d79552c2f577b4d466649
2f0d0a0c0804c4192319121724211652a3f4a2a50100ae5a121d261b121c
261c1e2a1a0c232b233f75a66872a76c3521282008182b00>UGXAAA+Calibri,Bold AddT42Char 
2 1352 100 <0001000cfffa03ea050e00220055b10102435558b10006b80294b3181106
12b8ffe8b40b0f014c12b8015bb4401d510c5500183f3f1a4ded2b32012f
c4fdcd31301bb10612b8ffe8b40b0f014c12b8015bb4401d510c5500183f
3f1a4ded2b3231305901140e02232111140e0223222e02351121222e0235
343e023321321e0203ea050a0f09febc0d1e332626331e0dfebc0a0e0a05
050a0e0a0390090f0a0504a21d29190cfbed0a100a06060a100a04130c19
291d1e2a190b0b192a00>UGXAAA+Calibri,Bold AddT42Char 
2 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>UGXAAA+Calibri,Bold AddT42Char 
UGXAAA+Calibri,Bold /CharStrings get begin
/A 4 def
/C 18 def
/T 100 def
end
UGXAAA+Calibri,Bold /Encoding get
dup 65 /A put
dup 67 /C put
dup 84 /T put
pop
end
%ADOEndSubsetFont
/VGUSFN+Calibri,Bold /UGXAAA+Calibri,Bold findfont ct_VMDictPut
/VGUSFN+Calibri,Bold*1 
[65{/.notdef}rp /A /.notdef /C 16{/.notdef}rp /T 171{/.notdef}rp]
VGUSFN+Calibri,Bold nf
VGUSFN+Calibri,Bold*1 [30.384 0 0 -30.384 0 0 ]msf
271.56 57.9629 mo
(CTA)
[18.4737 15.0399 0 ]xsh
159.49 91.7729 mo
168.9 91.7729 li
168.9 82.3634 li
159.49 82.3634 li
cp
.719692 .439979 .027985 3.0518e-5 cmyk
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HJCBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HJCBAA+Calibri gcheck setglobal} if

2 0 3 <> HJCBAA+Calibri AddT42Char 
2 7190 258 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>HJCBAA+Calibri AddT42Char 
2 7540 282 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>HJCBAA+Calibri AddT42Char 
2 7842 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>HJCBAA+Calibri AddT42Char 
2 8164 296 <00010025fffa02860578003c0064b2161000b8ffe0b40b014d001bb8fff0
b30d014d1bb8fff0b40f10014c1bb8fff6b30c014d1bb8ffe8b30b014d1b
b801f9b2302a25b8ffd040121011014c250aed36471a26ed3048204c1048
003f3f3fed323fed012f2bc433f12b2b2b2bc42b33c4313001140e022322
2e0223220e02151533321e02151406232311140e0223222e023511232226
35343e02333335343e0233321e0402860405080607151e291b2534200ec9
080b0905120fc908132018182013087f101004080c087f23486d4a234224
0c0803050f13170e05090b091833513a6207111a132420fceb080b080404
080b0803152024131a11075d5e8756290d0f0c131b00>HJCBAA+Calibri AddT42Char 
2 11906 336 <00030035fe93038903c8003e004e005f00d04015122d47100f014d47080c
014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d3fb8ffe0
b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707b8ffe0b3
10014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040340b014d
0058100f014d58201012014c582a25400b12014c250f300703384ada0c53
e81515603803e93c482a2042d9384a5bd9204f003fed3fed12393fed1112
392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b1112173910
cd2b10cd2b2b2b10cd2b2b2b10cd31300114062323161615140e02232226
27060615141617171e0315140e0223222e0235343e023726263534363726
2635343e023332161721321601342623220e0215141633323e0213342627
270e0315141633323e020389130f81231c325d804e37631b12174136eb43
70522e346ba6716d99622c10213120312f32251f24345c814c29471f0110
1111fefe655d30472f17655b31482f17535f51e92029180984764b653e1b
0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e70553125
405934213e383319194c2c3d6026255d424d7a542d090821fef15c672038
492859661f3748fd5e3a3f0208192d29281541431d303e00>HJCBAA+Calibri AddT42Char 
2 13262 367 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>HJCBAA+Calibri AddT42Char 
2 13396 374 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>HJCBAA+Calibri AddT42Char 
2 13686 381 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>HJCBAA+Calibri AddT42Char 
2 13970 396 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>HJCBAA+Calibri AddT42Char 
2 14212 400 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>HJCBAA+Calibri AddT42Char 
2 15118 410 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>HJCBAA+Calibri AddT42Char 
3 896 437 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>HJCBAA+Calibri AddT42Char 
HJCBAA+Calibri /CharStrings get begin
/space 3 def
/a 258 def
/d 282 def
/e 286 def
/f 296 def
/g 336 def
/l 367 def
/n 374 def
/o 381 def
/r 396 def
/s 400 def
/t 410 def
/u 437 def
end
HJCBAA+Calibri /Encoding get
dup 32 /space put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFM+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 2{/.notdef}rp /four /five 
/six 2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C /D 
/E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N 
/.notdef /P /.notdef /R /S /T /U 11{/.notdef}rp 
/a 2{/.notdef}rp /d /e /f /g 4{/.notdef}rp /l 
/.notdef /n /o 2{/.notdef}rp /r /s /t /u 
138{/.notdef}rp]
VGUSFM+Calibri nf
VGUSFM+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
172.92 91.9229 mo
(regard as one fault)
[5.92905 8.67082 7.98526 8.20821 5.98045 8.87634 3.8727 8.20822 6.88878 3.64993 9.13336 8.91061 
8.67084 3.87268 5.22635 8.25964 8.91058 3.88983 0 ]xsh
328.33 91.7729 mo
337.74 91.7729 li
337.74 82.3634 li
328.33 82.3634 li
cp
.18497 .816068 .688869 .0602731 cmyk
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HJCBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HJCBAA+Calibri gcheck setglobal} if
2 12668 346 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>HJCBAA+Calibri AddT42Char 
2 12932 349 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>HJCBAA+Calibri AddT42Char 
HJCBAA+Calibri /CharStrings get begin
/h 346 def
/i 349 def
end
HJCBAA+Calibri /Encoding get
dup 104 /h put
dup 105 /i put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFM+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 2{/.notdef}rp /four /five 
/six 2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C /D 
/E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N 
/.notdef /P /.notdef /R /S /T /U 11{/.notdef}rp 
/a 2{/.notdef}rp /d /e /f /g /h /i 
2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s 
/t /u 138{/.notdef}rp]
VGUSFM+Calibri nf
VGUSFM+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
341.81 91.9229 mo
(distinguish faults)
[8.91061 4.07831 6.63174 5.74066 3.83838 9.09912 7.98526 8.91061 4.07828 6.63174 8.91064 3.87268 
5.22635 8.20822 9.11624 3.85553 5.74069 0 ]xsh
.95174 lw
50.947 456.683 mo
561.117 456.683 li
561.117 5.2829 li
50.947 5.2829 li
cp
1 /0 /CSD get_res sepcs
.149 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/VGUSFM+Calibri*1 uf
/VGUSFM+Calibri uf
/HJCBAA+Calibri uf
/VGUSFN+Calibri,Bold*1 uf
/VGUSFN+Calibri,Bold uf
/UGXAAA+Calibri,Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 2909 1121 a(\(c\))g(Caption)h(of)h(sub\014gure)d(3)1024
1329 y Fo(Figure)k(2:)39 b(Caption)30 b(of)f(sub\014gures)h(\(a\),)f
(\(b\))i(and)e(\(c\))-152 1580 y Fq(Additionally)-6 b(,)36
b(the)e(exten)n(t)f(to)i(whic)n(h)f(the)g(impact)g(has)h(a\013ected)
-152 1667 y(v)l(ary)27 b(from)i(algorithms.)43 b(W)-6
b(e)27 b(can)h(\014nd)f(that)g(for)i(HSQLDB)e(with)-152
1755 y(v)n(ersion)g(3.14,)h(the)e(similarit)n(y)h(of)h(CT)-6
b(A)26 b(w)n(as)i(just)e(at)h(4)f(while)i(FIC)-152 1842
y(is)i(3.)47 b(W)-6 b(e)29 b(list)i(these)e(p)r(oin)n(ts)g(in)h
(\014gure)f(3.)47 b(F)-6 b(rom)29 b(this)h(\014gure,)g(w)n(e)-152
1929 y(can)c(learn)g(that.)-77 2016 y(So)32 b(the)f(answ)n(er)h(for)g
(Q2)g(is:)47 b(traditional)32 b(algorithm)h(do)e(su\013er)-152
2103 y(from)g(the)f(m)n(ultiple)g(faults)h(and)f(their)g(masking)h
(e\013ect)f(although)-152 2190 y(the)25 b(exten)n(t)g(v)l(ary)g(in)g
(di\013eren)n(t)g(algorithms.)-152 2360 y Fr(5.3)99 b(study)26
b(3:perf)n(ormance)g(of)f(our)g(appr)n(oach)-77 2468
y Fq(The)33 b(last)g(case)g(study)e(aims)i(to)g(observ)n(e)f(the)g(p)r
(erformance)h(of)-152 2555 y(our)24 b(approac)n(h)f(and)g(compare)h(it)
g(with)g(the)f(result)g(got)h(b)n(y)f(the)g(tra-)-152
2643 y(ditional)34 b(approac)n(hes.)59 b(Sp)r(eci\014cally)-6
b(,)35 b(w)n(e)f(augmen)n(ted)f(the)g(three)-152 2730
y(traditional)h(approac)n(hes)g(using)f(the)g(metho)r(d)g(describ)r(ed)
g(in)g(sec-)-152 2817 y(tion)k(5,)i(and)d(then)g(w)n(e)g(applied)h
(these)f(augmen)n(ted)g(approac)n(hes)-152 2904 y(on)26
b(iden)n(tifying)g(the)g(failure-inducing)g(com)n(binations)h(in)f(the)
g(pre-)-152 2991 y(pared)g(sub)t(jects.)-129 3161 y Fb(5.3.1)90
b(study)22 b(setup)-77 3269 y Fq(The)34 b(setup)g(of)h(this)f(case)h
(study)e(is)i(almost)g(the)f(same)h(as)f(the)-152 3356
y(second)26 b(case)h(study)-6 b(.)34 b(The)26 b(di\013erence)g(is)g
(that)g(the)f(algorithms)i(w)n(e)-152 3443 y(c)n(ho)r(ose)32
b(are)f(three)g(augmen)n(t)f(ones.)50 b(Additionally)-6
b(,)32 b(comparisons)-152 3531 y(b)r(et)n(w)n(een)18
b(augmen)n(t)g(approac)n(hes)g(with)g(three)g(traditional)h(ones)g
(will)-152 3618 y(b)r(e)26 b(quan)n(ti\014ed.)-129 3788
y Fb(5.3.2)90 b(r)m(esult)22 b(and)f(analysis)-77 3896
y Fq(T)-6 b(able)18 b Fo(??)f Fq(presen)n(ts)g(the)h(result)f(of)i(the)
e(last)h(case)h(study)-6 b(.)30 b(The)17 b(for-)-152
3983 y(m)22 b(of)g(this)f(table)h(is)g(similar)h(to)e(the)g(second)h
(study)-6 b(.)31 b(W)-6 b(e)21 b(just)h(added)-152 4070
y(some)32 b(information)g(in)f(the)f(paren)n(theses)h(attac)n(hed)g
(the)f(v)l(alue)h(in)-152 4157 y(eac)n(h)23 b(cell.)35
b(This)23 b(information)h(displa)n(y)f(the)g(discrepancy)f(b)r(et)n(w)n
(een)-152 4244 y(traditional)38 b(ones.)67 b(Notation)37
b('+')g(means)g(promotions)g(against)-152 4332 y(traditional)32
b(ones,)h(while)e('-')g(indicates)h(decrease.)50 b(The)32
b(v)l(alue)e(in)-152 4419 y(paren)n(theses)c(has)f(b)r(een)h
(normalized.)-77 4506 y(W)-6 b(e)24 b(observ)n(e)g(that,)h(for)g(most)g
(cases,)h(augmen)n(t)e(approac)n(hes)g(got)-152 4593
y(promotions)34 b(against)g(traditional)g(ones.)57 b(In)33
b(fact,)j(there)d(are)g(10)-152 4680 y(out)h(of)h(14)g(cases)g(that)f
(augmen)n(t)g(ones)h(outp)r(erform)f(traditional)-152
4767 y(ones)24 b(at)g(the)f(metric)h(of)g(")-9 b(similarit)n(y")g(,)26
b(and)d(9)h(out)f(of)h(14)h(cases)f(that)-152 4855 y(augmen)n(t)g(ones)
g(are)g(b)r(etter)g(than)f(traditional)h(ones)g(at)g(the)g(metric)-152
4942 y(of)j(")-9 b(n)n(um)25 b(di\013")-9 b(.)34 b(Additional,)26
b(this)g(promotion)g(is)g(distinct.)35 b(As)25 b(w)n(e)-152
5029 y(can)d(see,)i(the)d(b)r(est)h(promotion)g(for)g(similarit)n(y)h
(is)f(0.9)h(and)f(the)f(b)r(est)-152 5116 y(promotion)38
b(for)g(n)n(um)e(di\013)h(is)h(0.7.)70 b(F)-6 b(urthermore,)39
b(the)e(a)n(v)n(erage)-152 5203 y(p)r(erformance)g(promotion)e(for)i
(similarit)n(y)f(reac)n(hed)f('+)h(0.6')g(and)-152 5290
y(this)26 b(v)l(alue)f(reac)n(hed)g('+)h(0.5')h(for)f(the)f(n)n(um)g
(di\013)g(metric.)-77 5378 y(So)i(the)f(answ)n(er)h(for)h(Q3)e(is:)38
b(our)26 b(approac)n(h)h(do)f(get)h(b)r(etter)f(p)r(er-)2040
1580 y(formance)g(at)f(iden)n(tifying)g(failure-inducing)g(com)n
(binations)h(when)2040 1667 y(facing)j(masking)f(e\013ect)f(b)r(et)n(w)
n(een)g(m)n(ultiple)h(faults,)h(to)f(whic)n(h)f(the)2040
1755 y(exten)n(t)e(is)h(distinct.)2040 1909 y Fr(5.4)99
b(thr)n(eats)26 b(to)f(v)o(alidity)2115 2017 y Fq(There)34
b(are)g(sev)n(eral)h(threats)e(to)h(v)l(alidit)n(y)f(for)i(these)f
(empirical)2040 2104 y(studies.)39 b(First,)28 b(w)n(e)g(ha)n(v)n(e)e
(only)h(surv)n(ey)n(ed)e(\014v)n(e)h(op)r(en-source)h(soft-)2040
2191 y(w)n(are,)e(four)e(of)g(whic)n(h)g(are)g(medium-sized)f(and)g
(one)h(is)g(large-sized.)2040 2279 y(This)38 b(ma)n(y)e(impact)h(the)g
(generalit)n(y)g(of)h(our)f(observ)l(ations.)68 b(Al-)2040
2366 y(though)18 b(w)n(e)h(b)r(eliev)n(e)g(it)f(is)i(quite)e(p)r
(ossible)h(a)g(common)g(phenomenon)2040 2453 y(in)f(most)g(soft)n(w)n
(are)i(that)e(con)n(tain)g(m)n(ultiple)g(faults)h(whic)n(h)f(can)g
(mask)2040 2540 y(eac)n(h)24 b(other,)g(w)n(e)h(need)e(to)h(in)n(v)n
(estigate)g(more)h(soft)n(w)n(are)g(to)f(supp)r(ort)2040
2627 y(our)36 b(conjecture.)66 b(The)36 b(second)f(threat)h(comes)h
(from)f(the)g(input)2040 2715 y(mo)r(del)f(w)n(e)g(built.)61
b(As)34 b(w)n(e)h(fo)r(cused)g(on)g(the)f(options)h(related)f(to)2040
2802 y(the)27 b(p)r(erfect)g(com)n(binations)h(and)e(only)h(augmen)n
(ted)g(it)g(with)g(some)2040 2889 y(noise)d(options,)g(there)g(is)g(a)f
(c)n(hance)g(w)n(e)h(will)h(get)f(di\013eren)n(t)e(result)i(if)2040
2976 y(w)n(e)i(c)n(ho)r(ose)f(other)g(noise)h(options.)34
b(More)26 b(di\013eren)n(t)e(options)i(need-)2040 3063
y(ed)g(to)h(b)r(e)g(opted)f(to)h(see)g(whether)f(our)h(result)f(is)i
(common)f(or)g(just)2040 3150 y(app)r(eared)c(in)f(some)i(particular)f
(input)f(mo)r(del.)34 b(The)23 b(third)f(threats)2040
3238 y(is)30 b(that)e(w)n(e)h(just)g(observ)n(ed)g(three)g(MFS)f(iden)n
(tifying)h(algorithms,)2040 3325 y(further)h(w)n(orks)i(needed)d(to)i
(exam)g(more)g(MFS)f(iden)n(tifying)h(algo-)2040 3412
y(rithms)26 b(to)f(get)h(a)g(more)g(general)g(result.)2040
3613 y Fr(6.)99 b(RELA)-9 b(TED)26 b(W)o(ORKS)2115 3721
y Fq(Nie's)19 b(approac)n(h)e(in)i([12])g(\014rst)f(separates)h(the)f
(fault)n(y)g(p)r(ossible)h(tu-)2040 3808 y(ples)28 b(and)f(health)n
(y-p)r(ossible)g(tuples)g(in)n(to)g(t)n(w)n(o)h(sets.)40
b(Subsequen)n(t-)2040 3896 y(ly)-6 b(,)29 b(b)n(y)e(c)n(hanging)h(a)h
(parameter)f(v)l(alue)g(at)g(a)h(time)f(of)h(the)f(original)2040
3983 y(test)21 b(con\014guration,)i(this)e(approac)n(h)g(generates)h
(extra)f(test)g(con\014g-)2040 4070 y(urations.)48 b(After)29
b(executing)h(the)f(con\014gurations,)i(the)f(approac)n(h)2040
4157 y(con)n(v)n(erges)j(b)n(y)f(reducing)g(the)h(n)n(um)n(b)r(er)e(of)
j(tuples)e(in)h(the)f(fault)n(y-)2040 4244 y(p)r(ossible)27
b(sets.)2115 4332 y(Delta)36 b(debugging)g([19])h(prop)r(osed)f(b)n(y)f
(Zeller)i(is)f(an)g(adaptiv)n(e)2040 4419 y(divide-and-conquer)26
b(approac)n(h)j(to)g(lo)r(cate)h(in)n(teraction)f(fault.)44
b(It)2040 4506 y(is)28 b(v)n(ery)f(e\016cien)n(t)h(and)f(has)h(b)r(een)
f(applied)h(to)g(real)g(soft)n(w)n(are)i(en)n(vi-)2040
4593 y(ronmen)n(t.)j(Zhang)21 b(et)i(al.)33 b([20])24
b(also)f(prop)r(osed)f(a)g(similar)i(approac)n(h)2040
4680 y(that)f(can)g(iden)n(tify)g(the)f(failure-inducing)h(com)n
(binations)h(that)e(has)2040 4767 y(no)k(o)n(v)n(erlapp)r(ed)f(part)g
(e\016cien)n(tly)-6 b(.)2115 4855 y(Colb)r(ourn)17 b(and)g(McClary)h
([5])g(prop)r(osed)f(a)g(non-adaptiv)n(e)f(metho)r(d.)2040
4942 y(Their)i(approac)n(h)g(extends)e(the)h(co)n(v)n(ering)h(arra)n(y)
g(to)g(the)f(lo)r(cating)i(ar-)2040 5029 y(ra)n(y)24
b(to)h(detect)e(and)h(lo)r(cate)h(in)n(teraction)g(faults.)35
b(C.)25 b(Martinez)f([10,)2040 5116 y(11])30 b(prop)r(osed)f(t)n(w)n(o)
h(adaptiv)n(e)f(algorithms.)46 b(The)30 b(\014rst)f(one)g(needs)2040
5203 y(safe)k(v)l(alue)e(as)h(their)f(assumption)h(and)f(the)g(second)g
(one)h(remo)n(v)n(e)2040 5290 y(the)25 b(assumption)g(when)f(the)h(n)n
(um)n(b)r(er)e(of)j(v)l(alues)f(of)h(eac)n(h)f(parame-)2040
5378 y(ter)j(is)g(equal)g(to)g(2.)41 b(Their)28 b(algorithms)h(fo)r
(cus)g(on)f(iden)n(tifying)f(the)p eop end
%%Page: 10 10
TeXDict begin 10 9 bop -125 1235 a @beginspecial -1 @llx
0 @lly 520 @urx 461 @ury 1591 @rwi @setspecial
%%BeginDocument: FIC_BS_our.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: FIC_BS_our.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: niuxintao
%%CreationDate: 3/7/2014, 11:15:52 PM
%%BoundingBox: -1 0 520 461
%%HiResBoundingBox: 0 0 519.2751 460.8021
%%CropBox: 0 0 519.2751 460.8021
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 722 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-03-07T23:12:30+08:00"
   xmp:CreatorTool="Microsoft® Excel® 2013"
   xmp:ModifyDate="2014-03-07T23:12:30+08:00"
   pdf:Producer="Microsoft® Excel® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>xintao niu</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -460.802 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 460.802 li
519.275 460.802 li
519.275 0 li
cp
clp
[1 0 0 1 -47.1275 0 ]ct
51.218 455.461 mo
560.928 455.461 li
560.928 4.6911 li
51.218 4.6911 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
1.4263 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
72.138 123.571 mo
72.138 414.871 li
160.05 123.571 mo
160.05 414.871 li
247.91 123.571 mo
247.91 414.871 li
335.77 123.571 mo
335.77 414.871 li
423.64 123.571 mo
423.64 414.871 li
511.65 123.571 mo
511.65 414.871 li
1 /0 /CSD get_res sepcs
.149 sep
@
108.01 369.121 mo
124.22 369.121 li
124.22 414.871 li
108.01 414.871 li
cp
195.88 398.341 mo
212.08 398.341 li
212.08 414.871 li
195.88 414.871 li
cp
283.74 402.441 mo
299.94 402.441 li
299.94 414.871 li
283.74 414.871 li
cp
459.69 406.551 mo
475.67 406.551 li
475.67 414.871 li
459.69 414.871 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.441932 .103243 .851316 .000457771 cmyk
f
511.65 414.871 mo
511.65 123.571 li
1 /0 /CSD get_res sepcs
.475 sep
@
511.65 414.871 mo
517.68 414.871 li
511.65 373.231 mo
517.68 373.231 li
511.65 331.701 mo
517.68 331.701 li
511.65 289.931 mo
517.68 289.931 li
511.65 248.401 mo
517.68 248.401 li
511.65 206.861 mo
517.68 206.861 li
511.65 165.101 mo
517.68 165.101 li
511.65 123.571 mo
517.68 123.571 li
@
72.138 414.871 mo
511.65 414.871 li
1 /0 /CSD get_res sepcs
.149 sep
@
116.03 357.511 mo
123.56 365.041 li
116.03 372.581 li
108.5 365.041 li
cp
.719692 .439979 .027985 3.0518e-5 cmyk
f
1.3693 lw
116.03 357.511 mo
123.56 365.041 li
116.03 372.581 li
108.5 365.041 li
cp
@
204.12 369.841 mo
211.65 377.371 li
204.12 384.901 li
196.59 377.371 li
cp
f
204.12 369.841 mo
211.65 377.371 li
204.12 384.901 li
196.59 377.371 li
cp
@
291.98 394.941 mo
299.52 402.471 li
291.98 410.001 li
284.45 402.471 li
cp
f
291.98 394.941 mo
299.52 402.471 li
291.98 410.001 li
284.45 402.471 li
cp
@
379.85 407.261 mo
387.38 414.801 li
379.85 422.331 li
372.32 414.801 li
cp
f
379.85 407.261 mo
387.38 414.801 li
379.85 422.331 li
372.32 414.801 li
cp
@
467.71 399.051 mo
475.24 406.581 li
467.71 414.111 li
460.18 406.581 li
cp
f
467.71 399.051 mo
475.24 406.581 li
467.71 414.111 li
460.18 406.581 li
cp
@
110.33 378.971 mo
121.741 378.971 li
121.741 367.56 li
110.33 367.56 li
cp
.18497 .816068 .688869 .0602731 cmyk
f
110.33 378.971 mo
121.741 378.971 li
121.741 367.56 li
110.33 367.56 li
cp
@
198.42 420.501 mo
209.831 420.501 li
209.831 409.09 li
198.42 409.09 li
cp
f
198.42 420.501 mo
209.831 420.501 li
209.831 409.09 li
198.42 409.09 li
cp
@
286.28 387.411 mo
297.691 387.411 li
297.691 376 li
286.28 376 li
cp
f
286.28 387.411 mo
297.691 387.411 li
297.691 376 li
286.28 376 li
cp
@
374.14 420.501 mo
385.551 420.501 li
385.551 409.09 li
374.14 409.09 li
cp
f
374.14 420.501 mo
385.551 420.501 li
385.551 409.09 li
374.14 409.09 li
cp
@
462 166.731 mo
473.411 166.731 li
473.411 155.32 li
462 155.32 li
cp
f
462 166.731 mo
473.411 166.731 li
473.411 155.32 li
462 155.32 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LLIAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /LLIAAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9ddb2dc000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c7966924dc6eb00008f600000aaec68656164ecde32e000000f640000
0036686865610dad0c0b00000f9c00000024686d747808b54acd00000fc0
00002fe06c6f6361a8d67fb800003fa000001e4e6d617870213625500000
5df0000000206e616d6519aa717b00005e1000000d3e707265706baf02fe
00006b5000002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
fb040600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d0000000100000005b852c712c7935f0f3cf500190800
00000000bbeb7ccc00000000cbdab383fbfafd8b09ec07b6000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000008ca040e0000000000000000000001cf000004a1
002300000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000044400610000
00000000000000000000000000000000000004ec00ac0000000000000000
0000000003e800ac00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000004fc00ac0000000000000000020400ac000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000035d00ac000000000000
000000000000000000000000000006d700ac052a00ac0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
042200ac0000000000000000045800ac00000000000000000000000003ad
0047000000000000000000000000000000000000000003e6000f00000000
0000000000000000052200aa000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000003f40010
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000003cb006d00000000
00000000000000000000000000000000046500a100000000000000000000
0000038000a1000000000000000000000000000000000000000000000000
000000000000000000000000035000a10482006c00000000000000000000
000000000000047800a1000000000000000001ec00a10000000000000000
000000000000000000000000000000000000000001ec0011000000000000
00000000000000000000000000000000000002e000a10000000000000000
000000000000000000000000060600a1049100a100000000000000000000
0000000000000000000004aa006600000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000003c5
00a1000000000000000003ed00a1000000000000000000000000034f0049
00000000000000000000000000000000000000000359001c000000000000
000000000000048d009f0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000038300100000000000000000
00000000000000000000000000000000000000000000000003d5005c0000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000362005a000000000000
0000000000000000000000000000076f005a000000000601005a00000000
0434006000000000000000000000000003fb005d00000000000000000000
000000000000000000000000000000000000000000000000000002710025
000000000000000004ab0025069b002508d50025043c0025000000000000
000000000000000000000000000000000000000000000000000000000000
067600250000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
043c00250000000000000000000000000676002504ed0025000000000000
00000728002503c400350000000000000000000000000000000004340060
0000000000000000000000000000000004340099000000000000000001d6
008500000000000000000000000000000000000000000000000000000000
0000000001d6009900000000000000000000000000000000000000000000
0000000000000000000001d6009900000000000000000000000000000000
000000000000000004340099000000000000000000000000000000000000
0000000000000438005a0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000043400990000
00000000000002ca00990000000000000000000000000321005100000000
0000000000000000000000000000000005ae005100000000000000000000
000002ae002100000000000000000000000004e600210475002100000000
000000000000000000000000000000000000000000000000000000000475
002105130021074b002106d9002100000000000000000000000000000000
0000000000000000000000000000000006d9002104340094000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000039f0022000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002ac004400000000024e
004402e5004802b8004701c100240297002a02e9006c0163006100000000
00000000015e006c0000000002e6006c02e6004502e5006c0000000001f6
006c0230004201e3002302e9006c0000000000000000000000000286001f
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001d6000001ce000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000029b010a000000000000
000000000000000000000000000000000000026000ed0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000494005f02cb002303ec0062
03ec00510455002203d700510436007e03b20035043600630436005c040e
0048040e00ae040e0072040e0067040e0020040e0065040e006b040e0063
040e0052040e005204430067028d00190381005c0373005903ac00260368
006103b7006e0349002f03b5004b03bc0052039f0050039f008d039f0065
039f0062039f003a039f0067039f0061039f005e039f0051039f00500494
005f02cb002303ec006203ec00510428002203d700510436007e03b20035
043600630436005c040e0048040e00ae040e0072040e0067040e0030040e
0065040e006b040e0063040e0052040e00520321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df00440000
0000000000000000000000000000000000000321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df00440000
000000000000000000000000000000000000029d003801f500310252003c
0249002d024a001402460032025100300238002202570025024d0023029d
003801f500310252003c0249002d024a0014024600320251003002380022
02570025024d002300000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000002f5001c000000000306005a034b
008e02a8008e0000000000000000035b008e01a6008e0000000000000000
025b008e046d008e0375008d0000000002d8008e00000000029b00570280
004602570004031400570000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002f5001c000000000000000000000000034b008e
02a8008e0000000000000000035b008e01a6008e0000000000000000025b
008e046d008e0375008d00000000000000000000000002d8008e029b0057
025700040314005700000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00a100a100a100a1012f012f012f012f012f012f012f012f012f012f012f
012f012f012f01ac01ac01ac01ac01ac01ac021902190219021902950295
029502950295029502950295029502950295029502950295029502950335
033503350380038003800380038003800380038003800380038003800380
0380038003ce03ce03ce03ce03ce03ce047b051605160516051605160516
051605160516051605160516051605160516051605160516058f058f058f
063a063a063a063a070c070c070c070c070c070c077307730773077307fe
07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe
07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe0864086408640864
086408640864086408640864086408640864086408ca08ca08ca08ca08ca
08ca090c090c090c090c0965096509650965096509650965096509650965
09b20a290a290a290a290a290a870a870a870ab30ab30ab30ab30ab30ab3
0ab30ab30abe0abe0abe0abe0abe0abe0abe0af30af30af30af30af30af3
0b690bd50bd50bd50bd50bd50bd50c230c230c230c230c230c230c230c23
0c230c230c230c230c7a0c7a0c7a0cf40cf40cf40cf40d7a0d7a0d7a0d7a
0d7a0d7a0dbb0dbb0dbb0dbb0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b
0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e5d0e5d0e5d0e5d0e5d0e5d
0e5d0e5d0e5d0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c
0f0c0f0c0f980f980f980f980f980f98106c106c114b114b11e211e211e2
11e2128312831283128312831283128312831283128313061306130613ae
146b156e160116011601160116011601160116011601160116da16da16da
16da16da16da16da16da16da16da16da16da16da16da16da176217621762
1762182d18db18db18db19d21abf1abf1abf1abf1abf1b4f1b4f1b4f1b4f
1b4f1bd31bd31bd31c4c1c4c1c4c1c4c1c4c1c4c1c4c1c4c1c4c1c781c78
1c781c781c781c781c781c781c781cbb1cbb1cbb1cbb1cbb1cbb1cbb1d4c
1d4c1d4c1d4c1d4c1d4c1d4c1dda1dda1dda1dda1dda1dda1dda1dda1dda
1dda1dda1dda1e711e711e711eea1eea1eea1eea1fb01fb01fb01fb01fb0
1fb020af20af20af20af212b212b212b212b21d821e421e421e421e421e4
21e421e421e421e4225a230c2401240d240d240d240d240d240d240d240d
240d24cc255c255c255c255c255c255c255c255c255c255c255c255c255c
255c255c255c255c255c25c125c125c125c125c125c125c125c125c125c1
25c125c126372637268d26f3275727b8287b28d8291c291c291c29482948
299e29e72a522a522aa52b1d2b772bd02bd02bd02bd02c272c272c272c27
2c272c272c272c272c272c272c272c272c272c272c272c272c272c272c27
2c272c272c272c272c272c272c272c272c272c272c272c272c272c272c27
2c272c272c272c272c272c272c272c272c272c272c272c272c272c272c27
2c272c272c272c272c272c272c272c272c272c4b2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2cb42cb42cb42cb42cb42cb42cb42d022d022d022d022d022d02
2d022d022d022d022d022d022d022d022d022d022d022d022d022d022d02
2d022d022d022d022d022d022d022d022d022d022d022d022d022d022d02
2d022d022d022d022d022d022d022d022d022d022d022d022d022d022d02
2d022d022d022d022d022d022d022d022d022d022d022d022d022d022d02
2d022d022d022d022d482d482d482d482d482d482d482d482d482d482d48
2d482d482d482d482d482d482d482d482d482d482d482d482d482d482d48
2d482d482d482d482d482d482d482d482d482d962dd92e502eef2f512fc4
30403088310f318531d3322f329d3339339b341234c03506362c36a936f7
373a37ac384638ab3924399f39e43a753af13b3e3b973b9f3ba73c0a3c84
3cfb3d433dc83e3c3e8c3ece3f463fe3404840c340cb4113411b4188423b
42f243924486454b4600460846a746af47684771477a4783478c4795479e
47a747b047b947c247c247c247c247c247c2480d485048b2493f49a04a0e
4a864acd4b534bcb4bcb4bcb4bcb4bcb4bcb4c164c584cbf4d574db94e26
4e9a4ee04f684fdb4fe44fed4ff64fff50085011501a5023502c50355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
503550355035503550355035503550355035503550355035503550355035
5035503d503d50a050a850b050b050b050b850c050c050c050c850d050d8
50d850e050e050e85167516f517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751775177517751775177517751775177
517751775177517751775177517751c351c351c351c35205525e525e525e
52c052ee52ee52ee532653975407540754075407545b54e1552455765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655765576557655765576557655765576
557655765576557655765576557655760000000100000f26009600050078
000300020010002f0065000011902410000200010000002d022200000003
00000000006400000000000300000001000e00640000000300000002000e
03040000000300000003002403120000000300000004000e006400000003
00000005001803360000000300000006000e006400000003000000070076
034e0000000300000008002a000e0000000300000009002003c400000003
0000000a02a00064000000030000000b005603e4000000030000000c002a
043a000000030000000d02980464000000030000000e006c06fc00010000
000000000032076800010000000000010007079a00010000000000020007
08ea0001000000000003001208f100010000000000040007079a00010000
00000005000c090300010000000000060007079a0001000000000007003b
090f00010000000000080015076f00010000000000090010094a00010000
0000000a0150079a000100000000000b002b095a000100000000000c0015
0985000100000000000d014c099a000100000000000e00360ae600030001
04090000006400000003000104090001000e00640003000104090002000e
03040003000104090003002403120003000104090004000e006400030001
04090005001803360003000104090006000e006400030001040900070076
034e0003000104090008002a000e0003000104090009002003c400030001
0409000a02a00064000300010409000b005603e4000300010409000c002a
043a000300010409000d02980464000300010409000e006c06fc00a90020
00320030003100320020004d006900630072006f0073006f006600740020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e00430061006c006900620072006900200069007300200061
0020006d006f006400650072006e002000730061006e0073002000730065
007200690066002000660061006d0069006c007900200077006900740068
00200073007500620074006c006500200072006f0075006e00640069006e
006700730020006f006e0020007300740065006d007300200061006e0064
00200063006f0072006e006500720073002e002000490074002000660065
0061007400750072006500730020007200650061006c0020006900740061
006c006900630073002c00200073006d0061006c006c0020006300610070
0073002c00200061006e00640020006d0075006c007400690070006c0065
0020006e0075006d006500720061006c00200073006500740073002e0020
004900740073002000700072006f0070006f007200740069006f006e0073
00200061006c006c006f00770020006800690067006800200069006d0070
00610063007400200069006e002000740069006700680074006c00790020
0073006500740020006c0069006e006500730020006f0066002000620069
006700200061006e006400200073006d0061006c006c0020007400650078
007400200061006c0069006b0065002e002000430061006c006900620072
0069002700730020006d0061006e00790020006300750072007600650073
00200061006e006400200074006800650020006e00650077002000720061
007300740065007200690073006500720020007400650061006d00200075
007000200069006e0020006200690067006700650072002000730069007a
0065007300200074006f002000720065007600650061006c002000610020
007700610072006d00200061006e006400200073006f0066007400200063
00680061007200610063007400650072002e0052006500670075006c0061
0072004d006900630072006f0073006f00660074003a002000430061006c
006900620072006900560065007200730069006f006e00200035002e0037
003200430061006c00690062007200690020006900730020006100200074
0072006100640065006d00610072006b0020006f00660020007400680065
0020004d006900630072006f0073006f00660074002000670072006f0075
00700020006f006600200063006f006d00700061006e006900650073002e
004c007500630028006100730029002000640065002000470072006f006f
00740068007400740070003a002f002f007700770077002e006d00690063
0072006f0073006f00660074002e0063006f006d002f007400790070006f
006700720061007000680079002f006300740066006f006e007400730068
007400740070003a002f002f0066006f006e007400660061006200720069
006b002e0063006f006d0059006f00750020006d00610079002000750073
00650020007400680069007300200066006f006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
0065002000450055004c004100200066006f007200200074006800650020
00700072006f006400750063007400200069006e00200077006800690063
00680020007400680069007300200066006f006e00740020006900730020
0069006e0063006c007500640065006400200074006f0020006400690073
0070006c0061007900200061006e00640020007000720069006e00740020
0063006f006e00740065006e0074002e00200059006f00750020006d0061
00790020006f006e006c0079002000280069002900200065006d00620065
00640020007400680069007300200066006f006e007400200069006e0020
0063006f006e00740065006e00740020006100730020007000650072006d
00690074007400650064002000620079002000740068006500200065006d
00620065006400640069006e006700200072006500730074007200690063
00740069006f006e007300200069006e0063006c00750064006500640020
0069006e0020007400680069007300200066006f006e0074003b00200061
006e006400200028006900690029002000740065006d0070006f00720061
00720069006c007900200064006f0077006e006c006f0061006400200074
00680069007300200066006f006e007400200074006f0020006100200070
00720069006e0074006500720020006f00720020006f0074006800650072
0020006f0075007400700075007400200064006500760069006300650020
0074006f002000680065006c00700020007000720069006e007400200063
006f006e00740065006e0074002e0068007400740070003a002f002f0077
00770077002e006d006900630072006f0073006f00660074002e0063006f
006d002f007400790070006f006700720061007000680079002f0066006f
006e00740073002f00640065006600610075006c0074002e006100730070
0078a92032303132204d6963726f736f667420436f72706f726174696f6e
2e20416c6c205269676874732052657365727665642e43616c6962726920
69732061206d6f6465726e2073616e732073657269662066616d696c7920
7769746820737562746c6520726f756e64696e6773206f6e207374656d73
20616e6420636f726e6572732e204974206665617475726573207265616c
206974616c6963732c20736d616c6c20636170732c20616e64206d756c74
69706c65206e756d6572616c20736574732e204974732070726f706f7274
696f6e7320616c6c6f77206869676820696d7061637420696e2074696768
746c7920736574206c696e6573206f662062696720616e6420736d616c6c
207465787420616c696b652e2043616c696272692773206d616e79206375
7276657320616e6420746865206e65772072617374657269736572207465
616d20757020696e206269676765722073697a657320746f207265766561
6c2061207761726d20616e6420736f6674206368617261637465722e5265
67756c61724d6963726f736f66743a2043616c6962726956657273696f6e
20352e373243616c6962726920697320612074726164656d61726b206f66
20746865204d6963726f736f66742067726f7570206f6620636f6d70616e
6965732e4c7563286173292064652047726f6f74687474703a2f2f777777
2e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374666f
6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f75206d61
7920757365207468697320666f6e74206173207065726d69747465642062
79207468652045554c4120666f72207468652070726f6475637420696e20
7768696368207468697320666f6e7420697320696e636c7564656420746f
20646973706c617920616e64207072696e7420636f6e74656e742e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e68747470
3a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f6772617068
792f666f6e74732f64656661756c742e61737078000000>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[16225 16173 11361 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
4 1514 1005 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>LLIAAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/one 1005 def
end
LLIAAA+Calibri /Encoding get
dup 49 /one put
pop
end
%ADOEndSubsetFont
/VGUSFS+Calibri /LLIAAA+Calibri findfont ct_VMDictPut
/VGUSFS+Calibri*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
121.2 357.761 mo
(11)
[-7.75204 0 ]ysh
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
4 2688 1008 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/four 1008 def
end
LLIAAA+Calibri /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[49{/.notdef}rp /one 2{/.notdef}rp /four 203{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
209.11 386.881 mo
(4)sh
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
4 2200 1007 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/three 1007 def
end
LLIAAA+Calibri /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[49{/.notdef}rp /one /.notdef /three /four 203{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
297.05 391.031 mo
(3)sh
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
4 1156 1004 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/zero 1004 def
end
LLIAAA+Calibri /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[48{/.notdef}rp /zero /one /.notdef /three /four 203{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
384.96 403.511 mo
(0)sh
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
4 1880 1006 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/two 1006 def
end
LLIAAA+Calibri /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
472.87 395.201 mo
(2)sh
VGUSFS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
146.66 372.721 mo
(12)
[-7.75204 0 ]ysh
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
4 3794 1013 <00020052ffed03a605210030004200bd4013292e012a0501290401290301
2a2601260a0144b8ffc040200f024d60440131080d014d31100c0d014c1d
7a3101393149316931032b310131b8022c4009000e0e200070000200b8ff
e0b30f024d00b8ffe0b40f014d003bb8fff8b30d014d3bb8fff040120c0d
014c753b01363b463b663b03243b013bb8022b400e2f25012540f2202007
36f42a5318b80108b10756003fed3fed12392fed012f5de15d5d5d2b2bc4
2b2b5d392f10e15d5d5d322b2b31305d2b005d5d015d5d5d5d01140e0423
222e0435343e0233321e0233323e0237060623222e0235343e0233321e04
07342e0223220e0215141e0233323603a61430517ba9702b51412c140903
060b080b283d5233618b582c023594606c935927326aa472517d5c402711
af2242603f415c3b1c19385a424b8c02ba54ac9f8b683b0b1012121f1a16
1a0e050f120f4b7ea65c1f303b668c53569b7646294d6d8aa14680af6c30
2f4f64353b6244252d00>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/nine 1013 def
end
LLIAAA+Calibri /Encoding get
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 4{/.notdef}rp /nine 
198{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
234.58 381.331 mo
(9)sh
VGUSFS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
322.49 406.291 mo
(3)sh
VGUSFS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
410.42 418.801 mo
(0)sh
VGUSFS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
498.34 410.471 mo
(2)sh
VGUSFS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
144.74 381.041 mo
(10)
[-7.75204 0 ]ysh
VGUSFS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
232.68 418.801 mo
(0)sh
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
3 10924 972 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>LLIAAA+Calibri AddT42Char 
4 3778 1012 <ffff0052ffed03ba0521020603cc0000>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/eight 1012 def
end
LLIAAA+Calibri /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 3{/.notdef}rp /eight 
/nine 198{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
320.59 385.481 mo
(8)sh
VGUSFS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
408.5 418.801 mo
(0)sh
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
3 10436 970 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>LLIAAA+Calibri AddT42Char 
4 3444 1010 <ffff006bffed03bd0520020603ca0000>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/six 1010 def
end
LLIAAA+Calibri /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /.notdef /six 
/.notdef /eight /nine 198{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
496.44 168.791 mo
(61)
[-7.77606 0 ]ysh
VGUSFS+Calibri*1 [18.936 0 0 -18.936 0 0 ]msf
529.39 420.331 mo
(0)sh
gsave
51.24 455.421 mo
560.76 455.421 li
560.76 4.70111 li
51.24 4.70111 li
cp
eclp
VGUSFS+Calibri*1 [18.936 0 0 -18.936 0 0 ]msf
529.39 378.721 mo
(10)
[9.57605 0 ]xsh
grestore
gsave
51.24 455.421 mo
560.76 455.421 li
560.76 4.70111 li
51.24 4.70111 li
cp
eclp
VGUSFS+Calibri*1 [18.936 0 0 -18.936 0 0 ]msf
529.39 337.101 mo
(20)
[9.57605 0 ]xsh
grestore
gsave
51.24 455.421 mo
560.76 455.421 li
560.76 4.70111 li
51.24 4.70111 li
cp
eclp
VGUSFS+Calibri*1 [18.96 0 0 -18.96 0 0 ]msf
529.39 295.461 mo
(30)
[9.57611 0 ]xsh
grestore
gsave
51.24 455.421 mo
560.76 455.421 li
560.76 4.70111 li
51.24 4.70111 li
cp
eclp
VGUSFS+Calibri*1 [18.96 0 0 -18.96 0 0 ]msf
529.39 253.841 mo
(40)
[9.57611 0 ]xsh
grestore
gsave
51.24 455.421 mo
560.76 455.421 li
560.76 4.70111 li
51.24 4.70111 li
cp
eclp
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
4 3082 1009 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/five 1009 def
end
LLIAAA+Calibri /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/.notdef /eight /nine 198{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [18.936 0 0 -18.936 0 0 ]msf
529.39 212.231 mo
(50)
[9.57605 0 ]xsh
grestore
gsave
51.24 455.421 mo
560.76 455.421 li
560.76 4.70111 li
51.24 4.70111 li
cp
eclp
VGUSFS+Calibri*1 [18.936 0 0 -18.936 0 0 ]msf
529.39 170.611 mo
(60)
[9.57605 0 ]xsh
grestore
gsave
51.24 455.421 mo
560.76 455.421 li
560.76 4.70111 li
51.24 4.70111 li
cp
eclp
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
4 3460 1011 <00010063fffa03af050e001f00d7b90011ffe8400a1121014c111010014d
11b8ffe8b30f014d11b8fff0b30d014d11b8ffe8b30c014d11b8fff8400a
0b014d74110126110110b8ffe8400a1121014c101010014d10b8ffe8b30f
014d10b8fff0b30d014d10b8ffe8400b0b0c014c75100126100106b8fff0
b30b014d21b8ffc0b60f024d60210100b8ffc0b310014d00b8ffd8b40b01
4d0015b8ffc0b30c014d15b8ffe8b30b014d15b8ffe8b30f014d15b8ffe0
b50f024d150511b8012db31a510b55003f3fed32012f2b2b2b2bcd2b2b31
305d2b2b5d5d2b2b2b2b2b5d5d2b2b2b2b2b2b01140e0207010e03232226
2636370121222635343e023321321e0203af03050906fe2e050f17241a22
2611020601eafd931313050a0e0902f20e150b0604c4121d1b190efbce0c
0f0903060d130d044a2824131c130906121c>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/seven 1011 def
end
LLIAAA+Calibri /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 198{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [18.936 0 0 -18.936 0 0 ]msf
529.39 129.001 mo
(70)
[9.57605 0 ]xsh
grestore
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
2 322 4 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>LLIAAA+Calibri AddT42Char 
2 606 18 <00010061fff0040c051e00390062b31c003b2bb8ffe8b310014d2bb8fff0
b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b014d2bbe
0233000e0018012f00210026012cb2135304bb012a00350030012eb10956
003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c4313025140e0623222e02
35343e0233321e0615140e0223222e0223220e0215141e0233323e023332
1e02040c02050814405f7b497ecb8f4d5396d17f386a5a461b0805030408
0b080e324f714f568d64373563905b4d7351340f070a0603b71018120e14
29271b54a4f19da1fcaf5c15202a1b0e131a12141c1309272f274586c17c
7bbd7f41262f2606111e>LLIAAA+Calibri AddT42Char 
2 1074 28 <000100ac0000037c050e002c0076b11a27b8ffe8b310014d27b8fff0b30f
014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d27b80211
400909132013200009001ab80108400d802601c02601d0260126260619b8
010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f2f123939
2f2f10e12b2b2b2b2b32313025140e0223212226351134363321321e0215
140e0223211121321e0215140e0223211121321e02037c040a0d08fd9317
2929170266080d080505080d08fe0601b2080d090404090d08fe4e020108
0d0a0447121b12081f270482271f08121b14121b1108fe6a09101c13121a
1007fe3108111b00>LLIAAA+Calibri AddT42Char 
2 2846 90 <000200acfffa040b050e003600440091401e102e1137080b014d37100f01
4d37100c0d014c371810014d37180b014d37b80233b7294010014d293f11
b8fff0b310014d11b8fff0b30f014d11b8fff0b30d014d11b8fff6b30c01
4d11b8ffe8b30b014d11b80211b21c2e10b80108b67040014040173db801
0bb5215117550555003f3f3fed12392f5ded39012fe12b2b2b2b2b32d42b
e12b2b2b2b2b123939313025140e0223222e0227032e03232311140e0223
222e023511343633213216171e0315140e02071e03171316160134262726
2623231133323e02040b0614241e1a21140b0477152d3e543b7309132119
192114082917011331411a4b734e2723425c3920342d2814740e08fefd44
50193f3391a84463421f1a080c08040409100c013134573f23fdd9080c07
0505070c0804ae271f05030d38566f4341674f3a140e2b3c4e31fee3241d
03854c69170706fe4c213b50>LLIAAA+Calibri AddT42Char 
2 3608 100 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>LLIAAA+Calibri AddT42Char 
2 3814 104 <000100aaffed04790514002b0099401d602d01201810014d20100f014d20
100d014d200a0c014d20180b014d20b802104011004015014d004013014d
004011014d0016b8ffe8b310014d16b8fff0b30f014d16b8fff0b30d014d
16b8fff6b30c014d16b8ffe8b30b014d16ba0210000affc0b315014d0ab8
ffc0400913014d0a265210521bb80129b10556003fed3f3f012f2b2be12b
2b2b2b2bd42b2b2be12b2b2b2b2b31305d01140e0223222e023511343e02
33321e021511141e0233323e023511343e0233321e021504794580b8756b
b07e440814201a182213082c5375494b75512b081421191821130901de76
b980423e79b6770323080c070505070c08fcf25a86592d2c588257031708
0c070505070c0800>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/A 4 def
/C 18 def
/E 28 def
/R 90 def
/T 100 def
/U 104 def
end
LLIAAA+Calibri /Encoding get
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 82 /R put
dup 84 /T put
dup 85 /U put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /.notdef /C /.notdef 
/E 12{/.notdef}rp /R /.notdef /T /U 170{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [15.288 0 0 -15.288 0 0 ]msf
73.2 439.001 mo
(ACCURATE)
[11.1754 10.5029 10.5029 12.0775 10.5028 11.1754 9.79961 0 ]xsh
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
2 2294 69 <000100acfffa047e0511003d0085b3270f0f14b8ffe8b310014d14b8ffe8
b30f014d14b8ffe8b30d014d14b8fff0b30c014d14b8ffe8b30b014d14b8
0211401e1e0a2e2e321810014d32180f014d32180d014d32100c014d3218
0b014d32b802114010001e38520a2e0f270419225119550654003f3f3f12
17393f012fd4e12b2b2b2b2b32113310e12b2b2b2b2b322f33313025140e
022323222e0227012626272316161511140e0223222e0235113436333332
1e0217011e03173326263511343e0233321e0215047e0d151a0d371a2723
2315fe6820411c02020208131f18181f12082c1a521d271f1d11013a1d36
32311801020108131f191620120847141c12080b1d322702e0397d3b4896
4afcf3070d070505070d0704aa28220a17291ffdc83463605d2f4fab4f02
be070c090404090c0700>LLIAAA+Calibri AddT42Char 
2 2604 87 <000200acfffa03c7050e001c00290078b12406b8ffe8b310014d06b8fff0
b30f014d06b8fff0b30d014d06b8fff6b30c014d06b8ffe8b30b014d06b8
02114017111d1810014d1d100f014d1d100c0d014c1d200b014d1db80232
b2001125b8010ab306060c23b8010bb315510c55003f3fed12392fed012f
d4e12b2b2b2b10e12b2b2b2b2b32313001140e02232311140e0223222e02
351134363321321e0407342e0223231133323e0203c74077ad7893091321
19192114082a1a01152a4d696d4c29b53b575d2c9f9b4e6746240393619c
6e3cfe2e080c070505070c0804aa282207173f5c79574f6a340efdf92847
6300>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/N 69 def
/P 87 def
end
LLIAAA+Calibri /Encoding get
dup 78 /N put
dup 80 /P put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /.notdef /C /.notdef 
/E 8{/.notdef}rp /N /.notdef /P /.notdef /R /.notdef 
/T /U 170{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [15.288 0 0 -15.288 0 0 ]msf
172.08 439.001 mo
(PARENT)
[10.2582 11.1754 10.5028 9.79971 12.0775 0 ]xsh
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
2 856 24 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>LLIAAA+Calibri AddT42Char 
2 1322 44 <000100acfffa04500514002f00b8b43f3101230cb8ffe8b310014d0cb8ff
f0b30f014d0cb8fff0b30d014d0cb8fff6b30c014d0cb8ffe8b30b014d0c
b80211401c17240b1810014d0b100f014d0b100d014d0b0a0c014d0b180b
014d0bb802104017004015014d004013014d00401011014c00400c014d00
17b8ffc0b315014d17b8ffc0b613014d172a5224b8012c400fc00c01d00c
010c0c121d5212550555003f3f3f12392f5d71ed3f012f2b2bd42b2b2b2b
e12b2b2b2b2b3210e12b2b2b2b2b3231305d25140e0223222e0235112111
140e0223222e023511343e0233321e0215112111343e0233321e02150450
081421181a201408fdb308142119182214080814221819211408024d0814
201a182114081a080c070505070c08023efdc2080c070505070c0804da08
0c070505070c08fdfa0206080c070505070c0800>LLIAAA+Calibri AddT42Char 
2 1642 47 <000100acfffa0158051400150050b73f174f17af170300b8ffe8b310014d
00b8fff0b30f014d00b8fff0b30d014d00b8fff6b30c014d00b8ffe8b30b
014d00ba0211000affc0b715014d0a10520555003f3f012f2be12b2b2b2b
2b31305d25140e0223222e023511343e0233321e02150158081421191822
140809152117192114081a080c070505070c0804da080c070505070c0800
>LLIAAA+Calibri AddT42Char 
2 1792 62 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/D 24 def
/H 44 def
/I 47 def
/L 62 def
end
LLIAAA+Calibri /Encoding get
dup 68 /D put
dup 72 /H put
dup 73 /I put
dup 76 /L put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /.notdef /C /D 
/E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef /N 
/.notdef /P /.notdef /R /.notdef /T /U 170{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [15.288 0 0 -15.288 0 0 ]msf
251.33 439.001 mo
(CHILDREN)
[10.5029 11.8635 6.14575 8.65298 11.619 10.5028 9.79971 0 ]xsh
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
2 1948 68 <000100acfffa062b050e003c00ac4010603e703e020d3030172f2f0a2e18
181ab8ffe8b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b3
0c014d1ab8ffe8b30b014d1ab80211401e24310c0c0a1810014d0a100f01
4d0a100d014d0a0a0c014d0a180b014d0aba02110000ffc040190b014d00
2436510b18170d2f18312e061f28511f5512550555003f3f3f3f12173911
333f012fd42be12b2b2b2b2b32113310e12b2b2b2b2b32113311393d2f33
33113331305d25140e0223222e02351123010e0323222e0227012311140e
0223222e02351134363333321e02170133013e033333321e0215062b0814
1f191721130802fe33030b151d14151e140b02fe47010814201918201307
2c1b68203024180901770501860b1a1f26196d0f1b130c1a080c07050507
0c080467fb94070a070304070a06046cfb99080c070505070c0804a62a24
0c1a281bfc5703a61e2a190b09131d15>LLIAAA+Calibri AddT42Char 
2 3188 94 <00010047ffed03630521004900e7b90041ffe8b40f10014c41b8fff0b30d
014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d41b8022c
402b32401314014c324011014d243224320c1b180f10014c1b100d014d1b
1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d00b8ffc0
b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb0127003700
0a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c3711371116
3cb8010cb5411b05295316b80129b10556003fed3f123939ed1139392f2f
2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b2be12b2b
2b2b2b313001140e0223222e0435343e0233321e0233323e0235342e0635
343e0233321e0615140e0223222e0223220e0215141e0603634377a15d41
6f573b170b04080c080e3350714a385d43243252696e6852333b6991542b
574d3c1306040203060b070b2f445d3a3650341a32536a6e6a5333016b5b
8e633216202218251f161d12072228231e375033374e3b31333e54714f51
7f562d0f191f130b111813121c13091c231d1d304225364e3c32333d5371
>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/M 68 def
/S 94 def
end
LLIAAA+Calibri /Encoding get
dup 77 /M put
dup 83 /S put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /.notdef /C /D 
/E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N 
/.notdef /P /.notdef /R /S /T /U 170{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [15.288 0 0 -15.288 0 0 ]msf
359.78 439.001 mo
(MISS)
[15.3032 6.14575 9.34097 0 ]xsh
VGUSFS+Calibri*1 [15.288 0 0 -15.288 0 0 ]msf
417.36 439.001 mo
(REDUNDANT)
[10.4723 9.79971 11.619 12.0775 12.0775 11.619 11.1754 12.0775 0 ]xsh
%ADOBeginSubsetFont: NQPBAA+Calibri,Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /NQPBAA+Calibri,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc0ad74d000000cc000000606376
74202f4935490000012c000006086670676da1ea42ac0000073400000913
676c79665ef515ed000081dc0000189668656164ecbf33e5000010480000
0036686865610d8d0be90000108000000024686d747870a50ddd000010a4
00002fd06c6f63614a6045750000407400001e4e6d6178701c0316490000
5ec4000000206e616d65de46508300005ee400000d5c70726570c7f0742e
00006c400000159c676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e00002ff4000acff00000001000000004d53202000200000
1d390600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b140465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
00000005b852a22e96435f0f3cf50019080000000000bbeb7ccc00000000
cbdab477fbdafd8d09ec07c5000100090002000000000000000100000600
fe0001c40aa0fbdafa8609ec0001000000000000000000000000000008c2
040e00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000047c008d043c004f0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000003ac008d000000000000000000000000000000000000000000000000
00000000000000000222008d000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000006fe008d000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000003c8003f00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000438008603cb005a00000000000000000000000000000000
000000000491008600000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
035800860000000000000000000000000000000000000000000000000000
000000000000021000860000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
064800860000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000425
0086000000000000000000000000036f0043000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000044b004b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000002d8007e0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002f5003a000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000200005a00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000029b00e6000000000000000000000000000000000000
000000000000026900cf0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000003fcfff9000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000382007900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000030a0078031600540000000000000000029200780000
00000000000001b00078000000000000000000000000049a007800000000
000000000000000000000000000000000288003a00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000030a00780000000000000000000000000000000000000000
0000000001b00078000000000000000000000000049a0078000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e014001d301d301d301d301d301d301d301d301d301d301d3
01d301d301d301d301d301d301d301d301d3026a026a026a026a026a026a
026a026a026a02a202a202a202a202a202a202a202a202a202a202a202a2
02a202a202a202a202a202a202a202a202a2036603660366036603660366
036603660366036603660366036603660366036603660366036603660366
036603660366036603660422042204220422042204220422042204220422
042204220422042204220422042204220422042204220422042204220422
042204220422042204220422042204220422042204220422042204220422
0422042204220422042204220422042204220422049e0505050505050505
05050505054a054a054a054a054a054a054a054a054a054a054a054a054a
054a05990599059905990599059905990599059905c505c505c505c505c5
05c505c505c505c505c505c505c505c505c505c505c505c505c505c505c5
05c5063b063b063b063b063b063b063b063b063b063b063b063b063b063b
063b063b063b063b063b063b063b063b06b806b806b806b8074107410741
074107410741074107410741074107410741074107410741074107410741
074107410741074107410741074107410741074107410741074107410741
074107410741074107410741074107410741074107410741074107410741
074107410741074107410741074107410741074107410741074107dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd07dd
07dd07dd07dd07dd07dd07dd07dd085c085c085c085c085c085c085c085c
085c085c085c085c085c085c085c085c085c085c085c085c085c085c085c
085c085c085c085c085c085c085c085c085c085c085c085c085c085c085c
085c085c085c085c085c085c085c085c085c085c085c085c085c085c085c
085c085c085c085c085c085c085c085c085c085c085c085c085c085c085c
085c085c085c085c085c085c08c208c208c208c208c208c208c208c208c2
08c208c208c208c208c20915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915091509150915091509150915091509150915091509150915
091509150915096309630963096309630963096309b009b009b009b009b0
09b009b009b009b009b009b009b009b009b009b009b009b009b009b009b0
09b009b009b009b009b009b009b009b009b009b009b009b009b009b009b0
09b009b009b009b009b009b009d109d109d109d109d109d109d109d109d1
09d109d109d109d109d109d109d109d109d109d109d109d109d109d109d1
09d109d109d109d109d10a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a280a940a940a940ad50ad50ad50add0add0add0add0ae5
0ae50ae50ae50ae50ae50b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600b600b600b600b600b60
0b600b600b600b600b600b600b600b600b600b600bc40bc40bc40bc40bc4
0bc40bc40be90be90be90be90c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b
0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0c4b0000000100000f26004f0005
002c000300020010002f006000000c63159c000100010000002d02220000
000300000000006400000000000300000001000e00640000000300000002
0008032a0000000300000003002e030400000003000000040018031a0000
0003000000050018033200000003000000060018034a0000000300000007
007603620000000300000008002a000e0000000300000009002003d80000
00030000000a02a00064000000030000000b005603f8000000030000000c
002a044e000000030000000d02980478000000030000000e006c07100001
0000000000000032077c0001000000000001000707ae0001000000000002
000409110001000000000003001708fe0001000000000004000c09090001
000000000005000c09150001000000000006000c09210001000000000007
003b092d0001000000000008001507830001000000000009001009680001
00000000000a015007ae000100000000000b002b0978000100000000000c
001509a3000100000000000d014c09b8000100000000000e00360b040003
000104090000006400000003000104090001000e00640003000104090002
0008032a0003000104090003002e030400030001040900040018031a0003
0001040900050018033200030001040900060018034a0003000104090007
007603620003000104090008002a000e0003000104090009002003d80003
00010409000a02a00064000300010409000b005603f8000300010409000c
002a044e000300010409000d02980478000300010409000e006c071000a9
002000320030003100320020004d006900630072006f0073006f00660074
00200043006f00720070006f0072006100740069006f006e002e00200041
006c006c0020005200690067006800740073002000520065007300650072
007600650064002e00430061006c00690062007200690020006900730020
00610020006d006f006400650072006e002000730061006e007300200073
0065007200690066002000660061006d0069006c00790020007700690074
006800200073007500620074006c006500200072006f0075006e00640069
006e006700730020006f006e0020007300740065006d007300200061006e
006400200063006f0072006e006500720073002e00200049007400200066
00650061007400750072006500730020007200650061006c002000690074
0061006c006900630073002c00200073006d0061006c006c002000630061
00700073002c00200061006e00640020006d0075006c007400690070006c
00650020006e0075006d006500720061006c00200073006500740073002e
0020004900740073002000700072006f0070006f007200740069006f006e
007300200061006c006c006f00770020006800690067006800200069006d
007000610063007400200069006e002000740069006700680074006c0079
00200073006500740020006c0069006e006500730020006f006600200062
0069006700200061006e006400200073006d0061006c006c002000740065
0078007400200061006c0069006b0065002e002000430061006c00690062
00720069002700730020006d0061006e0079002000630075007200760065
007300200061006e006400200074006800650020006e0065007700200072
0061007300740065007200690073006500720020007400650061006d0020
0075007000200069006e0020006200690067006700650072002000730069
007a0065007300200074006f002000720065007600650061006c00200061
0020007700610072006d00200061006e006400200073006f006600740020
006300680061007200610063007400650072002e004d006900630072006f
0073006f00660074003a002000430061006c006900620072006900200042
006f006c006400560065007200730069006f006e00200035002e00370032
00430061006c0069006200720069002d0042006f006c006400430061006c
006900620072006900200069007300200061002000740072006100640065
006d00610072006b0020006f006600200074006800650020004d00690063
0072006f0073006f00660074002000670072006f007500700020006f0066
00200063006f006d00700061006e006900650073002e004c007500630028
006100730029002000640065002000470072006f006f0074006800740074
0070003a002f002f007700770077002e006d006900630072006f0073006f
00660074002e0063006f006d002f007400790070006f0067007200610070
00680079002f006300740066006f006e007400730068007400740070003a
002f002f0066006f006e007400660061006200720069006b002e0063006f
006d0059006f00750020006d006100790020007500730065002000740068
0069007300200066006f006e00740020006100730020007000650072006d
006900740074006500640020006200790020007400680065002000450055
004c004100200066006f00720020007400680065002000700072006f0064
00750063007400200069006e002000770068006900630068002000740068
0069007300200066006f006e007400200069007300200069006e0063006c
007500640065006400200074006f00200064006900730070006c00610079
00200061006e00640020007000720069006e007400200063006f006e0074
0065006e0074002e00200059006f00750020006d006100790020006f006e
006c0079002000280069002900200065006d006200650064002000740068
0069007300200066006f006e007400200069006e00200063006f006e0074
0065006e00740020006100730020007000650072006d0069007400740065
0064002000620079002000740068006500200065006d0062006500640064
0069006e00670020007200650073007400720069006300740069006f006e
007300200069006e0063006c007500640065006400200069006e00200074
00680069007300200066006f006e0074003b00200061006e006400200028
006900690029002000740065006d0070006f0072006100720069006c0079
00200064006f0077006e006c006f00610064002000740068006900730020
0066006f006e007400200074006f002000610020007000720069006e0074
006500720020006f00720020006f00740068006500720020006f00750074
007000750074002000640065007600690063006500200074006f00200068
0065006c00700020007000720069006e007400200063006f006e00740065
006e0074002e0068007400740070003a002f002f007700770077002e006d
006900630072006f0073006f00660074002e0063006f006d002f00740079
0070006f006700720061007000680079002f0066006f006e00740073002f
00640065006600610075006c0074002e0061007300700078a92032303132
204d6963726f736f667420436f72706f726174696f6e2e20416c6c205269
676874732052657365727665642e43616c696272692069732061206d6f64
65726e2073616e732073657269662066616d696c79207769746820737562
746c6520726f756e64696e6773206f6e207374656d7320616e6420636f72
6e6572732e204974206665617475726573207265616c206974616c696373
2c20736d616c6c20636170732c20616e64206d756c7469706c65206e756d
6572616c20736574732e204974732070726f706f7274696f6e7320616c6c
6f77206869676820696d7061637420696e2074696768746c792073657420
6c696e6573206f662062696720616e6420736d616c6c207465787420616c
696b652e2043616c696272692773206d616e792063757276657320616e64
20746865206e65772072617374657269736572207465616d20757020696e
206269676765722073697a657320746f2072657665616c2061207761726d
20616e6420736f6674206368617261637465722e4d6963726f736f66743a
2043616c6962726920426f6c6456657273696f6e20352e373243616c6962
72692d426f6c6443616c6962726920697320612074726164656d61726b20
6f6620746865204d6963726f736f66742067726f7570206f6620636f6d70
616e6965732e4c7563286173292064652047726f6f74687474703a2f2f77
77772e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374
666f6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f7520
6d617920757365207468697320666f6e74206173207065726d6974746564
206279207468652045554c4120666f72207468652070726f647563742069
6e207768696368207468697320666f6e7420697320696e636c7564656420
746f20646973706c617920616e64207072696e7420636f6e74656e742e20
596f75206d6179206f6e6c792028692920656d626564207468697320666f
6e7420696e20636f6e74656e74206173207065726d697474656420627920
74686520656d62656464696e67207265737472696374696f6e7320696e63
6c7564656420696e207468697320666f6e743b20616e6420286969292074
656d706f726172696c7920646f776e6c6f6164207468697320666f6e7420
746f2061207072696e746572206f72206f74686572206f75747075742064
657669636520746f2068656c70207072696e7420636f6e74656e742e6874
74703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f677261
7068792f666f6e74732f64656661756c742e6173707800>
<b10903b802f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c
1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb8
02f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802ed
b21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e
2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1f
b802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802
e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb2
1d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f
1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb8
02d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cf
b21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d121fb802cbb21d
121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1f
b802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802
c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb2
1d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f
1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb8
02b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1
b21c321fb802b0b21c321fb802afb21c331fb802aeb21c331fb802adb21c
331fb802acb21c331fb802abb21c331fb802aab21c311fb802a9b21c311f
b802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5b21c321fb802
a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c331fb802a0b2
1c331fb8029fb21c331fb8029eb21c331fb8029db21c331fb8029cb21c31
1fb8029bb21c311fb8029ab21c321fb80299b21c321fb80298b21c321fb8
0297b21c321fb80296b21c321fb80295b21c331fb80294b21c331fb80293
b21c331fb80292b21c331fb80291b21c331fb80290b21c331fb8028fb21c
331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8028bb21c321f
b8028ab21c321fb80289b21c321fb80288b21c331fb80287b21c331fb802
86b21c331fb80285b21c331fb80284b21c331fb80283b21c331fb80282b2
1b341fb80281b21b341fb80280b21b341fb8027fb21b341fb8027eb21b34
1fb8027db21b341fb8027cb21b341fb8027bb21b341fb8027ab21b341fb8
0279b21b341fb80278b21b341fb80277b21b341fb80276b21b341fb80275
b21b341fb80274b21b341fb80273b21b341fb80272b21b341fb80271b21b
341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8026db21a351f
b8026cb21a351fb8026bb21a351fb8026ab21a351fb80269b21a351fb802
68b21a351fb80267b21a351fb80266b21a351fb80265b21a351fb80264b2
1a351fb80263b21a351fb80262b21a351fb80261b21a351fb80260b21a35
1fb8025fb21a351fb8025eb21a351fb8025db21a351fb8025cb21a351fb8
025bb21a351fb8025ab21a351fb80259b219371fb80258b219371fb80257
b219371fb80256b219371fb80255b219371fb80254b219371fb80253b219
371fb80252b219371fb80251b219371fb80250b219371fb8024fb219371f
b8024eb219371fb8024db219371fb8024cb219371fb8024bb219371fb802
4ab219371fb80249b219371fb80248b219371fb80247b219371fb80246b2
19371fb80245b219371fb80244b219371fb80243b219371fb80242b21937
1fb80241b219371fb80240b219371fb8023fb219371fb8023eb219371fb8
023db219371fb8023cb219371fb8023bb219371fb8023ab219371fb80239
b218391fb80238b218391fb80237b218391fb80236b218391fb80235b218
391fb80234b218391fb80233b218391fb80232b218391fb80231b218391f
b80230b218391fb80301b2182e1fb8022fb218391fb8022eb218391fb802
2db218391fb8022cb218391fb8022bb218391fb8022ab218391fb80229b2
18391fb80228b218391fb80227b218391fb80226b218391fb80225b2173b
1fb80224b2173b1fb80223b217321fb80222b2173a1fb80221b2173b1fb8
0220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2173b1fb8021c
b2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b1fb80218b217
3b1fb80217b2173b1fb80216b2173b1fb80215b217321fb80214b2173a1f
b80213b2173b1fb80212b2173b1fb80211b2173b1fb80210b2173b1fb802
0fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb2173b1fb8020bb2
173b1fb8020ab2173b1fb80209b217321fb80208b217321fb80207b2173b
1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb80203b2173b1fb8
0202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2173b1fb801fe
b2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b1fb801fab217
3b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb801f6b2173a1f
b801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2b2173b1fb801
f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb2173b1fb801edb2
173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1fb801e9b2173b
1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801e5b216231fb8
01e4b216371fb801e3b216371fb801e2b216381fb801e1b216381fb801e0
b216431fb801dfb216441fb801deb216441fb801ddb216441fb801dcb216
451fb801dbb216461fb801dab216461fb801d9b216461fb801d8b216231f
b801d7b216231fb801d6b216381fb801d5b216431fb801d4b216431fb801
d3b216431fb801d2b216441fb801d1b216461fb801d0b216461fb801cfb2
16461fb801ceb216461fb801cdb216461fb801ccb216461fb801cbb21643
1fb801cab216231fb801c9b216231fb801c8b216371fb801c7b216371fb8
01c6b216381fb801c5b216421fb801c4b216431fb801c3b216441fb801c2
b216451fb801c1b216461fb801c0b216461fb801bfb216461fb801beb216
461fb801bdb216461fb801bcb216461fb801bbb216461fb801bab216371f
b801b9b216381fb801b8b216421fb801b7b216431fb801b6b216431fb801
b5b216431fb801b4b216441fb801b3b216441fb801b2b216441fb801b1b2
16451fb801b0b216451fb801afb216451fb801aeb216461fb801adb21646
1fb801acb216461fb801abb216461fb801aab216461fb801a9b215341fb8
01a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2154e1fb801a4
b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d1fb801a0b215
4e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8019cb215401f
b8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198b2154f1fb801
97b2154f1fb80196b215501fb80195b215521fb80194b215521fb80193b2
15521fb80192b215411fb80191b2154f1fb80190b215501fb8018fb21550
1fb8018eb215511fb8018db215521fb8018cb215521fb8018bb215521fb8
018ab214581fb80189b214591fb80188b2145c1fb80187b2145d1fb80186
b2144a1fb80185b2145b1fb80184b2145c1fb80183b214591fb80182b214
5d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c4e1fc10c4e1f
c00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561fae0b561fad0b
561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b561fa60b561f
a50b561fa40b561fa30b561fa20b561fa10b561fa00b561f9f0b561f9e0a
681f9a0a681f990a681f980a681f970a681f960a681f950a681f940a681f
930a681f920a681f910a681f9009681f8f09681f8e09681f8d09681f8c09
681f410902fc02fa0056001f02fb02fa0068001f017fb213321fb8017eb2
12371fb80174b212371fb80173b211421fb80172b211421fb80171b21142
1fb80170b211421fb8016fb211421fb8016eb211421fb8016db211421fb8
016cb211421fb8016bb211421fb8016ab211421fb8013cb211421fb8013b
b210421fb8013ab210421fb80139b210421fb80138b210421fb80137b210
421fb80136b210421fb80135b210421fb80134b210421fb80133b210421f
b80132b20f451fb80131b20f451fb80130b20f451fb80112b20f451fb801
11b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451fb8010db2
0e481fb8010cb20e481fb8010bb20e481fb8010ab20e481fb80109b20e48
1fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a
1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc
0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe0b561fbd0b56
1fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180b213321fb801
7ab211401fb80179b211421fb80178b211421fb80177b211421fb80176b2
11421fb80175b211421fb80143b211421fb80142b210421fb80141b21042
1fb80140b210421fb8013fb210421fb8013eb210421fb8013db20f451fb8
0115b20f451fb80114b20f451fb80113b20f451fb903030302b2401fa4be
030200b4030200c4030200030300b213321fb8017bb213321fb80153b212
371fb80152b211401fb80151b211401fb80150b211401fb8014fb211401f
b8014eb211401fb8014db211401fb8014cb211401fb8014bb211401fb801
4ab211401fb80149b211401fb80148b211401fb80147b211401fb80146b2
11401fb80145b211401fb80144b211401fb80122b211401fb80121b21042
1fb80120b210421fb8011fb210421fb8011eb210421fb8011db210421fb8
011cb210421fb8011bb210421fb8011ab210421fb80119b210421fb80118
b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc0f451ffb0f45
1ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e481ff40e481ff3
0d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a
1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc8
0c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b56
1fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fdb212371fb801
7db212371fb8017cb212371fb80169b2112e1fb80168b2112e1fb80167b2
11401fb80166b211401fb80165b211401fb80164b211401fb80163b21140
1fb80162b211401fb80161b211401fb80160b211401fb8015fb211401fb8
015eb211401fb8015db211401fb8015cb211401fb8015bb211401fb8015a
b211401fb80159b211401fb80158b211401fb80157b211401fb80156b211
401fb80155b211401fb80154b211401fb8012fb211401fb8012eb210421f
b8012db210421fb8012cb210421fb8012bb210421fb8012ab210421fb801
29b210421fb80128b210421fb80127b210421fb80126b210421fb80125b2
0f451fb80124b20f451fb80123b20f451fb80105b20f451fb80104b20f45
1fb80103b20f451fb80102b20f451fb80101b20e481fb8010040a20e481f
ff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c
4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f
83012e1f8248805581ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b
7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a7948775578ab
77550b77010c764875555475e475f4750314755475647574759475d475e4
7507a475b475c47503b8ffc0401275383b46807590750214757475020075
010fb8ffc04021750b0e467448725573ab725504723472023bf47201e072
01023072015072607202b8ffc0b372242846b8ffc0403572161a46107230
7240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6f
bf6f02406f090d466e486d55df6d0100bc02ff001002ff00c002ffb2030a
6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e675568ab675566
2e645565ab6455632e6255612e60555f2e5d555eab5d555c2e5a555bab5a
55592e58555703251f562e545555ab5455532e515552ab51554f2e4e554e
03251f4d2e4b554cab4b554a2e485549ab4855504801472e46554503361f
001f01001e01001e701e801ef01e040b601d701d02701de01df01d03701c
f01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f191f198f199f
19af19050f198f199f19030c7012801202701180110230114011d011e011
040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0e
cf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f0d1f0d40472f
0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f0c4f0c5f0c03
9f0c01400c262946ef0aff0a02400a242746ef09ff0902ff090100030120
01010001100120010308b8ffc0b301151f46b80100b316010501b80190b1
54532b2b4bb807ff524bb008505bb00188b02553b00188b040515ab00688
b000555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d
00421d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db1
160042592b5e73757373742b732b73742b2b73745e732b5e737475737475
5e73747573015e7374737475757473745e737473002b2b732b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b
732b2b73755f75755e732b2b2b5e7373732b7374752b5e732b2b5e732b2b
73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b185f5e00>
[6295 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 316 17 <0003008d00000436050e001e002b0038009fb10102435558b9001f0293b5
1a0b15150b00b8029cb22c2633b80279b20b1a27b80103b331310724b8ff
e8b40b0f014c24b801254009105134180b0f014c34b80129b24007540018
3f1a4ded2b3fed2b12392fed39012fed322fed11392f1239ed31301bb11a
27b80103b331310724b8ffe8b40b0f014c24b801254009105134180b0f01
4c34b80129b240075400183f1a4ded2b3fed2b12392fed3931305901140e
0423212226351134363321321e0215140e02071e0301342e022323113332
3e0213342e0223231133323e02043626435d707f4efea8212d2d21014577
a5713c182e432b375d4528feac1830493d859339442d16431e3a5a489cbe
374b371f01844570563e2813272c04682c2728517c542f534434100a324f
6a01df273e2916feb01b2f3ffdf92d47301afe90172d4300>NQPBAA+Calibri,Bold AddT42Char 
2 640 18 <0001004fffeb040c05230039008bb10102435558b21c002bbe02c7000e00
18016100210026ffe8b40b0f014c26b80160b2135304b8015ab73530180b
0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed012fedd4c4
31301bbc0018016100210026ffe8b40b0f014c26b80160b2135304b8015a
b73530180b0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed
31305925140e0623222e02353412363633321e0615140e0223222e022322
0e0215141e0233323e0233321e02040c03060a163f5b754485d69650589e
dd85366455441b0a0603040a0e090f2e4965464d79552c2f577b4d466649
2f0d0a0c0804c4192319121724211652a3f4a2a50100ae5a121d261b121c
261c1e2a1a0c232b233f75a66872a76c3521282008182b00>NQPBAA+Calibri,Bold AddT42Char 
2 934 38 <0001008dfffa0363050e002700b9b10102435558b10713b8029440160d1d
001e1d07280f014d07180c0d014c07100b014d07ba01570013fff0b60b01
4d13131906b8ffe0b30f014d06b8ffe8b40b0e014c06b8015bb440225119
5500183f3f1a4ded2b2b12392f2bed2b2b2b012f2fc41139ed3231301b40
1107280f014d07180c0d014c07100b014d07ba01570013fff0b60b014d13
131906b8ffe0b30f014d06b8ffe8b40b0e014c06b8015bb4402251195500
183f3f1a4ded2b2b12392f2bed2b2b2b31305901140e0223211121321e02
15140e02232111140e0223222e02351134363321321e020363050b0e09fe
59018d090e0b05050b0e09fe730c1f322726331e0d2d210261090e0b0504
a21e29180cfea40a18281e1e281a0bfe1e0b100b06060b100b04952c270b
192a>NQPBAA+Calibri,Bold AddT42Char 
2 1236 47 <0001008dfffa019505140015002ab10102435558b900000294b5400a1052
055500183f3f012f1a4ded31301bb31052055500183f3f31305925140e02
23222e023511343e0233321e021501950d1e322726331e0d0d1f32262732
1e0d240a100a06060a100a04c60a100a06060a100a00>NQPBAA+Calibri,Bold AddT42Char 
2 1740 94 <0001003fffe9038c0525004900bbb10102435558b900410297b524322432
0c1bb8029cb2000c2ebb012d0037000a012db61137113711163cb8ffe8b4
0b0f014c3cb8012d400c411b05295316180b0f014c16b80158b240055600
183f1a4ded2b3f123939ed2b1139392f2f10ed10ed012fd4ed1239392f2f
ed31301bbc002e012d0037000a012db61137113711163cb8ffe8b40b0f01
4c3cb8012d400c411b05295316180b0f014c16b80158b240055600183f1a
4ded2b3f123939ed2b1139392f2f10ed10ed31305901140e0223222e0435
343e0233321e0233323e0235342e0635343e0233321e0615140e0223222e
0223220e0215141e06038c4c82ae634373583b1a0b04090f0a0e33506f49
304c351c304d6268624d3045759f592e5c503e1407050203070d0b0b3046
5c372b402b152f4f6468644e300184669a6734161f221a312e1f2a1a0b21
2821172a3e262c3f312b303d5574515d8d5d2e0e181e140e17231a1d281a
0c1c211b1525341d2b3f312b303d5573>NQPBAA+Calibri,Bold AddT42Char 
2 4960 890 <0001fff9fe930402ff4d000d000fb500070af5044f003fed012fcd313001
1406232122263534363321321604021316fc4a1713131703b61613fef032
2b2a32322c2a>NQPBAA+Calibri,Bold AddT42Char 
2 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>NQPBAA+Calibri,Bold AddT42Char 
NQPBAA+Calibri,Bold /CharStrings get begin
/B 17 def
/C 18 def
/F 38 def
/I 47 def
/S 94 def
/underscore 890 def
end
NQPBAA+Calibri,Bold /Encoding get
dup 66 /B put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 83 /S put
dup 95 /underscore put
pop
end
%ADOEndSubsetFont
/VGUSFT+Calibri,Bold /NQPBAA+Calibri,Bold findfont ct_VMDictPut
/VGUSFT+Calibri,Bold*1 
[66{/.notdef}rp /B /C 2{/.notdef}rp /F 2{/.notdef}rp /I 9{/.notdef}rp 
/S 11{/.notdef}rp /underscore 160{/.notdef}rp]
VGUSFT+Calibri,Bold nf
VGUSFT+Calibri,Bold*1 [30.36 0 0 -30.36 0 0 ]msf
256.97 47.9711 mo
(FIC_BS)
[16.1819 10.2313 18.2466 17.3356 19.3698 0 ]xsh
90.227 91.1111 mo
99.6281 91.1111 li
99.6281 81.71 li
90.227 81.71 li
cp
.441932 .103243 .851316 .000457771 cmyk
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if

2 0 3 <> LLIAAA+Calibri AddT42Char 
2 7354 258 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>LLIAAA+Calibri AddT42Char 
2 7704 272 <0001005affed032003c900350089b11c00b8ffc0b310014d00b8ffe0b30d
014d00b8ffe8b40b014d0027b8ffe8b310014d27b8fff0b30f014d27b8ff
eeb30c014d27b8ffe8b30b014d27b8ffeab30d014d27b8020b400d2f0e01
0e19e71f400a0d481f24b80102b4134a03eb31b8ffc0b4090d48312cb801
06b1094d003ffdd42bed3ffdd42bed012f5de12b2b2b2b2bc42b2b2b3231
3025140e0623222e0235343e0233321e0615140623222e0223220615141e
0233323e0233321e020320020507193c4b582f61966535417199592b5144
3518090602120d0f273c553a777f21405d3c39563f2b0c070a0703a21119
110d19251d12407bb37585bf7a3b101a22180e131812271f212821b7ae57
83582b242b2308131d00>LLIAAA+Calibri AddT42Char 
2 9156 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>LLIAAA+Calibri AddT42Char 
2 13220 336 <00030035fe93038903c8003e004e005f00d04015122d47100f014d47080c
014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d3fb8ffe0
b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707b8ffe0b3
10014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040340b014d
0058100f014d58201012014c582a25400b12014c250f300703384ada0c53
e81515603803e93c482a2042d9384a5bd9204f003fed3fed12393fed1112
392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b1112173910
cd2b10cd2b2b2b10cd2b2b2b10cd31300114062323161615140e02232226
27060615141617171e0315140e0223222e0235343e023726263534363726
2635343e023332161721321601342623220e0215141633323e0213342627
270e0315141633323e020389130f81231c325d804e37631b12174136eb43
70522e346ba6716d99622c10213120312f32251f24345c814c29471f0110
1111fefe655d30472f17655b31482f17535f51e92029180984764b653e1b
0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e70553125
405934213e383319194c2c3d6026255d424d7a542d090821fef15c672038
492859661f3748fd5e3a3f0208192d29281541431d303e00>LLIAAA+Calibri AddT42Char 
2 14246 349 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>LLIAAA+Calibri AddT42Char 
2 14576 367 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>LLIAAA+Calibri AddT42Char 
2 14710 374 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>LLIAAA+Calibri AddT42Char 
2 15284 393 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>LLIAAA+Calibri AddT42Char 
2 15586 396 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>LLIAAA+Calibri AddT42Char 
2 15828 400 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>LLIAAA+Calibri AddT42Char 
3 510 410 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>LLIAAA+Calibri AddT42Char 
3 2904 455 <00010022fe94037c03bc00240052b9001bfff040350b014d371b01291b01
18180b014d261801260e360e022709011a400b014d3a1a0119380b014d3b
19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b5d2b015d
5d5d2b5d5d2b2103060623222e023713262627012634363633321e021701
33133e023332161614070233780631321a201102067c091003febf081024
1e1e22140905010103f8061122201c241106feb51011050c140e01390412
0a035c15180e0503080f0dfd2e02d6130b05050e1812>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/space 3 def
/a 258 def
/c 272 def
/e 286 def
/g 336 def
/i 349 def
/l 367 def
/n 374 def
/p 393 def
/r 396 def
/s 400 def
/t 410 def
/y 455 def
end
LLIAAA+Calibri /Encoding get
dup 32 /space put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six /seven /eight /nine 7{/.notdef}rp /A /.notdef 
/C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L 
/M /N /.notdef /P /.notdef /R /S /T 
/U 11{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef 
/g /.notdef /i 2{/.notdef}rp /l /.notdef /n /.notdef 
/p /.notdef /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
103.63 91.2711 mo
(replacing strategy)
[5.97207 8.60736 8.89813 3.86723 8.19672 7.28979 3.86723 8.89813 8.19653 3.86726 6.62247 5.73264 
5.90361 8.19672 5.73264 8.64159 7.99118 0 ]xsh
245.4 81.5711 mo
250.19 86.3711 li
245.4 91.1611 li
240.61 86.3711 li
cp
.719692 .439979 .027985 3.0518e-5 cmyk
f
245.4 81.5711 mo
250.19 86.3711 li
245.4 91.1611 li
240.61 86.3711 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
2 8854 282 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>LLIAAA+Calibri AddT42Char 
2 9478 296 <00010025fffa02860578003c0064b2161000b8ffe0b40b014d001bb8fff0
b30d014d1bb8fff0b40f10014c1bb8fff6b30c014d1bb8ffe8b30b014d1b
b801f9b2302a25b8ffd040121011014c250aed36471a26ed3048204c1048
003f3f3fed323fed012f2bc433f12b2b2b2bc42b33c4313001140e022322
2e0223220e02151533321e02151406232311140e0223222e023511232226
35343e02333335343e0233321e0402860405080607151e291b2534200ec9
080b0905120fc908132018182013087f101004080c087f23486d4a234224
0c0803050f13170e05090b091833513a6207111a132420fceb080b080404
080b0803152024131a11075d5e8756290d0f0c131b00>LLIAAA+Calibri AddT42Char 
2 15000 381 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>LLIAAA+Calibri AddT42Char 
3 2616 437 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/d 282 def
/f 296 def
/o 381 def
/u 437 def
end
LLIAAA+Calibri /Encoding get
dup 100 /d put
dup 102 /f put
dup 111 /o put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six /seven /eight /nine 7{/.notdef}rp /A /.notdef 
/C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L 
/M /N /.notdef /P /.notdef /R /S /T 
/U 11{/.notdef}rp /a /.notdef /c /d /e /f 
/g /.notdef /i 2{/.notdef}rp /l /.notdef /n /o 
/p /.notdef /r /s /t /u 3{/.notdef}rp /y 
134{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
254.21 91.2711 mo
(regard as one fault)
[5.97206 8.60736 7.99118 8.19672 5.97208 8.86392 3.86728 8.19672 6.862 3.64484 9.10345 8.89813 
8.64157 3.86728 5.25327 8.19672 8.91525 3.93567 0 ]xsh
397.62 91.1611 mo
407.205 91.1611 li
407.205 81.576 li
397.62 81.576 li
cp
.18497 .816068 .688869 .0602731 cmyk
f
1.4263 lw
397.62 91.1611 mo
407.205 91.1611 li
407.205 81.576 li
397.62 81.576 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LLIAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+Calibri gcheck setglobal} if
2 13982 346 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>LLIAAA+Calibri AddT42Char 
LLIAAA+Calibri /CharStrings get begin
/h 346 def
end
LLIAAA+Calibri /Encoding get
dup 104 /h put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGUSFS+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six /seven /eight /nine 7{/.notdef}rp /A /.notdef 
/C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L 
/M /N /.notdef /P /.notdef /R /S /T 
/U 11{/.notdef}rp /a /.notdef /c /d /e /f 
/g /h /i 2{/.notdef}rp /l /.notdef /n /o 
/p /.notdef /r /s /t /u 3{/.notdef}rp /y 
134{/.notdef}rp]
VGUSFS+Calibri nf
VGUSFS+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
411.26 91.2711 mo
(distinguish faults)
[8.89813 4.08969 6.62247 5.73264 3.86722 9.10349 7.99118 8.89813 4.08972 6.62244 8.89813 3.86728 
5.25327 8.19672 9.12061 3.93567 5.66418 0 ]xsh
gsave
50.4 456.261 mo
561.6 456.261 li
561.6 3.98108 li
50.4 3.98108 li
cp
eclp
51.218 455.461 mo
560.928 455.461 li
560.928 4.6911 li
51.218 4.6911 li
cp
1 /0 /CSD get_res sepcs
.149 sep
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/VGUSFT+Calibri,Bold*1 uf
/VGUSFT+Calibri,Bold uf
/NQPBAA+Calibri,Bold uf
/VGUSFS+Calibri*1 uf
/VGUSFS+Calibri uf
/LLIAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 102 1322 a Fq(\(a\))25 b(Caption)h(of)h(sub\014gure)d(1)
1277 1235 y @beginspecial 0 @llx 0 @lly 523 @urx 545
@ury 1591 @rwi @setspecial
%%BeginDocument: OFOT_our.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OFOT_our.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: niuxintao
%%CreationDate: 3/7/2014, 11:47:10 PM
%%BoundingBox: 0 0 523 545
%%HiResBoundingBox: 0 0 522.9569 544.5667
%%CropBox: 0 0 522.9569 544.5667
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 722 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-03-07T23:44:59+08:00"
   xmp:CreatorTool="Microsoft® Excel® 2013"
   xmp:ModifyDate="2014-03-07T23:44:59+08:00"
   pdf:Producer="Microsoft® Excel® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>xintao niu</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -544.567 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 544.567 li
522.957 544.567 li
522.957 0 li
cp
clp
[1 0 0 1 -45.3806 0 ]ct
51.229 539.724 mo
560.939 539.724 li
560.939 5.74432 li
51.229 5.74432 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
1.427 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
60.251 197.584 mo
60.251 494.374 li
153.26 197.584 mo
153.26 494.374 li
246.18 197.584 mo
246.18 494.374 li
339.11 197.584 mo
339.11 494.374 li
432.03 197.584 mo
432.03 494.374 li
524.85 197.584 mo
524.85 494.374 li
1 /0 /CSD get_res sepcs
.149 sep
@
98.234 261.194 mo
115.36 261.194 li
115.36 494.374 li
98.234 494.374 li
cp
284.08 324.894 mo
300.98 324.894 li
300.98 494.374 li
284.08 494.374 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.441932 .103243 .851316 .000457771 cmyk
f
524.85 494.374 mo
524.85 197.584 li
1 /0 /CSD get_res sepcs
.149 sep
@
524.85 494.374 mo
530.29 494.374 li
524.85 452.074 mo
530.29 452.074 li
524.85 409.604 mo
530.29 409.604 li
524.85 367.134 mo
530.29 367.134 li
524.85 324.894 mo
530.29 324.894 li
524.85 282.434 mo
530.29 282.434 li
524.85 239.964 mo
530.29 239.964 li
524.85 197.584 mo
530.29 197.584 li
@
60.251 494.374 mo
524.85 494.374 li
@
101 288.164 mo
112.416 288.164 li
112.416 276.748 li
101 276.748 li
cp
.18497 .816068 .688869 .0602731 cmyk
f
1.3699 lw
101 288.164 mo
112.416 288.164 li
112.416 276.748 li
101 276.748 li
cp
@
193.93 500.044 mo
205.346 500.044 li
205.346 488.628 li
193.93 488.628 li
cp
f
193.93 500.044 mo
205.346 500.044 li
205.346 488.628 li
193.93 488.628 li
cp
@
286.85 330.634 mo
298.266 330.634 li
298.266 319.218 li
286.85 319.218 li
cp
f
286.85 330.634 mo
298.266 330.634 li
298.266 319.218 li
286.85 319.218 li
cp
@
379.78 500.044 mo
391.196 500.044 li
391.196 488.628 li
379.78 488.628 li
cp
f
379.78 500.044 mo
391.196 500.044 li
391.196 488.628 li
379.78 488.628 li
cp
@
472.7 500.044 mo
484.116 500.044 li
484.116 488.628 li
472.7 488.628 li
cp
f
472.7 500.044 mo
484.116 500.044 li
484.116 488.628 li
472.7 488.628 li
cp
@
106.71 232.454 mo
114.24 239.994 li
106.71 247.524 li
99.176 239.994 li
cp
.719692 .439979 .027985 3.0518e-5 cmyk
f
106.71 232.454 mo
114.24 239.994 li
106.71 247.524 li
99.176 239.994 li
cp
@
199.63 232.454 mo
207.17 239.994 li
199.63 247.524 li
192.1 239.994 li
cp
f
199.63 232.454 mo
207.17 239.994 li
199.63 247.524 li
192.1 239.994 li
cp
@
292.56 423.334 mo
300.09 430.864 li
292.56 438.394 li
285.03 430.864 li
cp
f
292.56 423.334 mo
300.09 430.864 li
292.56 438.394 li
285.03 430.864 li
cp
@
385.48 486.804 mo
393.02 494.334 li
385.48 501.874 li
377.95 494.334 li
cp
f
385.48 486.804 mo
393.02 494.334 li
385.48 501.874 li
377.95 494.334 li
cp
@
478.41 402.094 mo
485.94 409.634 li
478.41 417.164 li
470.87 409.634 li
cp
f
478.41 402.094 mo
485.94 409.634 li
478.41 417.164 li
470.87 409.634 li
cp
@
1.427 lw
292.55 324.784 mo
292.07 331.754 li
283.46 331.754 li
1 /0 /CSD get_res sepcs
.349 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9ddb2dc000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c79665beb545c00008f60000095aa68656164ecde32e000000f640000
0036686865610dad0c0b00000f9c00000024686d7478a5d7427a00000fc0
00002fe06c6f6361ed74ce0600003fa000001e4e6d617870213625500000
5df0000000206e616d6519aa717b00005e1000000d3e707265706baf02fe
00006b5000002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
fb040600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d0000000100000005b852adc658555f0f3cf500190800
00000000bbeb7ccc00000000cbdab383fbfafd8b09ec07b6000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000008ca040e0000000000000000000001cf000004a1
002300000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000044400610000
00000000000000000000000000000000000004ec00ac0000000000000000
0000000003e800ac00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000004fc00ac0000000000000000020400ac000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000035d00ac000000000000
000000000000000000000000000006d700ac052a00ac0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
042200ac0000000000000000045800ac00000000000000000000000003ad
0047000000000000000000000000000000000000000003e6000f00000000
0000000000000000052200aa000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000003f40010
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000003cb006d00000000
00000000000000000000000000000000046500a100000000000000000000
0000038000a1000000000000000000000000000000000000000000000000
000000000000000000000000035000a10482006c00000000000000000000
000000000000047800a1000000000000000001ec00a10000000000000000
000000000000000000000000000000000000000001ec0011000000000000
00000000000000000000000000000000000002e000a10000000000000000
000000000000000000000000060600a1049100a100000000000000000000
0000000000000000000004aa006600000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000003c5
00a1000000000000000003ed00a1000000000000000000000000034f0049
00000000000000000000000000000000000000000359001c000000000000
000000000000048d009f0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000038300100000000000000000
00000000000000000000000000000000000000000000000003d5005c0000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000362005a000000000000
0000000000000000000000000000076f005a000000000601005a00000000
0434006000000000000000000000000003fb005d00000000000000000000
000000000000000000000000000000000000000000000000000002710025
000000000000000004ab0025069b002508d50025043c0025000000000000
000000000000000000000000000000000000000000000000000000000000
067600250000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
043c00250000000000000000000000000676002504ed0025000000000000
00000728002503c400350000000000000000000000000000000004340060
0000000000000000000000000000000004340099000000000000000001d6
008500000000000000000000000000000000000000000000000000000000
0000000001d6009900000000000000000000000000000000000000000000
0000000000000000000001d6009900000000000000000000000000000000
000000000000000004340099000000000000000000000000000000000000
0000000000000438005a0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000043400990000
00000000000002ca00990000000000000000000000000321005100000000
0000000000000000000000000000000005ae005100000000000000000000
000002ae002100000000000000000000000004e600210475002100000000
000000000000000000000000000000000000000000000000000000000475
002105130021074b002106d9002100000000000000000000000000000000
0000000000000000000000000000000006d9002104340094000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000039f0022000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002ac004400000000024e
004402e5004802b8004701c100240297002a02e9006c0163006100000000
00000000015e006c0000000002e6006c02e6004502e5006c0000000001f6
006c0230004201e3002302e9006c0000000000000000000000000286001f
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001d6000001ce000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000029b010a000000000000
000000000000000000000000000000000000026000ed0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000494005f02cb002303ec0062
03ec005104550022000000000436007e000000000436006300000000040e
0048040e00ae040e0072040e0067040e002000000000040e006b00000000
040e00520000000004430067028d00190381005c0373005903ac00260000
000003b7006e0000000003b5004b00000000039f0050039f008d039f0065
039f0062039f003a00000000039f006100000000039f0051000000000494
005f02cb002303ec006203ec005104280022000000000436007e00000000
0436006300000000040e0048040e00ae040e0072040e0067040e00300000
0000040e006b00000000040e0052000000000321004801f8002302b0004b
02ad004102db00250000000002df005b0000000002e1004b000000000000
0000000000000000000000000000000000000321004801f8002302b0004b
02ad004102db00250000000002df005b0000000002e1004b000000000000
000000000000000000000000000000000000029d003801f500310252003c
0249002d024a00140000000002510030000000000257002500000000029d
003801f500310252003c0249002d024a0014000000000251003000000000
025700250000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000002f5001c000000000306005a034b
008e02a8008e0000000000000000035b008e01a6008e0000000000000000
025b008e046d008e0375008d0000000002d8008e00000000029b00570280
004602570004031400570000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002f5001c000000000000000000000000034b008e
02a8008e0000000000000000035b008e01a6008e0000000000000000025b
008e046d008e0375008d00000000000000000000000002d8008e029b0057
025700040314005700000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00a100a100a100a1012f012f012f012f012f012f012f012f012f012f012f
012f012f012f01ac01ac01ac01ac01ac01ac021902190219021902950295
029502950295029502950295029502950295029502950295029502950335
033503350380038003800380038003800380038003800380038003800380
0380038003ce03ce03ce03ce03ce03ce047b051605160516051605160516
051605160516051605160516051605160516051605160516058f058f058f
063a063a063a063a070c070c070c070c070c070c077307730773077307fe
07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe
07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe0864086408640864
086408640864086408640864086408640864086408ca08ca08ca08ca08ca
08ca090c090c090c090c0965096509650965096509650965096509650965
09b20a290a290a290a290a290a870a870a870ab30ab30ab30ab30ab30ab3
0ab30ab30abe0abe0abe0abe0abe0abe0abe0af30af30af30af30af30af3
0b690bd50bd50bd50bd50bd50bd50c230c230c230c230c230c230c230c23
0c230c230c230c230c7a0c7a0c7a0cf40cf40cf40cf40d7a0d7a0d7a0d7a
0d7a0d7a0dbb0dbb0dbb0dbb0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b
0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e5d0e5d0e5d0e5d0e5d0e5d
0e5d0e5d0e5d0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c
0f0c0f0c0f980f980f980f980f980f98106c106c114b114b11e211e211e2
11e2128312831283128312831283128312831283128313061306130613ae
146b156e160116011601160116011601160116011601160116da16da16da
16da16da16da16da16da16da16da16da16da16da16da16da176217621762
1762182d18db18db18db19d21abf1abf1abf1abf1abf1b4f1b4f1b4f1b4f
1b4f1bd31bd31bd31c4c1c4c1c4c1c4c1c4c1c4c1c4c1c4c1c4c1c781c78
1c781c781c781c781c781c781c781cbb1cbb1cbb1cbb1cbb1cbb1cbb1d4c
1d4c1d4c1d4c1d4c1d4c1d4c1dda1dda1dda1dda1dda1dda1dda1dda1dda
1dda1dda1dda1e711e711e711eea1eea1eea1eea1fb01fb01fb01fb01fb0
1fb020af20af20af20af212b212b212b212b21d821e421e421e421e421e4
21e421e421e421e4225a230c2401240d240d240d240d240d240d240d240d
240d24cc255c255c255c255c255c255c255c255c255c255c255c255c255c
255c255c255c255c255c25c125c125c125c125c125c125c125c125c125c1
25c125c126372637268d26f3275727b8287b28d8291c291c291c29482948
299e29e72a522a522aa52b1d2b772bd02bd02bd02bd02c272c272c272c27
2c272c272c272c272c272c272c272c272c272c272c272c272c272c272c27
2c272c272c272c272c272c272c272c272c272c272c272c272c272c272c27
2c272c272c272c272c272c272c272c272c272c272c272c272c272c272c27
2c272c272c272c272c272c272c272c272c272c4b2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2cb42cb42cb42cb42cb42cb42cb42d022d022d022d022d022d02
2d022d022d022d022d022d022d022d022d022d022d022d022d022d022d02
2d022d022d022d022d022d022d022d022d022d022d022d022d022d022d02
2d022d022d022d022d022d022d022d022d022d022d022d022d022d022d02
2d022d022d022d022d022d022d022d022d022d022d022d022d022d022d02
2d022d022d022d022d482d482d482d482d482d482d482d482d482d482d48
2d482d482d482d482d482d482d482d482d482d482d482d482d482d482d48
2d482d482d482d482d482d482d482d482d482d962dd92e502eef2f512f51
2fcd2fcd3054305430a230fe316c3208326a326a33183318343e343e348c
34cf354135db3640364036bb36bb374c374c379937f237fa380238653865
38dc38dc3961396139b139f33a6b3b083b6d3b6d3b753b753b7d3b7d3c30
3ce73d873e7b3f403f403f483f483f503f503f593f623f6b3f743f7d3f7d
3f863f863f8f3f8f3f8f3f8f3f8f3f8f3f8f3fda401d407f410c416d416d
41e541e5426b426b426b426b426b426b426b42b642f8435f43f744594459
44cd44cd45554555455e45674570457945824582458b458b459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
459445944594459445944594459445944594459445944594459445944594
4594459c459c45ff4607460f460f460f4617461f461f461f4627462f4637
4637463f463f464746c646ce46d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d646d646d646d646d646d646d646d646d6
46d646d646d646d646d646d646d64722472247224722476447bd47bd47bd
481f484d484d484d488548f6496649664966496649ba4a404a834ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad54ad5
4ad54ad54ad54ad54ad54ad54ad54ad50000000100000f26009600050078
000300020010002f0065000011902410000200010000002d022200000003
00000000006400000000000300000001000e00640000000300000002000e
03040000000300000003002403120000000300000004000e006400000003
00000005001803360000000300000006000e006400000003000000070076
034e0000000300000008002a000e0000000300000009002003c400000003
0000000a02a00064000000030000000b005603e4000000030000000c002a
043a000000030000000d02980464000000030000000e006c06fc00010000
000000000032076800010000000000010007079a00010000000000020007
08ea0001000000000003001208f100010000000000040007079a00010000
00000005000c090300010000000000060007079a0001000000000007003b
090f00010000000000080015076f00010000000000090010094a00010000
0000000a0150079a000100000000000b002b095a000100000000000c0015
0985000100000000000d014c099a000100000000000e00360ae600030001
04090000006400000003000104090001000e00640003000104090002000e
03040003000104090003002403120003000104090004000e006400030001
04090005001803360003000104090006000e006400030001040900070076
034e0003000104090008002a000e0003000104090009002003c400030001
0409000a02a00064000300010409000b005603e4000300010409000c002a
043a000300010409000d02980464000300010409000e006c06fc00a90020
00320030003100320020004d006900630072006f0073006f006600740020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e00430061006c006900620072006900200069007300200061
0020006d006f006400650072006e002000730061006e0073002000730065
007200690066002000660061006d0069006c007900200077006900740068
00200073007500620074006c006500200072006f0075006e00640069006e
006700730020006f006e0020007300740065006d007300200061006e0064
00200063006f0072006e006500720073002e002000490074002000660065
0061007400750072006500730020007200650061006c0020006900740061
006c006900630073002c00200073006d0061006c006c0020006300610070
0073002c00200061006e00640020006d0075006c007400690070006c0065
0020006e0075006d006500720061006c00200073006500740073002e0020
004900740073002000700072006f0070006f007200740069006f006e0073
00200061006c006c006f00770020006800690067006800200069006d0070
00610063007400200069006e002000740069006700680074006c00790020
0073006500740020006c0069006e006500730020006f0066002000620069
006700200061006e006400200073006d0061006c006c0020007400650078
007400200061006c0069006b0065002e002000430061006c006900620072
0069002700730020006d0061006e00790020006300750072007600650073
00200061006e006400200074006800650020006e00650077002000720061
007300740065007200690073006500720020007400650061006d00200075
007000200069006e0020006200690067006700650072002000730069007a
0065007300200074006f002000720065007600650061006c002000610020
007700610072006d00200061006e006400200073006f0066007400200063
00680061007200610063007400650072002e0052006500670075006c0061
0072004d006900630072006f0073006f00660074003a002000430061006c
006900620072006900560065007200730069006f006e00200035002e0037
003200430061006c00690062007200690020006900730020006100200074
0072006100640065006d00610072006b0020006f00660020007400680065
0020004d006900630072006f0073006f00660074002000670072006f0075
00700020006f006600200063006f006d00700061006e006900650073002e
004c007500630028006100730029002000640065002000470072006f006f
00740068007400740070003a002f002f007700770077002e006d00690063
0072006f0073006f00660074002e0063006f006d002f007400790070006f
006700720061007000680079002f006300740066006f006e007400730068
007400740070003a002f002f0066006f006e007400660061006200720069
006b002e0063006f006d0059006f00750020006d00610079002000750073
00650020007400680069007300200066006f006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
0065002000450055004c004100200066006f007200200074006800650020
00700072006f006400750063007400200069006e00200077006800690063
00680020007400680069007300200066006f006e00740020006900730020
0069006e0063006c007500640065006400200074006f0020006400690073
0070006c0061007900200061006e00640020007000720069006e00740020
0063006f006e00740065006e0074002e00200059006f00750020006d0061
00790020006f006e006c0079002000280069002900200065006d00620065
00640020007400680069007300200066006f006e007400200069006e0020
0063006f006e00740065006e00740020006100730020007000650072006d
00690074007400650064002000620079002000740068006500200065006d
00620065006400640069006e006700200072006500730074007200690063
00740069006f006e007300200069006e0063006c00750064006500640020
0069006e0020007400680069007300200066006f006e0074003b00200061
006e006400200028006900690029002000740065006d0070006f00720061
00720069006c007900200064006f0077006e006c006f0061006400200074
00680069007300200066006f006e007400200074006f0020006100200070
00720069006e0074006500720020006f00720020006f0074006800650072
0020006f0075007400700075007400200064006500760069006300650020
0074006f002000680065006c00700020007000720069006e007400200063
006f006e00740065006e0074002e0068007400740070003a002f002f0077
00770077002e006d006900630072006f0073006f00660074002e0063006f
006d002f007400790070006f006700720061007000680079002f0066006f
006e00740073002f00640065006600610075006c0074002e006100730070
0078a92032303132204d6963726f736f667420436f72706f726174696f6e
2e20416c6c205269676874732052657365727665642e43616c6962726920
69732061206d6f6465726e2073616e732073657269662066616d696c7920
7769746820737562746c6520726f756e64696e6773206f6e207374656d73
20616e6420636f726e6572732e204974206665617475726573207265616c
206974616c6963732c20736d616c6c20636170732c20616e64206d756c74
69706c65206e756d6572616c20736574732e204974732070726f706f7274
696f6e7320616c6c6f77206869676820696d7061637420696e2074696768
746c7920736574206c696e6573206f662062696720616e6420736d616c6c
207465787420616c696b652e2043616c696272692773206d616e79206375
7276657320616e6420746865206e65772072617374657269736572207465
616d20757020696e206269676765722073697a657320746f207265766561
6c2061207761726d20616e6420736f6674206368617261637465722e5265
67756c61724d6963726f736f66743a2043616c6962726956657273696f6e
20352e373243616c6962726920697320612074726164656d61726b206f66
20746865204d6963726f736f66742067726f7570206f6620636f6d70616e
6965732e4c7563286173292064652047726f6f74687474703a2f2f777777
2e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374666f
6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f75206d61
7920757365207468697320666f6e74206173207065726d69747465642062
79207468652045554c4120666f72207468652070726f6475637420696e20
7768696368207468697320666f6e7420697320696e636c7564656420746f
20646973706c617920616e64207072696e7420636f6e74656e742e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e68747470
3a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f6772617068
792f666f6e74732f64656661756c742e61737078000000>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[16225 16301 5791 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 14592 1005 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>PBAAAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/one 1005 def
end
PBAAAA+Calibri /Encoding get
dup 49 /one put
pop
end
%ADOEndSubsetFont
/VGICLC+Calibri /PBAAAA+Calibri findfont ct_VMDictPut
/VGICLC+Calibri*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
101.59 259.264 mo
(11)
[-7.77603 0 ]ysh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
3 14234 1004 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/zero 1004 def
end
PBAAAA+Calibri /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[48{/.notdef}rp /zero /one 206{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
204.77 483.234 mo
(0)sh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
3 9936 972 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>PBAAAA+Calibri AddT42Char 
3 16176 1012 <ffff0052ffed03ba0521020603cc0000>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/eight 1012 def
end
PBAAAA+Calibri /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[48{/.notdef}rp /zero /one 6{/.notdef}rp /eight 199{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
276.46 335.874 mo
(8)sh
VGICLC+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
390.65 483.234 mo
(0)sh
VGICLC+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
483.58 483.234 mo
(0)sh
VGICLC+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
135.38 290.364 mo
(10)
[-7.77603 0 ]ysh
VGICLC+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
228.34 498.494 mo
(0)sh
VGICLC+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
321.26 328.884 mo
(8)sh
VGICLC+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
414.22 498.494 mo
(0)sh
VGICLC+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
507.14 498.494 mo
(0)sh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
3 14958 1006 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/two 1006 def
end
PBAAAA+Calibri /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[48{/.notdef}rp /zero /one /two 5{/.notdef}rp /eight 199{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
137.28 247.964 mo
(12)
[-7.77603 0 ]ysh
VGICLC+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
230.23 247.964 mo
(12)
[-7.77606 0 ]ysh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
3 15278 1007 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/three 1007 def
end
PBAAAA+Calibri /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[48{/.notdef}rp /zero /one /two /three 4{/.notdef}rp /eight 199{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
323.16 434.894 mo
(3)sh
VGICLC+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
416.11 498.494 mo
(0)sh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
3 15766 1008 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/four 1008 def
end
PBAAAA+Calibri /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 3{/.notdef}rp /eight 
199{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
509.04 413.704 mo
(4)sh
gsave
51.24 539.464 mo
560.76 539.464 li
560.76 5.70428 li
51.24 5.70428 li
cp
eclp
VGICLC+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
540.84 499.284 mo
(0)sh
grestore
gsave
51.24 539.464 mo
560.76 539.464 li
560.76 5.70428 li
51.24 5.70428 li
cp
eclp
VGICLC+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
540.84 456.884 mo
(2)sh
grestore
gsave
51.24 539.464 mo
560.76 539.464 li
560.76 5.70428 li
51.24 5.70428 li
cp
eclp
VGICLC+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
540.84 414.474 mo
(4)sh
grestore
gsave
51.24 539.464 mo
560.76 539.464 li
560.76 5.70428 li
51.24 5.70428 li
cp
eclp
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
3 9588 970 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>PBAAAA+Calibri AddT42Char 
3 16160 1010 <ffff006bffed03bd0520020603ca0000>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/six 1010 def
end
PBAAAA+Calibri /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /.notdef /six 
/.notdef /eight 199{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
540.84 372.064 mo
(6)sh
grestore
gsave
51.24 539.464 mo
560.76 539.464 li
560.76 5.70428 li
51.24 5.70428 li
cp
eclp
VGICLC+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
540.84 329.654 mo
(8)sh
grestore
gsave
51.24 539.464 mo
560.76 539.464 li
560.76 5.70428 li
51.24 5.70428 li
cp
eclp
VGICLC+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
540.84 287.244 mo
(10)
[8.68805 0 ]xsh
grestore
gsave
51.24 539.464 mo
560.76 539.464 li
560.76 5.70428 li
51.24 5.70428 li
cp
eclp
VGICLC+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
540.84 244.864 mo
(12)
[8.68805 0 ]xsh
grestore
gsave
51.24 539.464 mo
560.76 539.464 li
560.76 5.70428 li
51.24 5.70428 li
cp
eclp
VGICLC+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
540.84 202.454 mo
(14)
[8.68805 0 ]xsh
grestore
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 322 4 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>PBAAAA+Calibri AddT42Char 
2 606 18 <00010061fff0040c051e00390062b31c003b2bb8ffe8b310014d2bb8fff0
b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b014d2bbe
0233000e0018012f00210026012cb2135304bb012a00350030012eb10956
003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c4313025140e0623222e02
35343e0233321e0615140e0223222e0223220e0215141e0233323e023332
1e02040c02050814405f7b497ecb8f4d5396d17f386a5a461b0805030408
0b080e324f714f568d64373563905b4d7351340f070a0603b71018120e14
29271b54a4f19da1fcaf5c15202a1b0e131a12141c1309272f274586c17c
7bbd7f41262f2606111e>PBAAAA+Calibri AddT42Char 
2 1074 28 <000100ac0000037c050e002c0076b11a27b8ffe8b310014d27b8fff0b30f
014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d27b80211
400909132013200009001ab80108400d802601c02601d0260126260619b8
010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f2f123939
2f2f10e12b2b2b2b2b32313025140e0223212226351134363321321e0215
140e0223211121321e0215140e0223211121321e02037c040a0d08fd9317
2929170266080d080505080d08fe0601b2080d090404090d08fe4e020108
0d0a0447121b12081f270482271f08121b14121b1108fe6a09101c13121a
1007fe3108111b00>PBAAAA+Calibri AddT42Char 
2 2846 90 <000200acfffa040b050e003600440091401e102e1137080b014d37100f01
4d37100c0d014c371810014d37180b014d37b80233b7294010014d293f11
b8fff0b310014d11b8fff0b30f014d11b8fff0b30d014d11b8fff6b30c01
4d11b8ffe8b30b014d11b80211b21c2e10b80108b67040014040173db801
0bb5215117550555003f3f3fed12392f5ded39012fe12b2b2b2b2b32d42b
e12b2b2b2b2b123939313025140e0223222e0227032e03232311140e0223
222e023511343633213216171e0315140e02071e03171316160134262726
2623231133323e02040b0614241e1a21140b0477152d3e543b7309132119
192114082917011331411a4b734e2723425c3920342d2814740e08fefd44
50193f3391a84463421f1a080c08040409100c013134573f23fdd9080c07
0505070c0804ae271f05030d38566f4341674f3a140e2b3c4e31fee3241d
03854c69170706fe4c213b50>PBAAAA+Calibri AddT42Char 
2 3608 100 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>PBAAAA+Calibri AddT42Char 
2 3814 104 <000100aaffed04790514002b0099401d602d01201810014d20100f014d20
100d014d200a0c014d20180b014d20b802104011004015014d004013014d
004011014d0016b8ffe8b310014d16b8fff0b30f014d16b8fff0b30d014d
16b8fff6b30c014d16b8ffe8b30b014d16ba0210000affc0b315014d0ab8
ffc0400913014d0a265210521bb80129b10556003fed3f3f012f2b2be12b
2b2b2b2bd42b2b2be12b2b2b2b2b31305d01140e0223222e023511343e02
33321e021511141e0233323e023511343e0233321e021504794580b8756b
b07e440814201a182213082c5375494b75512b081421191821130901de76
b980423e79b6770323080c070505070c08fcf25a86592d2c588257031708
0c070505070c0800>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/A 4 def
/C 18 def
/E 28 def
/R 90 def
/T 100 def
/U 104 def
end
PBAAAA+Calibri /Encoding get
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 82 /R put
dup 84 /T put
dup 85 /U put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /.notdef /six 
/.notdef /eight 8{/.notdef}rp /A /.notdef /C /.notdef /E 
12{/.notdef}rp /R /.notdef /T /U 170{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
63.768 518.514 mo
(ACCURATE)
[11.1624 10.5041 10.5041 12.0811 10.504 11.1624 9.79967 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 2294 69 <000100acfffa047e0511003d0085b3270f0f14b8ffe8b310014d14b8ffe8
b30f014d14b8ffe8b30d014d14b8fff0b30c014d14b8ffe8b30b014d14b8
0211401e1e0a2e2e321810014d32180f014d32180d014d32100c014d3218
0b014d32b802114010001e38520a2e0f270419225119550654003f3f3f12
17393f012fd4e12b2b2b2b2b32113310e12b2b2b2b2b322f33313025140e
022323222e0227012626272316161511140e0223222e0235113436333332
1e0217011e03173326263511343e0233321e0215047e0d151a0d371a2723
2315fe6820411c02020208131f18181f12082c1a521d271f1d11013a1d36
32311801020108131f191620120847141c12080b1d322702e0397d3b4896
4afcf3070d070505070d0704aa28220a17291ffdc83463605d2f4fab4f02
be070c090404090c0700>PBAAAA+Calibri AddT42Char 
2 2604 87 <000200acfffa03c7050e001c00290078b12406b8ffe8b310014d06b8fff0
b30f014d06b8fff0b30d014d06b8fff6b30c014d06b8ffe8b30b014d06b8
02114017111d1810014d1d100f014d1d100c0d014c1d200b014d1db80232
b2001125b8010ab306060c23b8010bb315510c55003f3fed12392fed012f
d4e12b2b2b2b10e12b2b2b2b2b32313001140e02232311140e0223222e02
351134363321321e0407342e0223231133323e0203c74077ad7893091321
19192114082a1a01152a4d696d4c29b53b575d2c9f9b4e6746240393619c
6e3cfe2e080c070505070c0804aa282207173f5c79574f6a340efdf92847
6300>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/N 69 def
/P 87 def
end
PBAAAA+Calibri /Encoding get
dup 78 /N put
dup 80 /P put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /.notdef /six 
/.notdef /eight 8{/.notdef}rp /A /.notdef /C /.notdef /E 
8{/.notdef}rp /N /.notdef /P /.notdef /R /.notdef /T 
/U 170{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
167.66 518.514 mo
(PARENT)
[10.2743 11.193 10.504 9.8304 12.1117 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 856 24 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>PBAAAA+Calibri AddT42Char 
2 1322 44 <000100acfffa04500514002f00b8b43f3101230cb8ffe8b310014d0cb8ff
f0b30f014d0cb8fff0b30d014d0cb8fff6b30c014d0cb8ffe8b30b014d0c
b80211401c17240b1810014d0b100f014d0b100d014d0b0a0c014d0b180b
014d0bb802104017004015014d004013014d00401011014c00400c014d00
17b8ffc0b315014d17b8ffc0b613014d172a5224b8012c400fc00c01d00c
010c0c121d5212550555003f3f3f12392f5d71ed3f012f2b2bd42b2b2b2b
e12b2b2b2b2b3210e12b2b2b2b2b3231305d25140e0223222e0235112111
140e0223222e023511343e0233321e0215112111343e0233321e02150450
081421181a201408fdb308142119182214080814221819211408024d0814
201a182114081a080c070505070c08023efdc2080c070505070c0804da08
0c070505070c08fdfa0206080c070505070c0800>PBAAAA+Calibri AddT42Char 
2 1642 47 <000100acfffa0158051400150050b73f174f17af170300b8ffe8b310014d
00b8fff0b30f014d00b8fff0b30d014d00b8fff6b30c014d00b8ffe8b30b
014d00ba0211000affc0b715014d0a10520555003f3f012f2be12b2b2b2b
2b31305d25140e0223222e023511343e0233321e02150158081421191822
140809152117192114081a080c070505070c0804da080c070505070c0800
>PBAAAA+Calibri AddT42Char 
2 1792 62 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/D 24 def
/H 44 def
/I 47 def
/L 62 def
end
PBAAAA+Calibri /Encoding get
dup 68 /D put
dup 72 /H put
dup 73 /I put
dup 76 /L put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /.notdef /six 
/.notdef /eight 8{/.notdef}rp /A /.notdef /C /D /E 
2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef /N /.notdef 
/P /.notdef /R /.notdef /T /U 170{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
251.93 518.514 mo
(CHILDREN)
[10.5041 11.8668 6.15543 8.66656 11.6219 10.504 9.79977 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 1948 68 <000100acfffa062b050e003c00ac4010603e703e020d3030172f2f0a2e18
181ab8ffe8b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b3
0c014d1ab8ffe8b30b014d1ab80211401e24310c0c0a1810014d0a100f01
4d0a100d014d0a0a0c014d0a180b014d0aba02110000ffc040190b014d00
2436510b18170d2f18312e061f28511f5512550555003f3f3f3f12173911
333f012fd42be12b2b2b2b2b32113310e12b2b2b2b2b32113311393d2f33
33113331305d25140e0223222e02351123010e0323222e0227012311140e
0223222e02351134363333321e02170133013e033333321e0215062b0814
1f191721130802fe33030b151d14151e140b02fe47010814201918201307
2c1b68203024180901770501860b1a1f26196d0f1b130c1a080c07050507
0c080467fb94070a070304070a06046cfb99080c070505070c0804a62a24
0c1a281bfc5703a61e2a190b09131d15>PBAAAA+Calibri AddT42Char 
2 3188 94 <00010047ffed03630521004900e7b90041ffe8b40f10014c41b8fff0b30d
014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d41b8022c
402b32401314014c324011014d243224320c1b180f10014c1b100d014d1b
1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d00b8ffc0
b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb0127003700
0a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c3711371116
3cb8010cb5411b05295316b80129b10556003fed3f123939ed1139392f2f
2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b2be12b2b
2b2b2b313001140e0223222e0435343e0233321e0233323e0235342e0635
343e0233321e0615140e0223222e0223220e0215141e0603634377a15d41
6f573b170b04080c080e3350714a385d43243252696e6852333b6991542b
574d3c1306040203060b070b2f445d3a3650341a32536a6e6a5333016b5b
8e633216202218251f161d12072228231e375033374e3b31333e54714f51
7f562d0f191f130b111813121c13091c231d1d304225364e3c32333d5371
>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/M 68 def
/S 94 def
end
PBAAAA+Calibri /Encoding get
dup 77 /M put
dup 83 /S put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /.notdef /six 
/.notdef /eight 8{/.notdef}rp /A /.notdef /C /D /E 
2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N /.notdef 
/P /.notdef /R /S /T /U 170{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
365.42 518.514 mo
(MISS)
[15.2966 6.1554 9.34033 0 ]xsh
VGICLC+Calibri*1 [15.312 0 0 -15.312 0 0 ]msf
427.99 518.514 mo
(REDUNDANT)
[10.504 9.79977 11.6219 12.0811 12.0811 11.6219 11.1624 12.0811 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+Calibri,Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Calibri,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc0ad754000000cc000000606376
74202f4935490000012c000006086670676da1ea42ac0000073400000913
676c79669b40d417000081ec000011a068656164ecbf33e5000010480000
0036686865610d8d0bf00000108000000024686d74785fc809d7000010a4
00002fde6c6f6361211c1d4c0000408400001e4e6d6178701c0216490000
5ed4000000206e616d65de46508300005ef400000d5c70726570c7f0742e
00006c500000159c676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e00002ff4000acff00000001000000004d53202000200000
1d400600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b140465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
00000005b85237fbbba35f0f3cf50019080000000000bbeb7ccc00000000
cbdab477fbdafd8d09ec07c5000100090002000000000000000100000600
fe0001c40aa0fbdafa8609ec0001000000000000000000000000000008c9
040e00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000003ac008d000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000006fe008d000000000000000000000000000000000000000000000000
056900500000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003f6000c00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000491008600000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
035800860000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0648008600000000000000000000000000000000000000000000000004da
005500000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000425
008600000000000000000000000000000000000000000000000000000000
0000000000000000037b001b000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000044b004b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000002d8007e0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002f5003a000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000200005a00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000029b00e6000000000000000000000000000000000000
000000000000026900cf0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000382007900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000029200780000
00000000000000000000000000000000000000000000049a007800000000
03a100550000000000000000000000000000000002b0001e000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000049a0078000000000000
000003a1005500000000000000000000000002b0001e0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e0135013501350135013501350135013501350135013501350135
013501350135013501350135013501350135013501350135013501350135
0135013501f901f901f901f901f901f901f9026c026c026c026c026c026c
026c026c026c026c026c026c026c026c026c026c026c026c026c026c026c
026c026c026c026c02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb
02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb
02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb
02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb03100310031003100310
031003100310031003100310031003100310035f035f035f035f035f035f
035f035f035f035f035f035f035f035f035f035f035f035f035f035f035f
035f035f035f035f035f035f035f035f035f03d503d503d503d503d503d5
03d504230423042304230423042304230423042304230423042304230423
042304a004a004a004a004a004a004a004a004a004a004e004e004e004e0
04e004e004e004e004e004e004e004e004e004e004e004e004e004e004e0
04e004e004e004e004e004e004e004e004e004e004e004e004e004e004e0
04e004e004e004e004e004e004e004e004e004e004e004e004e004e004e0
04e004e004e004e004e004e0057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
057c057c057c057c057c057c057c057c057c057c057c057c057c057c057c
05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb
05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb
05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb
05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb
05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb05fb0661
066106610661066106610661066106610661066106610661066106b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b406b406b406b406b406b406b40702070207020702
070207020702074f074f074f074f074f074f074f074f074f074f074f074f
074f074f074f074f074f074f074f074f074f074f074f074f074f074f074f
074f074f074f074f074f074f074f074f074f074f074f074f074f074f074f
074f074f074f074f074f074f074f074f074f074f074f074f074f074f074f
074f074f074f074f074f074f074f074f074f074f074f074f074f079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
079e079e079e079e079e079e079e079e079e079e079e079e079e079e079e
07df07df07df07df07df07df07df07e707e707ef07ef07ef07ef07ef07f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f707f7
07f707f707f707f707f707f707f707f707f707f707f707f707f707f70859
08590859089c089c089c089c08d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d008d008d008d008d008d008d008d008d008d008d008d008d008d0
08d008d00000000100000f26004f0005002c000200020010002f00600000
0c63159c000100010000002d022200000003000000000064000000000003
00000001000e006400000003000000020008032a0000000300000003002e
030400000003000000040018031a00000003000000050018033200000003
000000060018034a0000000300000007007603620000000300000008002a
000e0000000300000009002003d8000000030000000a02a0006400000003
0000000b005603f8000000030000000c002a044e000000030000000d0298
0478000000030000000e006c071000010000000000000032077c00010000
00000001000707ae00010000000000020004091100010000000000030017
08fe0001000000000004000c09090001000000000005000c091500010000
00000006000c09210001000000000007003b092d00010000000000080015
0783000100000000000900100968000100000000000a015007ae00010000
0000000b002b0978000100000000000c001509a3000100000000000d014c
09b8000100000000000e00360b0400030001040900000064000000030001
04090001000e006400030001040900020008032a0003000104090003002e
030400030001040900040018031a00030001040900050018033200030001
040900060018034a0003000104090007007603620003000104090008002a
000e0003000104090009002003d8000300010409000a02a0006400030001
0409000b005603f8000300010409000c002a044e000300010409000d0298
0478000300010409000e006c071000a9002000320030003100320020004d
006900630072006f0073006f0066007400200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e00430061006c
0069006200720069002000690073002000610020006d006f006400650072
006e002000730061006e0073002000730065007200690066002000660061
006d0069006c00790020007700690074006800200073007500620074006c
006500200072006f0075006e00640069006e006700730020006f006e0020
007300740065006d007300200061006e006400200063006f0072006e0065
00720073002e002000490074002000660065006100740075007200650073
0020007200650061006c0020006900740061006c006900630073002c0020
0073006d0061006c006c00200063006100700073002c00200061006e0064
0020006d0075006c007400690070006c00650020006e0075006d00650072
0061006c00200073006500740073002e0020004900740073002000700072
006f0070006f007200740069006f006e007300200061006c006c006f0077
0020006800690067006800200069006d007000610063007400200069006e
002000740069006700680074006c007900200073006500740020006c0069
006e006500730020006f0066002000620069006700200061006e00640020
0073006d0061006c006c0020007400650078007400200061006c0069006b
0065002e002000430061006c0069006200720069002700730020006d0061
006e0079002000630075007200760065007300200061006e006400200074
006800650020006e00650077002000720061007300740065007200690073
006500720020007400650061006d00200075007000200069006e00200062
00690067006700650072002000730069007a0065007300200074006f0020
00720065007600650061006c002000610020007700610072006d00200061
006e006400200073006f0066007400200063006800610072006100630074
00650072002e004d006900630072006f0073006f00660074003a00200043
0061006c006900620072006900200042006f006c00640056006500720073
0069006f006e00200035002e0037003200430061006c0069006200720069
002d0042006f006c006400430061006c0069006200720069002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00670072006f007500700020006f006600200063006f006d00700061006e
006900650073002e004c0075006300280061007300290020006400650020
00470072006f006f00740068007400740070003a002f002f007700770077
002e006d006900630072006f0073006f00660074002e0063006f006d002f
007400790070006f006700720061007000680079002f006300740066006f
006e007400730068007400740070003a002f002f0066006f006e00740066
0061006200720069006b002e0063006f006d0059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
0020006100730020007000650072006d0069007400740065006400200062
00790020007400680065002000450055004c004100200066006f00720020
007400680065002000700072006f006400750063007400200069006e0020
007700680069006300680020007400680069007300200066006f006e0074
00200069007300200069006e0063006c007500640065006400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e0074002e00200059006f
00750020006d006100790020006f006e006c007900200028006900290020
0065006d0062006500640020007400680069007300200066006f006e0074
00200069006e00200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
006500200065006d00620065006400640069006e00670020007200650073
007400720069006300740069006f006e007300200069006e0063006c0075
00640065006400200069006e0020007400680069007300200066006f006e
0074003b00200061006e006400200028006900690029002000740065006d
0070006f0072006100720069006c007900200064006f0077006e006c006f
006100640020007400680069007300200066006f006e007400200074006f
002000610020007000720069006e0074006500720020006f00720020006f
00740068006500720020006f007500740070007500740020006400650076
00690063006500200074006f002000680065006c00700020007000720069
006e007400200063006f006e00740065006e0074002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f0066006f006e00740073002f00640065006600610075006c0074
002e0061007300700078a92032303132204d6963726f736f667420436f72
706f726174696f6e2e20416c6c205269676874732052657365727665642e
43616c696272692069732061206d6f6465726e2073616e73207365726966
2066616d696c79207769746820737562746c6520726f756e64696e677320
6f6e207374656d7320616e6420636f726e6572732e204974206665617475
726573207265616c206974616c6963732c20736d616c6c20636170732c20
616e64206d756c7469706c65206e756d6572616c20736574732e20497473
2070726f706f7274696f6e7320616c6c6f77206869676820696d70616374
20696e2074696768746c7920736574206c696e6573206f66206269672061
6e6420736d616c6c207465787420616c696b652e2043616c696272692773
206d616e792063757276657320616e6420746865206e6577207261737465
7269736572207465616d20757020696e206269676765722073697a657320
746f2072657665616c2061207761726d20616e6420736f66742063686172
61637465722e4d6963726f736f66743a2043616c6962726920426f6c6456
657273696f6e20352e373243616c696272692d426f6c6443616c69627269
20697320612074726164656d61726b206f6620746865204d6963726f736f
66742067726f7570206f6620636f6d70616e6965732e4c75632861732920
64652047726f6f74687474703a2f2f7777772e6d6963726f736f66742e63
6f6d2f7479706f6772617068792f6374666f6e7473687474703a2f2f666f
6e7466616272696b2e636f6d596f75206d61792075736520746869732066
6f6e74206173207065726d6974746564206279207468652045554c412066
6f72207468652070726f6475637420696e20776869636820746869732066
6f6e7420697320696e636c7564656420746f20646973706c617920616e64
207072696e7420636f6e74656e742e20596f75206d6179206f6e6c792028
692920656d626564207468697320666f6e7420696e20636f6e74656e7420
6173207065726d69747465642062792074686520656d62656464696e6720
7265737472696374696f6e7320696e636c7564656420696e207468697320
666f6e743b20616e6420286969292074656d706f726172696c7920646f77
6e6c6f6164207468697320666f6e7420746f2061207072696e746572206f
72206f74686572206f75747075742064657669636520746f2068656c7020
7072696e7420636f6e74656e742e687474703a2f2f7777772e6d6963726f
736f66742e636f6d2f7479706f6772617068792f666f6e74732f64656661
756c742e6173707800>
<b10903b802f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c
1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb8
02f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802ed
b21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e
2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1f
b802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802
e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb2
1d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f
1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb8
02d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cf
b21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d121fb802cbb21d
121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1f
b802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802
c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb2
1d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f
1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb8
02b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1
b21c321fb802b0b21c321fb802afb21c331fb802aeb21c331fb802adb21c
331fb802acb21c331fb802abb21c331fb802aab21c311fb802a9b21c311f
b802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5b21c321fb802
a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c331fb802a0b2
1c331fb8029fb21c331fb8029eb21c331fb8029db21c331fb8029cb21c31
1fb8029bb21c311fb8029ab21c321fb80299b21c321fb80298b21c321fb8
0297b21c321fb80296b21c321fb80295b21c331fb80294b21c331fb80293
b21c331fb80292b21c331fb80291b21c331fb80290b21c331fb8028fb21c
331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8028bb21c321f
b8028ab21c321fb80289b21c321fb80288b21c331fb80287b21c331fb802
86b21c331fb80285b21c331fb80284b21c331fb80283b21c331fb80282b2
1b341fb80281b21b341fb80280b21b341fb8027fb21b341fb8027eb21b34
1fb8027db21b341fb8027cb21b341fb8027bb21b341fb8027ab21b341fb8
0279b21b341fb80278b21b341fb80277b21b341fb80276b21b341fb80275
b21b341fb80274b21b341fb80273b21b341fb80272b21b341fb80271b21b
341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8026db21a351f
b8026cb21a351fb8026bb21a351fb8026ab21a351fb80269b21a351fb802
68b21a351fb80267b21a351fb80266b21a351fb80265b21a351fb80264b2
1a351fb80263b21a351fb80262b21a351fb80261b21a351fb80260b21a35
1fb8025fb21a351fb8025eb21a351fb8025db21a351fb8025cb21a351fb8
025bb21a351fb8025ab21a351fb80259b219371fb80258b219371fb80257
b219371fb80256b219371fb80255b219371fb80254b219371fb80253b219
371fb80252b219371fb80251b219371fb80250b219371fb8024fb219371f
b8024eb219371fb8024db219371fb8024cb219371fb8024bb219371fb802
4ab219371fb80249b219371fb80248b219371fb80247b219371fb80246b2
19371fb80245b219371fb80244b219371fb80243b219371fb80242b21937
1fb80241b219371fb80240b219371fb8023fb219371fb8023eb219371fb8
023db219371fb8023cb219371fb8023bb219371fb8023ab219371fb80239
b218391fb80238b218391fb80237b218391fb80236b218391fb80235b218
391fb80234b218391fb80233b218391fb80232b218391fb80231b218391f
b80230b218391fb80301b2182e1fb8022fb218391fb8022eb218391fb802
2db218391fb8022cb218391fb8022bb218391fb8022ab218391fb80229b2
18391fb80228b218391fb80227b218391fb80226b218391fb80225b2173b
1fb80224b2173b1fb80223b217321fb80222b2173a1fb80221b2173b1fb8
0220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2173b1fb8021c
b2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b1fb80218b217
3b1fb80217b2173b1fb80216b2173b1fb80215b217321fb80214b2173a1f
b80213b2173b1fb80212b2173b1fb80211b2173b1fb80210b2173b1fb802
0fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb2173b1fb8020bb2
173b1fb8020ab2173b1fb80209b217321fb80208b217321fb80207b2173b
1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb80203b2173b1fb8
0202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2173b1fb801fe
b2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b1fb801fab217
3b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb801f6b2173a1f
b801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2b2173b1fb801
f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb2173b1fb801edb2
173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1fb801e9b2173b
1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801e5b216231fb8
01e4b216371fb801e3b216371fb801e2b216381fb801e1b216381fb801e0
b216431fb801dfb216441fb801deb216441fb801ddb216441fb801dcb216
451fb801dbb216461fb801dab216461fb801d9b216461fb801d8b216231f
b801d7b216231fb801d6b216381fb801d5b216431fb801d4b216431fb801
d3b216431fb801d2b216441fb801d1b216461fb801d0b216461fb801cfb2
16461fb801ceb216461fb801cdb216461fb801ccb216461fb801cbb21643
1fb801cab216231fb801c9b216231fb801c8b216371fb801c7b216371fb8
01c6b216381fb801c5b216421fb801c4b216431fb801c3b216441fb801c2
b216451fb801c1b216461fb801c0b216461fb801bfb216461fb801beb216
461fb801bdb216461fb801bcb216461fb801bbb216461fb801bab216371f
b801b9b216381fb801b8b216421fb801b7b216431fb801b6b216431fb801
b5b216431fb801b4b216441fb801b3b216441fb801b2b216441fb801b1b2
16451fb801b0b216451fb801afb216451fb801aeb216461fb801adb21646
1fb801acb216461fb801abb216461fb801aab216461fb801a9b215341fb8
01a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2154e1fb801a4
b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d1fb801a0b215
4e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8019cb215401f
b8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198b2154f1fb801
97b2154f1fb80196b215501fb80195b215521fb80194b215521fb80193b2
15521fb80192b215411fb80191b2154f1fb80190b215501fb8018fb21550
1fb8018eb215511fb8018db215521fb8018cb215521fb8018bb215521fb8
018ab214581fb80189b214591fb80188b2145c1fb80187b2145d1fb80186
b2144a1fb80185b2145b1fb80184b2145c1fb80183b214591fb80182b214
5d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c4e1fc10c4e1f
c00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561fae0b561fad0b
561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b561fa60b561f
a50b561fa40b561fa30b561fa20b561fa10b561fa00b561f9f0b561f9e0a
681f9a0a681f990a681f980a681f970a681f960a681f950a681f940a681f
930a681f920a681f910a681f9009681f8f09681f8e09681f8d09681f8c09
681f410902fc02fa0056001f02fb02fa0068001f017fb213321fb8017eb2
12371fb80174b212371fb80173b211421fb80172b211421fb80171b21142
1fb80170b211421fb8016fb211421fb8016eb211421fb8016db211421fb8
016cb211421fb8016bb211421fb8016ab211421fb8013cb211421fb8013b
b210421fb8013ab210421fb80139b210421fb80138b210421fb80137b210
421fb80136b210421fb80135b210421fb80134b210421fb80133b210421f
b80132b20f451fb80131b20f451fb80130b20f451fb80112b20f451fb801
11b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451fb8010db2
0e481fb8010cb20e481fb8010bb20e481fb8010ab20e481fb80109b20e48
1fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a
1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc
0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe0b561fbd0b56
1fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180b213321fb801
7ab211401fb80179b211421fb80178b211421fb80177b211421fb80176b2
11421fb80175b211421fb80143b211421fb80142b210421fb80141b21042
1fb80140b210421fb8013fb210421fb8013eb210421fb8013db20f451fb8
0115b20f451fb80114b20f451fb80113b20f451fb903030302b2401fa4be
030200b4030200c4030200030300b213321fb8017bb213321fb80153b212
371fb80152b211401fb80151b211401fb80150b211401fb8014fb211401f
b8014eb211401fb8014db211401fb8014cb211401fb8014bb211401fb801
4ab211401fb80149b211401fb80148b211401fb80147b211401fb80146b2
11401fb80145b211401fb80144b211401fb80122b211401fb80121b21042
1fb80120b210421fb8011fb210421fb8011eb210421fb8011db210421fb8
011cb210421fb8011bb210421fb8011ab210421fb80119b210421fb80118
b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc0f451ffb0f45
1ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e481ff40e481ff3
0d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a
1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc8
0c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b56
1fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fdb212371fb801
7db212371fb8017cb212371fb80169b2112e1fb80168b2112e1fb80167b2
11401fb80166b211401fb80165b211401fb80164b211401fb80163b21140
1fb80162b211401fb80161b211401fb80160b211401fb8015fb211401fb8
015eb211401fb8015db211401fb8015cb211401fb8015bb211401fb8015a
b211401fb80159b211401fb80158b211401fb80157b211401fb80156b211
401fb80155b211401fb80154b211401fb8012fb211401fb8012eb210421f
b8012db210421fb8012cb210421fb8012bb210421fb8012ab210421fb801
29b210421fb80128b210421fb80127b210421fb80126b210421fb80125b2
0f451fb80124b20f451fb80123b20f451fb80105b20f451fb80104b20f45
1fb80103b20f451fb80102b20f451fb80101b20e481fb8010040a20e481f
ff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c
4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f
83012e1f8248805581ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b
7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a7948775578ab
77550b77010c764875555475e475f4750314755475647574759475d475e4
7507a475b475c47503b8ffc0401275383b46807590750214757475020075
010fb8ffc04021750b0e467448725573ab725504723472023bf47201e072
01023072015072607202b8ffc0b372242846b8ffc0403572161a46107230
7240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6f
bf6f02406f090d466e486d55df6d0100bc02ff001002ff00c002ffb2030a
6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e675568ab675566
2e645565ab6455632e6255612e60555f2e5d555eab5d555c2e5a555bab5a
55592e58555703251f562e545555ab5455532e515552ab51554f2e4e554e
03251f4d2e4b554cab4b554a2e485549ab4855504801472e46554503361f
001f01001e01001e701e801ef01e040b601d701d02701de01df01d03701c
f01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f191f198f199f
19af19050f198f199f19030c7012801202701180110230114011d011e011
040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0e
cf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f0d1f0d40472f
0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f0c4f0c5f0c03
9f0c01400c262946ef0aff0a02400a242746ef09ff0902ff090100030120
01010001100120010308b8ffc0b301151f46b80100b316010501b80190b1
54532b2b4bb807ff524bb008505bb00188b02553b00188b040515ab00688
b000555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d
00421d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db1
160042592b5e73757373742b732b73742b2b73745e732b5e737475737475
5e73747573015e7374737475757473745e737473002b2b732b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b
732b2b73755f75755e732b2b2b5e7373732b7374752b5e732b2b5e732b2b
73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b185f5e00>
[4513 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 316 38 <0001008dfffa0363050e002700b9b10102435558b10713b8029440160d1d
001e1d07280f014d07180c0d014c07100b014d07ba01570013fff0b60b01
4d13131906b8ffe0b30f014d06b8ffe8b40b0e014c06b8015bb440225119
5500183f3f1a4ded2b2b12392f2bed2b2b2b012f2fc41139ed3231301b40
1107280f014d07180c0d014c07100b014d07ba01570013fff0b60b014d13
131906b8ffe0b30f014d06b8ffe8b40b0e014c06b8015bb4402251195500
183f3f1a4ded2b2b12392f2bed2b2b2b31305901140e0223211121321e02
15140e02232111140e0223222e02351134363321321e020363050b0e09fe
59018d090e0b05050b0e09fe730c1f322726331e0d2d210261090e0b0504
a21e29180cfea40a18281e1e281a0bfe1e0b100b06060b100b04952c270b
192a>HIBBAA+Calibri,Bold AddT42Char 
2 1010 75 <00020050ffe905190525001300270071b10102435558bf001402c2000000
1e02c2000a0019ffe8b40b0f014c19b8015c40090f5323180b0f014c23b8
015db240055600183f1a4ded2b3fed2b012fedd4ed31301bb90019ffe8b4
0b0f014c19b8015c40090f5323180b0f014c23b8015db240055600183f1a
4ded2b3fed2b31305901140e0223222e0235343e0233321e0205342e0223
220e0215141e0233323e020519509ee99997e1964b509ee99a93e1974dfe
ec204d806061825021204c8061618250210296a1feb15d4fa2faab9dfbb0
5e4ea2f7b666a77741497aa35b6aa9783f487ca5>HIBBAA+Calibri,Bold AddT42Char 
2 1240 100 <0001000cfffa03ea050e00220055b10102435558b10006b80294b3181106
12b8ffe8b40b0f014c12b8015bb4401d510c5500183f3f1a4ded2b32012f
c4fdcd31301bb10612b8ffe8b40b0f014c12b8015bb4401d510c5500183f
3f1a4ded2b3231305901140e02232111140e0223222e02351121222e0235
343e023321321e0203ea050a0f09febc0d1e332626331e0dfebc0a0e0a05
050a0e0a0390090f0a0504a21d29190cfbed0a100a06060a100a04130c19
291d1e2a190b0b192a00>HIBBAA+Calibri,Bold AddT42Char 
2 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>HIBBAA+Calibri,Bold AddT42Char 
HIBBAA+Calibri,Bold /CharStrings get begin
/F 38 def
/O 75 def
/T 100 def
end
HIBBAA+Calibri,Bold /Encoding get
dup 70 /F put
dup 79 /O put
dup 84 /T put
pop
end
%ADOEndSubsetFont
/VGICLD+Calibri,Bold /HIBBAA+Calibri,Bold findfont ct_VMDictPut
/VGICLD+Calibri,Bold*1 
[70{/.notdef}rp /F 8{/.notdef}rp /O 4{/.notdef}rp /T 171{/.notdef}rp]
VGICLD+Calibri,Bold nf
VGICLD+Calibri,Bold*1 [30.384 0 0 -30.384 0 0 ]msf
266.86 49.0243 mo
(OFOT)
[22.8182 15.9516 22.1194 0 ]xsh
90.193 92.1943 mo
99.5983 92.1943 li
99.5983 82.789 li
90.193 82.789 li
cp
.441932 .103243 .851316 .000457771 cmyk
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if

2 0 3 <> PBAAAA+Calibri AddT42Char 
2 7354 258 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>PBAAAA+Calibri AddT42Char 
2 7704 272 <0001005affed032003c900350089b11c00b8ffc0b310014d00b8ffe0b30d
014d00b8ffe8b40b014d0027b8ffe8b310014d27b8fff0b30f014d27b8ff
eeb30c014d27b8ffe8b30b014d27b8ffeab30d014d27b8020b400d2f0e01
0e19e71f400a0d481f24b80102b4134a03eb31b8ffc0b4090d48312cb801
06b1094d003ffdd42bed3ffdd42bed012f5de12b2b2b2b2bc42b2b2b3231
3025140e0623222e0235343e0233321e0615140623222e0223220615141e
0233323e0233321e020320020507193c4b582f61966535417199592b5144
3518090602120d0f273c553a777f21405d3c39563f2b0c070a0703a21119
110d19251d12407bb37585bf7a3b101a22180e131812271f212821b7ae57
83582b242b2308131d00>PBAAAA+Calibri AddT42Char 
2 9156 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>PBAAAA+Calibri AddT42Char 
2 13220 336 <00030035fe93038903c8003e004e005f00d04015122d47100f014d47080c
014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d3fb8ffe0
b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707b8ffe0b3
10014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040340b014d
0058100f014d58201012014c582a25400b12014c250f300703384ada0c53
e81515603803e93c482a2042d9384a5bd9204f003fed3fed12393fed1112
392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b1112173910
cd2b10cd2b2b2b10cd2b2b2b10cd31300114062323161615140e02232226
27060615141617171e0315140e0223222e0235343e023726263534363726
2635343e023332161721321601342623220e0215141633323e0213342627
270e0315141633323e020389130f81231c325d804e37631b12174136eb43
70522e346ba6716d99622c10213120312f32251f24345c814c29471f0110
1111fefe655d30472f17655b31482f17535f51e92029180984764b653e1b
0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e70553125
405934213e383319194c2c3d6026255d424d7a542d090821fef15c672038
492859661f3748fd5e3a3f0208192d29281541431d303e00>PBAAAA+Calibri AddT42Char 
2 14246 349 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>PBAAAA+Calibri AddT42Char 
2 14576 367 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>PBAAAA+Calibri AddT42Char 
2 14710 374 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>PBAAAA+Calibri AddT42Char 
2 15284 393 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>PBAAAA+Calibri AddT42Char 
2 15586 396 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>PBAAAA+Calibri AddT42Char 
2 15828 400 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>PBAAAA+Calibri AddT42Char 
3 510 410 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>PBAAAA+Calibri AddT42Char 
3 2904 455 <00010022fe94037c03bc00240052b9001bfff040350b014d371b01291b01
18180b014d261801260e360e022709011a400b014d3a1a0119380b014d3b
19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b5d2b015d
5d5d2b5d5d2b2103060623222e023713262627012634363633321e021701
33133e023332161614070233780631321a201102067c091003febf081024
1e1e22140905010103f8061122201c241106feb51011050c140e01390412
0a035c15180e0503080f0dfd2e02d6130b05050e1812>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/space 3 def
/a 258 def
/c 272 def
/e 286 def
/g 336 def
/i 349 def
/l 367 def
/n 374 def
/p 393 def
/r 396 def
/s 400 def
/t 410 def
/y 455 def
end
PBAAAA+Calibri /Encoding get
dup 32 /space put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/.notdef /six /.notdef /eight 8{/.notdef}rp /A /.notdef /C 
/D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M 
/N /.notdef /P /.notdef /R /S /T /U 
11{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/.notdef /i 2{/.notdef}rp /l /.notdef /n /.notdef /p 
/.notdef /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
103.61 92.3443 mo
(replacing strategy)
[5.97207 8.60735 8.89814 3.86724 8.19672 7.28978 3.86723 8.89815 8.19652 3.86728 6.62245 5.73264 
5.90361 8.19672 5.73264 8.64159 7.99118 0 ]xsh
240.48 92.2443 mo
250.069 92.2443 li
250.069 82.655 li
240.48 82.655 li
cp
.18497 .816068 .688869 .0602731 cmyk
f
240.48 92.2443 mo
250.069 92.2443 li
250.069 82.655 li
240.48 82.655 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 8854 282 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>PBAAAA+Calibri AddT42Char 
2 9478 296 <00010025fffa02860578003c0064b2161000b8ffe0b40b014d001bb8fff0
b30d014d1bb8fff0b40f10014c1bb8fff6b30c014d1bb8ffe8b30b014d1b
b801f9b2302a25b8ffd040121011014c250aed36471a26ed3048204c1048
003f3f3fed323fed012f2bc433f12b2b2b2bc42b33c4313001140e022322
2e0223220e02151533321e02151406232311140e0223222e023511232226
35343e02333335343e0233321e0402860405080607151e291b2534200ec9
080b0905120fc908132018182013087f101004080c087f23486d4a234224
0c0803050f13170e05090b091833513a6207111a132420fceb080b080404
080b0803152024131a11075d5e8756290d0f0c131b00>PBAAAA+Calibri AddT42Char 
2 13982 346 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>PBAAAA+Calibri AddT42Char 
3 2616 437 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/d 282 def
/f 296 def
/h 346 def
/u 437 def
end
PBAAAA+Calibri /Encoding get
dup 100 /d put
dup 102 /f put
dup 104 /h put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/.notdef /six /.notdef /eight 8{/.notdef}rp /A /.notdef /C 
/D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M 
/N /.notdef /P /.notdef /R /S /T /U 
11{/.notdef}rp /a /.notdef /c /d /e /f /g 
/h /i 2{/.notdef}rp /l /.notdef /n /.notdef /p 
/.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
254.21 92.3443 mo
(distinguish faults)
[8.89815 4.08969 6.60535 5.73264 3.81589 9.10349 7.99118 8.89813 4.08969 6.60535 8.89813 3.86728 
5.21902 8.19672 9.12061 3.86725 5.7326 0 ]xsh
389.11 82.6543 mo
393.9 87.4443 li
389.11 92.2443 li
384.31 87.4443 li
cp
.719692 .439979 .027985 3.0518e-5 cmyk
f
1.3699 lw
389.11 82.6543 mo
393.9 87.4443 li
389.11 92.2443 li
384.31 87.4443 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 15000 381 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/o 381 def
end
PBAAAA+Calibri /Encoding get
dup 111 /o put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VGICLC+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/.notdef /six /.notdef /eight 8{/.notdef}rp /A /.notdef /C 
/D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M 
/N /.notdef /P /.notdef /R /S /T /U 
11{/.notdef}rp /a /.notdef /c /d /e /f /g 
/h /i 2{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
VGICLC+Calibri nf
VGICLC+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
398.02 92.3443 mo
(regard as one fault)
[5.97208 8.62445 7.99121 8.19669 5.97208 8.89813 3.86728 8.23096 6.82779 3.64481 9.12057 8.89813 
8.67581 3.86728 5.25323 8.19672 8.9837 3.85016 0 ]xsh
gsave
50.4 540.544 mo
561.6 540.544 li
561.6 4.98431 li
50.4 4.98431 li
cp
eclp
1.427 lw
51.229 539.724 mo
560.939 539.724 li
560.939 5.74432 li
51.229 5.74432 li
cp
1 /0 /CSD get_res sepcs
.149 sep
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/VGICLD+Calibri,Bold*1 uf
/VGICLD+Calibri,Bold uf
/HIBBAA+Calibri,Bold uf
/VGICLC+Calibri*1 uf
/VGICLC+Calibri uf
/PBAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 1503 1322 a(\(b\))g(Caption)i(of)g(sub\014gure)f(2)2680
1235 y @beginspecial 0 @llx 0 @lly 523 @urx 547 @ury
1591 @rwi @setspecial
%%BeginDocument: CTA_our.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: CTA_our.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: niuxintao
%%CreationDate: 3/7/2014, 11:46:09 PM
%%BoundingBox: 0 0 523 547
%%HiResBoundingBox: 0 0 522.9570 546.7277
%%CropBox: 0 0 522.9570 546.7277
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 722 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-03-07T23:45:42+08:00"
   xmp:CreatorTool="Microsoft® Excel® 2013"
   xmp:ModifyDate="2014-03-07T23:45:42+08:00"
   pdf:Producer="Microsoft® Excel® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>xintao niu</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -546.728 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 546.728 li
522.957 546.728 li
522.957 0 li
cp
clp
[1 0 0 1 -44.3001 0 ]ct
51.415 540.785 mo
560.905 540.785 li
560.905 7.01477 li
51.415 7.01477 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
1.427 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
72.344 125.745 mo
72.344 500.175 li
160.98 125.745 mo
160.98 500.175 li
249.57 125.745 mo
249.57 500.175 li
338.15 125.745 mo
338.15 500.175 li
426.74 125.745 mo
426.74 500.175 li
515.3 125.745 mo
515.3 500.175 li
1 /0 /CSD get_res sepcs
.149 sep
@
108.47 350.365 mo
124.68 350.365 li
124.68 500.175 li
108.47 500.175 li
cp
197.05 470.235 mo
213.26 470.235 li
213.26 500.175 li
197.05 500.175 li
cp
285.64 440.325 mo
301.85 440.325 li
301.85 500.175 li
285.64 500.175 li
cp
374.23 455.165 mo
390.67 455.165 li
390.67 500.175 li
374.23 500.175 li
cp
462.81 470.235 mo
479.25 470.235 li
479.25 500.175 li
462.81 500.175 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.441932 .103243 .851316 .000457771 cmyk
f
515.3 500.175 mo
515.3 125.745 li
1 /0 /CSD get_res sepcs
.149 sep
@
515.3 500.175 mo
520.73 500.175 li
515.3 425.255 mo
520.73 425.255 li
515.3 350.365 mo
520.73 350.365 li
515.3 275.485 mo
520.73 275.485 li
515.3 200.595 mo
520.73 200.595 li
515.3 125.745 mo
520.73 125.745 li
@
72.344 500.175 mo
515.3 500.175 li
@
116.71 283.045 mo
124.25 290.575 li
116.71 298.115 li
109.18 290.575 li
cp
.719692 .439979 .027985 3.0518e-5 cmyk
f
1.3699 lw
116.71 283.045 mo
124.25 290.575 li
116.71 298.115 li
109.18 290.575 li
cp
@
205.3 253.135 mo
212.83 260.665 li
205.3 268.205 li
197.77 260.665 li
cp
f
205.3 253.135 mo
212.83 260.665 li
205.3 268.205 li
197.77 260.665 li
cp
@
293.89 417.755 mo
301.42 425.285 li
293.89 432.825 li
286.35 425.285 li
cp
f
293.89 417.755 mo
301.42 425.285 li
293.89 432.825 li
286.35 425.285 li
cp
@
382.47 492.635 mo
390.01 500.175 li
382.47 507.705 li
374.94 500.175 li
cp
f
382.47 492.635 mo
390.01 500.175 li
382.47 507.705 li
374.94 500.175 li
cp
@
471.06 208.155 mo
478.6 215.695 li
471.06 223.225 li
463.53 215.695 li
cp
f
471.06 208.155 mo
478.6 215.695 li
471.06 223.225 li
463.53 215.695 li
cp
@
111.01 341.265 mo
122.426 341.265 li
122.426 329.849 li
111.01 329.849 li
cp
.18497 .816068 .688869 .0602731 cmyk
f
111.01 341.265 mo
122.426 341.265 li
122.426 329.849 li
111.01 329.849 li
cp
@
199.59 505.885 mo
211.006 505.885 li
211.006 494.469 li
199.59 494.469 li
cp
f
199.59 505.885 mo
211.006 505.885 li
211.006 494.469 li
199.59 494.469 li
cp
@
288.18 416.155 mo
299.596 416.155 li
299.596 404.739 li
288.18 404.739 li
cp
f
288.18 416.155 mo
299.596 416.155 li
299.596 404.739 li
288.18 404.739 li
cp
@
376.77 505.885 mo
388.186 505.885 li
388.186 494.469 li
376.77 494.469 li
cp
f
376.77 505.885 mo
388.186 505.885 li
388.186 494.469 li
376.77 494.469 li
cp
@
465.35 430.995 mo
476.766 430.995 li
476.766 419.579 li
465.35 419.579 li
cp
f
465.35 430.995 mo
476.766 430.995 li
476.766 419.579 li
465.35 419.579 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9ddb2dc000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c7966b36c563c00008f6000009dc468656164ecde32e000000f640000
0036686865610dad0c0b00000f9c00000024686d7478c66f458200000fc0
00002fe06c6f6361a8f082d700003fa000001e4e6d617870213625500000
5df0000000206e616d6519aa717b00005e1000000d3e707265706baf02fe
00006b5000002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
fb040600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d0000000100000005b8521a01e39b5f0f3cf500190800
00000000bbeb7ccc00000000cbdab383fbfafd8b09ec07b6000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000008ca040e0000000000000000000001cf000004a1
002300000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000044400610000
00000000000000000000000000000000000004ec00ac0000000000000000
0000000003e800ac00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000004fc00ac0000000000000000020400ac000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000035d00ac000000000000
000000000000000000000000000006d700ac052a00ac0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
042200ac0000000000000000045800ac00000000000000000000000003ad
0047000000000000000000000000000000000000000003e6000f00000000
0000000000000000052200aa000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000003f40010
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000003cb006d00000000
00000000000000000000000000000000046500a100000000000000000000
0000038000a1000000000000000000000000000000000000000000000000
000000000000000000000000035000a10482006c00000000000000000000
000000000000047800a1000000000000000001ec00a10000000000000000
000000000000000000000000000000000000000001ec0011000000000000
00000000000000000000000000000000000002e000a10000000000000000
000000000000000000000000060600a1049100a100000000000000000000
0000000000000000000004aa006600000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000003c5
00a1000000000000000003ed00a1000000000000000000000000034f0049
00000000000000000000000000000000000000000359001c000000000000
000000000000048d009f0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000038300100000000000000000
00000000000000000000000000000000000000000000000003d5005c0000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000362005a000000000000
0000000000000000000000000000076f005a000000000601005a00000000
0434006000000000000000000000000003fb005d00000000000000000000
000000000000000000000000000000000000000000000000000002710025
000000000000000004ab0025069b002508d50025043c0025000000000000
000000000000000000000000000000000000000000000000000000000000
067600250000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
043c00250000000000000000000000000676002504ed0025000000000000
00000728002503c400350000000000000000000000000000000004340060
0000000000000000000000000000000004340099000000000000000001d6
008500000000000000000000000000000000000000000000000000000000
0000000001d6009900000000000000000000000000000000000000000000
0000000000000000000001d6009900000000000000000000000000000000
000000000000000004340099000000000000000000000000000000000000
0000000000000438005a0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000043400990000
00000000000002ca00990000000000000000000000000321005100000000
0000000000000000000000000000000005ae005100000000000000000000
000002ae002100000000000000000000000004e600210475002100000000
000000000000000000000000000000000000000000000000000000000475
002105130021074b002106d9002100000000000000000000000000000000
0000000000000000000000000000000006d9002104340094000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000039f0022000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002ac004400000000024e
004402e5004802b8004701c100240297002a02e9006c0163006100000000
00000000015e006c0000000002e6006c02e6004502e5006c0000000001f6
006c0230004201e3002302e9006c0000000000000000000000000286001f
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001d6000001ce000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000029b010a000000000000
000000000000000000000000000000000000026000ed0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000494005f02cb002303ec0062
03ec00510455002203d700510436007e00000000000000000436005c040e
0048040e00ae040e0072040e0067040e0020040e0065040e006b00000000
00000000040e005204430067028d00190381005c0373005903ac00260368
006103b7006e000000000000000003bc0052039f0050039f008d039f0065
039f0062039f003a039f0067039f00610000000000000000039f00500494
005f02cb002303ec006203ec00510428002203d700510436007e00000000
000000000436005c040e0048040e00ae040e0072040e0067040e0030040e
0065040e006b0000000000000000040e00520321004801f8002302b0004b
02ad004102db002502a6004502df005b000000000000000002df00440000
0000000000000000000000000000000000000321004801f8002302b0004b
02ad004102db002502a6004502df005b000000000000000002df00440000
000000000000000000000000000000000000029d003801f500310252003c
0249002d024a001402460032025100300000000000000000024d0023029d
003801f500310252003c0249002d024a0014024600320251003000000000
00000000024d002300000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000002f5001c000000000306005a034b
008e02a8008e0000000000000000035b008e01a6008e0000000000000000
025b008e046d008e0375008d0000000002d8008e00000000029b00570280
004602570004031400570000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002f5001c000000000000000000000000034b008e
02a8008e0000000000000000035b008e01a6008e0000000000000000025b
008e046d008e0375008d00000000000000000000000002d8008e029b0057
025700040314005700000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00a100a100a100a1012f012f012f012f012f012f012f012f012f012f012f
012f012f012f01ac01ac01ac01ac01ac01ac021902190219021902950295
029502950295029502950295029502950295029502950295029502950335
033503350380038003800380038003800380038003800380038003800380
0380038003ce03ce03ce03ce03ce03ce047b051605160516051605160516
051605160516051605160516051605160516051605160516058f058f058f
063a063a063a063a070c070c070c070c070c070c077307730773077307fe
07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe
07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe0864086408640864
086408640864086408640864086408640864086408ca08ca08ca08ca08ca
08ca090c090c090c090c0965096509650965096509650965096509650965
09b20a290a290a290a290a290a870a870a870ab30ab30ab30ab30ab30ab3
0ab30ab30abe0abe0abe0abe0abe0abe0abe0af30af30af30af30af30af3
0b690bd50bd50bd50bd50bd50bd50c230c230c230c230c230c230c230c23
0c230c230c230c230c7a0c7a0c7a0cf40cf40cf40cf40d7a0d7a0d7a0d7a
0d7a0d7a0dbb0dbb0dbb0dbb0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b
0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e0b0e5d0e5d0e5d0e5d0e5d0e5d
0e5d0e5d0e5d0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c0f0c
0f0c0f0c0f980f980f980f980f980f98106c106c114b114b11e211e211e2
11e2128312831283128312831283128312831283128313061306130613ae
146b156e160116011601160116011601160116011601160116da16da16da
16da16da16da16da16da16da16da16da16da16da16da16da176217621762
1762182d18db18db18db19d21abf1abf1abf1abf1abf1b4f1b4f1b4f1b4f
1b4f1bd31bd31bd31c4c1c4c1c4c1c4c1c4c1c4c1c4c1c4c1c4c1c781c78
1c781c781c781c781c781c781c781cbb1cbb1cbb1cbb1cbb1cbb1cbb1d4c
1d4c1d4c1d4c1d4c1d4c1d4c1dda1dda1dda1dda1dda1dda1dda1dda1dda
1dda1dda1dda1e711e711e711eea1eea1eea1eea1fb01fb01fb01fb01fb0
1fb020af20af20af20af212b212b212b212b21d821e421e421e421e421e4
21e421e421e421e4225a230c2401240d240d240d240d240d240d240d240d
240d24cc255c255c255c255c255c255c255c255c255c255c255c255c255c
255c255c255c255c255c25c125c125c125c125c125c125c125c125c125c1
25c125c126372637268d26f3275727b8287b28d8291c291c291c29482948
299e29e72a522a522aa52b1d2b772bd02bd02bd02bd02c272c272c272c27
2c272c272c272c272c272c272c272c272c272c272c272c272c272c272c27
2c272c272c272c272c272c272c272c272c272c272c272c272c272c272c27
2c272c272c272c272c272c272c272c272c272c272c272c272c272c272c27
2c272c272c272c272c272c272c272c272c272c4b2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f2c6f
2c6f2c6f2cb42cb42cb42cb42cb42cb42cb42d022d022d022d022d022d02
2d022d022d022d022d022d022d022d022d022d022d022d022d022d022d02
2d022d022d022d022d022d022d022d022d022d022d022d022d022d022d02
2d022d022d022d022d022d022d022d022d022d022d022d022d022d022d02
2d022d022d022d022d022d022d022d022d022d022d022d022d022d022d02
2d022d022d022d022d482d482d482d482d482d482d482d482d482d482d48
2d482d482d482d482d482d482d482d482d482d482d482d482d482d482d48
2d482d482d482d482d482d482d482d482d482d962dd92e502eef2f512fc4
30403040304030b63104316031ce326a32cc334333f133f133f1346e34bc
34ff3571360b367036e937643764376437e0382d3886388e389638f93973
39ea39ea39ea3a5e3aae3af03b683c053c6a3ce53ced3ced3ced3d5a3e0d
3ec43f644058411d41d241da41da41da4293429c42a542ae42b742c042c9
42d242d242d242db42db42db42db42db42db4326436943cb445844b94527
459f459f459f461746174617461746174617466246a4470b47a348054872
48e648e648e649594962496b4974497d4986498f49984998499849a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a149a149a149a149a149a149a149a149a149a149a149a149a149a1
49a149a949a94a0c4a144a1c4a1c4a1c4a244a2c4a2c4a2c4a344a3c4a44
4a444a4c4a4c4a544ad34adb4ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae34ae3
4ae34ae34ae34ae34ae34ae34ae34b2f4b2f4b2f4b2f4b714bca4bca4bca
4c2c4c5a4c5a4c5a4c924d034d734d734d734d734dc74e4d4e904ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee24ee2
4ee24ee24ee24ee24ee24ee24ee24ee20000000100000f26009600050078
000300020010002f0065000011902410000200010000002d022200000003
00000000006400000000000300000001000e00640000000300000002000e
03040000000300000003002403120000000300000004000e006400000003
00000005001803360000000300000006000e006400000003000000070076
034e0000000300000008002a000e0000000300000009002003c400000003
0000000a02a00064000000030000000b005603e4000000030000000c002a
043a000000030000000d02980464000000030000000e006c06fc00010000
000000000032076800010000000000010007079a00010000000000020007
08ea0001000000000003001208f100010000000000040007079a00010000
00000005000c090300010000000000060007079a0001000000000007003b
090f00010000000000080015076f00010000000000090010094a00010000
0000000a0150079a000100000000000b002b095a000100000000000c0015
0985000100000000000d014c099a000100000000000e00360ae600030001
04090000006400000003000104090001000e00640003000104090002000e
03040003000104090003002403120003000104090004000e006400030001
04090005001803360003000104090006000e006400030001040900070076
034e0003000104090008002a000e0003000104090009002003c400030001
0409000a02a00064000300010409000b005603e4000300010409000c002a
043a000300010409000d02980464000300010409000e006c06fc00a90020
00320030003100320020004d006900630072006f0073006f006600740020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e00430061006c006900620072006900200069007300200061
0020006d006f006400650072006e002000730061006e0073002000730065
007200690066002000660061006d0069006c007900200077006900740068
00200073007500620074006c006500200072006f0075006e00640069006e
006700730020006f006e0020007300740065006d007300200061006e0064
00200063006f0072006e006500720073002e002000490074002000660065
0061007400750072006500730020007200650061006c0020006900740061
006c006900630073002c00200073006d0061006c006c0020006300610070
0073002c00200061006e00640020006d0075006c007400690070006c0065
0020006e0075006d006500720061006c00200073006500740073002e0020
004900740073002000700072006f0070006f007200740069006f006e0073
00200061006c006c006f00770020006800690067006800200069006d0070
00610063007400200069006e002000740069006700680074006c00790020
0073006500740020006c0069006e006500730020006f0066002000620069
006700200061006e006400200073006d0061006c006c0020007400650078
007400200061006c0069006b0065002e002000430061006c006900620072
0069002700730020006d0061006e00790020006300750072007600650073
00200061006e006400200074006800650020006e00650077002000720061
007300740065007200690073006500720020007400650061006d00200075
007000200069006e0020006200690067006700650072002000730069007a
0065007300200074006f002000720065007600650061006c002000610020
007700610072006d00200061006e006400200073006f0066007400200063
00680061007200610063007400650072002e0052006500670075006c0061
0072004d006900630072006f0073006f00660074003a002000430061006c
006900620072006900560065007200730069006f006e00200035002e0037
003200430061006c00690062007200690020006900730020006100200074
0072006100640065006d00610072006b0020006f00660020007400680065
0020004d006900630072006f0073006f00660074002000670072006f0075
00700020006f006600200063006f006d00700061006e006900650073002e
004c007500630028006100730029002000640065002000470072006f006f
00740068007400740070003a002f002f007700770077002e006d00690063
0072006f0073006f00660074002e0063006f006d002f007400790070006f
006700720061007000680079002f006300740066006f006e007400730068
007400740070003a002f002f0066006f006e007400660061006200720069
006b002e0063006f006d0059006f00750020006d00610079002000750073
00650020007400680069007300200066006f006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
0065002000450055004c004100200066006f007200200074006800650020
00700072006f006400750063007400200069006e00200077006800690063
00680020007400680069007300200066006f006e00740020006900730020
0069006e0063006c007500640065006400200074006f0020006400690073
0070006c0061007900200061006e00640020007000720069006e00740020
0063006f006e00740065006e0074002e00200059006f00750020006d0061
00790020006f006e006c0079002000280069002900200065006d00620065
00640020007400680069007300200066006f006e007400200069006e0020
0063006f006e00740065006e00740020006100730020007000650072006d
00690074007400650064002000620079002000740068006500200065006d
00620065006400640069006e006700200072006500730074007200690063
00740069006f006e007300200069006e0063006c00750064006500640020
0069006e0020007400680069007300200066006f006e0074003b00200061
006e006400200028006900690029002000740065006d0070006f00720061
00720069006c007900200064006f0077006e006c006f0061006400200074
00680069007300200066006f006e007400200074006f0020006100200070
00720069006e0074006500720020006f00720020006f0074006800650072
0020006f0075007400700075007400200064006500760069006300650020
0074006f002000680065006c00700020007000720069006e007400200063
006f006e00740065006e0074002e0068007400740070003a002f002f0077
00770077002e006d006900630072006f0073006f00660074002e0063006f
006d002f007400790070006f006700720061007000680079002f0066006f
006e00740073002f00640065006600610075006c0074002e006100730070
0078a92032303132204d6963726f736f667420436f72706f726174696f6e
2e20416c6c205269676874732052657365727665642e43616c6962726920
69732061206d6f6465726e2073616e732073657269662066616d696c7920
7769746820737562746c6520726f756e64696e6773206f6e207374656d73
20616e6420636f726e6572732e204974206665617475726573207265616c
206974616c6963732c20736d616c6c20636170732c20616e64206d756c74
69706c65206e756d6572616c20736574732e204974732070726f706f7274
696f6e7320616c6c6f77206869676820696d7061637420696e2074696768
746c7920736574206c696e6573206f662062696720616e6420736d616c6c
207465787420616c696b652e2043616c696272692773206d616e79206375
7276657320616e6420746865206e65772072617374657269736572207465
616d20757020696e206269676765722073697a657320746f207265766561
6c2061207761726d20616e6420736f6674206368617261637465722e5265
67756c61724d6963726f736f66743a2043616c6962726956657273696f6e
20352e373243616c6962726920697320612074726164656d61726b206f66
20746865204d6963726f736f66742067726f7570206f6620636f6d70616e
6965732e4c7563286173292064652047726f6f74687474703a2f2f777777
2e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374666f
6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f75206d61
7920757365207468697320666f6e74206173207065726d69747465642062
79207468652045554c4120666f72207468652070726f6475637420696e20
7768696368207468697320666f6e7420697320696e636c7564656420746f
20646973706c617920616e64207072696e7420636f6e74656e742e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e68747470
3a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f6772617068
792f666f6e74732f64656661756c742e61737078000000>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[16225 16233 7933 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 15188 1004 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>PBAAAA+Calibri AddT42Char 
3 15546 1005 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>PBAAAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/zero 1004 def
/one 1005 def
end
PBAAAA+Calibri /Encoding get
dup 48 /zero put
dup 49 /one put
pop
end
%ADOEndSubsetFont
/FFHUYS+Calibri /PBAAAA+Calibri findfont ct_VMDictPut
/FFHUYS+Calibri*1 
[48{/.notdef}rp /zero /one 206{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
103.37 364.985 mo
(10)
[-7.75204 0 ]ysh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
3 15912 1006 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/two 1006 def
end
PBAAAA+Calibri /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[48{/.notdef}rp /zero /one /two 205{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
210.36 459.015 mo
(2)sh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
4 488 1008 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/four 1008 def
end
PBAAAA+Calibri /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[48{/.notdef}rp /zero /one /two /.notdef /four 203{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
284.66 445.645 mo
(4)sh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
4 0 1007 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/three 1007 def
end
PBAAAA+Calibri /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
387.58 444.045 mo
(3)sh
FFHUYS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
476.18 459.015 mo
(2)sh
FFHUYS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
147.22 298.435 mo
(14)
[-7.77603 0 ]ysh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
3 10022 970 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>PBAAAA+Calibri AddT42Char 
4 1244 1010 <ffff006bffed03bd0520020603ca0000>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/six 1010 def
end
PBAAAA+Calibri /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /.notdef /six 
201{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
235.82 268.455 mo
(16)
[-7.75204 0 ]ysh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
4 882 1009 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/five 1009 def
end
PBAAAA+Calibri /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
201{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
324.43 429.355 mo
(5)sh
FFHUYS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
413.04 504.255 mo
(0)sh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
4 1260 1013 <00020052ffed03a605210030004200bd4013292e012a0501290401290301
2a2601260a0144b8ffc040200f024d60440131080d014d31100c0d014c1d
7a3101393149316931032b310131b8022c4009000e0e200070000200b8ff
e0b30f024d00b8ffe0b40f014d003bb8fff8b30d014d3bb8fff040120c0d
014c753b01363b463b663b03243b013bb8022b400e2f25012540f2202007
36f42a5318b80108b10756003fed3fed12392fed012f5de15d5d5d2b2bc4
2b2b5d392f10e15d5d5d322b2b31305d2b005d5d015d5d5d5d01140e0423
222e0435343e0233321e0233323e0237060623222e0235343e0233321e04
07342e0223220e0215141e0233323603a61430517ba9702b51412c140903
060b080b283d5233618b582c023594606c935927326aa472517d5c402711
af2242603f415c3b1c19385a424b8c02ba54ac9f8b683b0b1012121f1a16
1a0e050f120f4b7ea65c1f303b668c53569b7646294d6d8aa14680af6c30
2f4f64353b6244252d00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/nine 1013 def
end
PBAAAA+Calibri /Encoding get
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
2{/.notdef}rp /nine 198{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
501.65 223.525 mo
(19)
[-7.77603 0 ]ysh
FFHUYS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
145.32 343.365 mo
(11)
[-7.75204 0 ]ysh
FFHUYS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
233.93 504.255 mo
(0)sh
FFHUYS+Calibri*1 [-6.72672e-7 -15.288 -15.288 6.72672e-7 0 0 ]msf
322.54 414.375 mo
(6)sh
FFHUYS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
411.14 504.255 mo
(0)sh
FFHUYS+Calibri*1 [-6.73728e-7 -15.312 -15.312 6.73728e-7 0 0 ]msf
499.75 429.355 mo
(5)sh
FFHUYS+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
531.29 505.095 mo
(0)sh
FFHUYS+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
531.29 430.195 mo
(5)sh
gsave
51.36 540.545 mo
560.76 540.545 li
560.76 7.02478 li
51.36 7.02478 li
cp
eclp
FFHUYS+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
531.29 355.285 mo
(10)
[8.68805 0 ]xsh
grestore
gsave
51.36 540.545 mo
560.76 540.545 li
560.76 7.02478 li
51.36 7.02478 li
cp
eclp
FFHUYS+Calibri*1 [17.136 0 0 -17.136 0 0 ]msf
531.29 280.385 mo
(15)
[8.68805 0 ]xsh
grestore
gsave
51.36 540.545 mo
560.76 540.545 li
560.76 7.02478 li
51.36 7.02478 li
cp
eclp
FFHUYS+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
531.29 205.505 mo
(20)
[8.68805 0 ]xsh
grestore
gsave
51.36 540.545 mo
560.76 540.545 li
560.76 7.02478 li
51.36 7.02478 li
cp
eclp
FFHUYS+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
531.29 130.605 mo
(25)
[8.68805 0 ]xsh
grestore
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 322 4 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>PBAAAA+Calibri AddT42Char 
2 606 18 <00010061fff0040c051e00390062b31c003b2bb8ffe8b310014d2bb8fff0
b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b014d2bbe
0233000e0018012f00210026012cb2135304bb012a00350030012eb10956
003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c4313025140e0623222e02
35343e0233321e0615140e0223222e0223220e0215141e0233323e023332
1e02040c02050814405f7b497ecb8f4d5396d17f386a5a461b0805030408
0b080e324f714f568d64373563905b4d7351340f070a0603b71018120e14
29271b54a4f19da1fcaf5c15202a1b0e131a12141c1309272f274586c17c
7bbd7f41262f2606111e>PBAAAA+Calibri AddT42Char 
2 1074 28 <000100ac0000037c050e002c0076b11a27b8ffe8b310014d27b8fff0b30f
014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d27b80211
400909132013200009001ab80108400d802601c02601d0260126260619b8
010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f2f123939
2f2f10e12b2b2b2b2b32313025140e0223212226351134363321321e0215
140e0223211121321e0215140e0223211121321e02037c040a0d08fd9317
2929170266080d080505080d08fe0601b2080d090404090d08fe4e020108
0d0a0447121b12081f270482271f08121b14121b1108fe6a09101c13121a
1007fe3108111b00>PBAAAA+Calibri AddT42Char 
2 2846 90 <000200acfffa040b050e003600440091401e102e1137080b014d37100f01
4d37100c0d014c371810014d37180b014d37b80233b7294010014d293f11
b8fff0b310014d11b8fff0b30f014d11b8fff0b30d014d11b8fff6b30c01
4d11b8ffe8b30b014d11b80211b21c2e10b80108b67040014040173db801
0bb5215117550555003f3f3fed12392f5ded39012fe12b2b2b2b2b32d42b
e12b2b2b2b2b123939313025140e0223222e0227032e03232311140e0223
222e023511343633213216171e0315140e02071e03171316160134262726
2623231133323e02040b0614241e1a21140b0477152d3e543b7309132119
192114082917011331411a4b734e2723425c3920342d2814740e08fefd44
50193f3391a84463421f1a080c08040409100c013134573f23fdd9080c07
0505070c0804ae271f05030d38566f4341674f3a140e2b3c4e31fee3241d
03854c69170706fe4c213b50>PBAAAA+Calibri AddT42Char 
2 3608 100 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>PBAAAA+Calibri AddT42Char 
2 3814 104 <000100aaffed04790514002b0099401d602d01201810014d20100f014d20
100d014d200a0c014d20180b014d20b802104011004015014d004013014d
004011014d0016b8ffe8b310014d16b8fff0b30f014d16b8fff0b30d014d
16b8fff6b30c014d16b8ffe8b30b014d16ba0210000affc0b315014d0ab8
ffc0400913014d0a265210521bb80129b10556003fed3f3f012f2b2be12b
2b2b2b2bd42b2b2be12b2b2b2b2b31305d01140e0223222e023511343e02
33321e021511141e0233323e023511343e0233321e021504794580b8756b
b07e440814201a182213082c5375494b75512b081421191821130901de76
b980423e79b6770323080c070505070c08fcf25a86592d2c588257031708
0c070505070c0800>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/A 4 def
/C 18 def
/E 28 def
/R 90 def
/T 100 def
/U 104 def
end
PBAAAA+Calibri /Encoding get
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 82 /R put
dup 84 /T put
dup 85 /U put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C /.notdef /E 
12{/.notdef}rp /R /.notdef /T /U 170{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [15.288 0 0 -15.288 0 0 ]msf
73.728 524.325 mo
(ACCURATE)
[11.1754 10.4724 10.4724 12.0775 10.4723 11.1754 9.79959 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 2294 69 <000100acfffa047e0511003d0085b3270f0f14b8ffe8b310014d14b8ffe8
b30f014d14b8ffe8b30d014d14b8fff0b30c014d14b8ffe8b30b014d14b8
0211401e1e0a2e2e321810014d32180f014d32180d014d32100c014d3218
0b014d32b802114010001e38520a2e0f270419225119550654003f3f3f12
17393f012fd4e12b2b2b2b2b32113310e12b2b2b2b2b322f33313025140e
022323222e0227012626272316161511140e0223222e0235113436333332
1e0217011e03173326263511343e0233321e0215047e0d151a0d371a2723
2315fe6820411c02020208131f18181f12082c1a521d271f1d11013a1d36
32311801020108131f191620120847141c12080b1d322702e0397d3b4896
4afcf3070d070505070d0704aa28220a17291ffdc83463605d2f4fab4f02
be070c090404090c0700>PBAAAA+Calibri AddT42Char 
2 2604 87 <000200acfffa03c7050e001c00290078b12406b8ffe8b310014d06b8fff0
b30f014d06b8fff0b30d014d06b8fff6b30c014d06b8ffe8b30b014d06b8
02114017111d1810014d1d100f014d1d100c0d014c1d200b014d1db80232
b2001125b8010ab306060c23b8010bb315510c55003f3fed12392fed012f
d4e12b2b2b2b10e12b2b2b2b2b32313001140e02232311140e0223222e02
351134363321321e0407342e0223231133323e0203c74077ad7893091321
19192114082a1a01152a4d696d4c29b53b575d2c9f9b4e6746240393619c
6e3cfe2e080c070505070c0804aa282207173f5c79574f6a340efdf92847
6300>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/N 69 def
/P 87 def
end
PBAAAA+Calibri /Encoding get
dup 78 /N put
dup 80 /P put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C /.notdef /E 
8{/.notdef}rp /N /.notdef /P /.notdef /R /.notdef /T 
/U 170{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [15.288 0 0 -15.288 0 0 ]msf
173.28 524.325 mo
(PARENT)
[10.2582 11.1754 10.5029 9.7997 12.0775 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 856 24 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>PBAAAA+Calibri AddT42Char 
2 1322 44 <000100acfffa04500514002f00b8b43f3101230cb8ffe8b310014d0cb8ff
f0b30f014d0cb8fff0b30d014d0cb8fff6b30c014d0cb8ffe8b30b014d0c
b80211401c17240b1810014d0b100f014d0b100d014d0b0a0c014d0b180b
014d0bb802104017004015014d004013014d00401011014c00400c014d00
17b8ffc0b315014d17b8ffc0b613014d172a5224b8012c400fc00c01d00c
010c0c121d5212550555003f3f3f12392f5d71ed3f012f2b2bd42b2b2b2b
e12b2b2b2b2b3210e12b2b2b2b2b3231305d25140e0223222e0235112111
140e0223222e023511343e0233321e0215112111343e0233321e02150450
081421181a201408fdb308142119182214080814221819211408024d0814
201a182114081a080c070505070c08023efdc2080c070505070c0804da08
0c070505070c08fdfa0206080c070505070c0800>PBAAAA+Calibri AddT42Char 
2 1642 47 <000100acfffa0158051400150050b73f174f17af170300b8ffe8b310014d
00b8fff0b30f014d00b8fff0b30d014d00b8fff6b30c014d00b8ffe8b30b
014d00ba0211000affc0b715014d0a10520555003f3f012f2be12b2b2b2b
2b31305d25140e0223222e023511343e0233321e02150158081421191822
140809152117192114081a080c070505070c0804da080c070505070c0800
>PBAAAA+Calibri AddT42Char 
2 1792 62 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/D 24 def
/H 44 def
/I 47 def
/L 62 def
end
PBAAAA+Calibri /Encoding get
dup 68 /D put
dup 72 /H put
dup 73 /I put
dup 76 /L put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C /D /E 
2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef /N /.notdef 
/P /.notdef /R /.notdef /T /U 170{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [15.288 0 0 -15.288 0 0 ]msf
253.22 524.325 mo
(CHILDREN)
[10.5029 11.8635 6.14575 8.65298 11.619 10.5028 9.79971 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 1948 68 <000100acfffa062b050e003c00ac4010603e703e020d3030172f2f0a2e18
181ab8ffe8b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b3
0c014d1ab8ffe8b30b014d1ab80211401e24310c0c0a1810014d0a100f01
4d0a100d014d0a0a0c014d0a180b014d0aba02110000ffc040190b014d00
2436510b18170d2f18312e061f28511f5512550555003f3f3f3f12173911
333f012fd42be12b2b2b2b2b32113310e12b2b2b2b2b32113311393d2f33
33113331305d25140e0223222e02351123010e0323222e0227012311140e
0223222e02351134363333321e02170133013e033333321e0215062b0814
1f191721130802fe33030b151d14151e140b02fe47010814201918201307
2c1b68203024180901770501860b1a1f26196d0f1b130c1a080c07050507
0c080467fb94070a070304070a06046cfb99080c070505070c0804a62a24
0c1a281bfc5703a61e2a190b09131d15>PBAAAA+Calibri AddT42Char 
2 3188 94 <00010047ffed03630521004900e7b90041ffe8b40f10014c41b8fff0b30d
014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d41b8022c
402b32401314014c324011014d243224320c1b180f10014c1b100d014d1b
1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d00b8ffc0
b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb0127003700
0a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c3711371116
3cb8010cb5411b05295316b80129b10556003fed3f123939ed1139392f2f
2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b2be12b2b
2b2b2b313001140e0223222e0435343e0233321e0233323e0235342e0635
343e0233321e0615140e0223222e0223220e0215141e0603634377a15d41
6f573b170b04080c080e3350714a385d43243252696e6852333b6991542b
574d3c1306040203060b070b2f445d3a3650341a32536a6e6a5333016b5b
8e633216202218251f161d12072228231e375033374e3b31333e54714f51
7f562d0f191f130b111813121c13091c231d1d304225364e3c32333d5371
>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/M 68 def
/S 94 def
end
PBAAAA+Calibri /Encoding get
dup 77 /M put
dup 83 /S put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C /D /E 
2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N /.notdef 
/P /.notdef /R /S /T /U 170{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [15.288 0 0 -15.288 0 0 ]msf
362.38 524.325 mo
(MISS)
[15.3032 6.14575 9.34097 0 ]xsh
FFHUYS+Calibri*1 [15.288 0 0 -15.288 0 0 ]msf
420.62 524.325 mo
(REDUNDANT)
[10.5028 9.79971 11.619 12.0775 12.0775 11.619 11.1754 12.0775 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+Calibri,Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Calibri,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc0ad754000000cc000000606376
74202f4935490000012c000006086670676da1ea42ac0000073400000913
676c7966af6c6cbf000081ec0000130c68656164ecbf33e5000010480000
0036686865610d8d0bf00000108000000024686d74785f10084b000010a4
00002fde6c6f63619edf9b1e0000408400001e4e6d6178701c0216490000
5ed4000000206e616d65de46508300005ef400000d5c70726570c7f0742e
00006c500000159c676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e00002ff4000acff00000001000000004d53202000200000
1d400600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b140465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
00000005b852037921f85f0f3cf50019080000000000bbeb7ccc00000000
cbdab477fbdafd8d09ec07c5000100090002000000000000000100000600
fe0001c40aa0fbdafa8609ec0001000000000000000000000000000008c9
040e000000000000000000000000000004d9001700000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000043c004f0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000006fe008d000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003f6000c00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000447000a000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003cb005a00000000000000000000000000000000
000000000491008600000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
064800860000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000425
008600000000000000000000000000000000000000000000000000000000
0000000000000000037b001b000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000044b004b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000002d8007e0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002f5003a000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000200005a00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000029b00e6000000000000000000000000000000000000
000000000000026900cf0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000382007900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000313001800000000031600540000000000000000000000000000
00000000000000000000000000000000000000000000049a007800000000
000000000000000000000000000000000000000002b0001e000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000313
001800000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000049a0078000000000000
00000000000000000000000000000000000002b0001e0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000009e009e009e009e014d014d
014d014d014d014d014d014d014d014d014d014d014d014d01e001e001e0
01e001e001e001e001e001e001e001e001e001e001e001e001e001e001e0
01e001e001e001e001e001e001e001e001e001e001e001e001e001e001e0
01e001e001e001e001e001e001e001e001e001e001e001e001e001e001e0
01e001e002a402a402a402a402a402a402a402a402a402a402a402a402a4
02a402a402a402a402a402a402a402a402a402a402a402a402a402a402a4
02a402a402a402a403030303030303030303030303030303030303030303
030303030303030303030303030303030303030303030303030303030303
03030303030303030303036b036b036b036b036b036b036b036b036b036b
036b036b036b036b03d203d203d203d203d203d204170417041704170417
041704170417041704170417041704170417041704170417041704170417
041704170417041704170417041704170417041704170417041704170417
041704170417041704170417041704170417048d048d048d048d048d048d
048d048d048d048d048d048d048d048d048d048d048d048d048d048d048d
048d050a050a050a050a050a050a050a050a050a050a054a054a054a054a
054a054a054a054a054a054a054a054a054a054a054a054a054a054a054a
054a054a054a054a054a054a054a054a054a054a054a054a054a054a054a
054a054a054a054a054a054a054a054a054a054a054a054a054a054a054a
054a054a054a054a054a054a05e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
05e605e605e605e605e605e605e605e605e605e605e605e605e605e605e6
066506650665066506650665066506650665066506650665066506650665
066506650665066506650665066506650665066506650665066506650665
066506650665066506650665066506650665066506650665066506650665
066506650665066506650665066506650665066506650665066506650665
0665066506650665066506650665066506650665066506650665066506cb
06cb06cb06cb06cb06cb06cb06cb06cb06cb06cb06cb06cb06cb071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e071e071e071e071e
071e071e071e071e071e071e071e071e071e071e071e076c076c076c076c
076c076c076c07b907b907b907b907b907b907b907b907b907b907b907b9
07b907b907b907b907b907b907b907b907b907b907b907b907b907b907b9
07b907b907b907b907b907b907b907b907b907b907b907b907b907b907b9
07b907b907b907b907b907b907b907b907b907b907b907b907b907b907b9
07b907b907b907b907b907b907b907b907b907b907b907b907b908080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808080808080808080808
080808080808080808080808080808080808080808100810087c087c087c
087c087c087c087c087c087c087c0884088408840884088408840884088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c088c088c088c088c088c088c088c088c088c088c088c088c088c088c
088c08f008f008f008f008f008f008f008f008f008f008f008f008f00952
095209520952095209520952098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860986098609860986098609860986098609860986098609860986
098609860000000100000f26004f0005002c000200020010002f00600000
0c63159c000100010000002d022200000003000000000064000000000003
00000001000e006400000003000000020008032a0000000300000003002e
030400000003000000040018031a00000003000000050018033200000003
000000060018034a0000000300000007007603620000000300000008002a
000e0000000300000009002003d8000000030000000a02a0006400000003
0000000b005603f8000000030000000c002a044e000000030000000d0298
0478000000030000000e006c071000010000000000000032077c00010000
00000001000707ae00010000000000020004091100010000000000030017
08fe0001000000000004000c09090001000000000005000c091500010000
00000006000c09210001000000000007003b092d00010000000000080015
0783000100000000000900100968000100000000000a015007ae00010000
0000000b002b0978000100000000000c001509a3000100000000000d014c
09b8000100000000000e00360b0400030001040900000064000000030001
04090001000e006400030001040900020008032a0003000104090003002e
030400030001040900040018031a00030001040900050018033200030001
040900060018034a0003000104090007007603620003000104090008002a
000e0003000104090009002003d8000300010409000a02a0006400030001
0409000b005603f8000300010409000c002a044e000300010409000d0298
0478000300010409000e006c071000a9002000320030003100320020004d
006900630072006f0073006f0066007400200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e00430061006c
0069006200720069002000690073002000610020006d006f006400650072
006e002000730061006e0073002000730065007200690066002000660061
006d0069006c00790020007700690074006800200073007500620074006c
006500200072006f0075006e00640069006e006700730020006f006e0020
007300740065006d007300200061006e006400200063006f0072006e0065
00720073002e002000490074002000660065006100740075007200650073
0020007200650061006c0020006900740061006c006900630073002c0020
0073006d0061006c006c00200063006100700073002c00200061006e0064
0020006d0075006c007400690070006c00650020006e0075006d00650072
0061006c00200073006500740073002e0020004900740073002000700072
006f0070006f007200740069006f006e007300200061006c006c006f0077
0020006800690067006800200069006d007000610063007400200069006e
002000740069006700680074006c007900200073006500740020006c0069
006e006500730020006f0066002000620069006700200061006e00640020
0073006d0061006c006c0020007400650078007400200061006c0069006b
0065002e002000430061006c0069006200720069002700730020006d0061
006e0079002000630075007200760065007300200061006e006400200074
006800650020006e00650077002000720061007300740065007200690073
006500720020007400650061006d00200075007000200069006e00200062
00690067006700650072002000730069007a0065007300200074006f0020
00720065007600650061006c002000610020007700610072006d00200061
006e006400200073006f0066007400200063006800610072006100630074
00650072002e004d006900630072006f0073006f00660074003a00200043
0061006c006900620072006900200042006f006c00640056006500720073
0069006f006e00200035002e0037003200430061006c0069006200720069
002d0042006f006c006400430061006c0069006200720069002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00670072006f007500700020006f006600200063006f006d00700061006e
006900650073002e004c0075006300280061007300290020006400650020
00470072006f006f00740068007400740070003a002f002f007700770077
002e006d006900630072006f0073006f00660074002e0063006f006d002f
007400790070006f006700720061007000680079002f006300740066006f
006e007400730068007400740070003a002f002f0066006f006e00740066
0061006200720069006b002e0063006f006d0059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
0020006100730020007000650072006d0069007400740065006400200062
00790020007400680065002000450055004c004100200066006f00720020
007400680065002000700072006f006400750063007400200069006e0020
007700680069006300680020007400680069007300200066006f006e0074
00200069007300200069006e0063006c007500640065006400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e0074002e00200059006f
00750020006d006100790020006f006e006c007900200028006900290020
0065006d0062006500640020007400680069007300200066006f006e0074
00200069006e00200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
006500200065006d00620065006400640069006e00670020007200650073
007400720069006300740069006f006e007300200069006e0063006c0075
00640065006400200069006e0020007400680069007300200066006f006e
0074003b00200061006e006400200028006900690029002000740065006d
0070006f0072006100720069006c007900200064006f0077006e006c006f
006100640020007400680069007300200066006f006e007400200074006f
002000610020007000720069006e0074006500720020006f00720020006f
00740068006500720020006f007500740070007500740020006400650076
00690063006500200074006f002000680065006c00700020007000720069
006e007400200063006f006e00740065006e0074002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f0066006f006e00740073002f00640065006600610075006c0074
002e0061007300700078a92032303132204d6963726f736f667420436f72
706f726174696f6e2e20416c6c205269676874732052657365727665642e
43616c696272692069732061206d6f6465726e2073616e73207365726966
2066616d696c79207769746820737562746c6520726f756e64696e677320
6f6e207374656d7320616e6420636f726e6572732e204974206665617475
726573207265616c206974616c6963732c20736d616c6c20636170732c20
616e64206d756c7469706c65206e756d6572616c20736574732e20497473
2070726f706f7274696f6e7320616c6c6f77206869676820696d70616374
20696e2074696768746c7920736574206c696e6573206f66206269672061
6e6420736d616c6c207465787420616c696b652e2043616c696272692773
206d616e792063757276657320616e6420746865206e6577207261737465
7269736572207465616d20757020696e206269676765722073697a657320
746f2072657665616c2061207761726d20616e6420736f66742063686172
61637465722e4d6963726f736f66743a2043616c6962726920426f6c6456
657273696f6e20352e373243616c696272692d426f6c6443616c69627269
20697320612074726164656d61726b206f6620746865204d6963726f736f
66742067726f7570206f6620636f6d70616e6965732e4c75632861732920
64652047726f6f74687474703a2f2f7777772e6d6963726f736f66742e63
6f6d2f7479706f6772617068792f6374666f6e7473687474703a2f2f666f
6e7466616272696b2e636f6d596f75206d61792075736520746869732066
6f6e74206173207065726d6974746564206279207468652045554c412066
6f72207468652070726f6475637420696e20776869636820746869732066
6f6e7420697320696e636c7564656420746f20646973706c617920616e64
207072696e7420636f6e74656e742e20596f75206d6179206f6e6c792028
692920656d626564207468697320666f6e7420696e20636f6e74656e7420
6173207065726d69747465642062792074686520656d62656464696e6720
7265737472696374696f6e7320696e636c7564656420696e207468697320
666f6e743b20616e6420286969292074656d706f726172696c7920646f77
6e6c6f6164207468697320666f6e7420746f2061207072696e746572206f
72206f74686572206f75747075742064657669636520746f2068656c7020
7072696e7420636f6e74656e742e687474703a2f2f7777772e6d6963726f
736f66742e636f6d2f7479706f6772617068792f666f6e74732f64656661
756c742e6173707800>
<b10903b802f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c
1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb8
02f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802ed
b21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e
2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1f
b802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802
e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb2
1d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f
1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb8
02d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cf
b21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d121fb802cbb21d
121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1f
b802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802
c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb2
1d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f
1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb8
02b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1
b21c321fb802b0b21c321fb802afb21c331fb802aeb21c331fb802adb21c
331fb802acb21c331fb802abb21c331fb802aab21c311fb802a9b21c311f
b802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5b21c321fb802
a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c331fb802a0b2
1c331fb8029fb21c331fb8029eb21c331fb8029db21c331fb8029cb21c31
1fb8029bb21c311fb8029ab21c321fb80299b21c321fb80298b21c321fb8
0297b21c321fb80296b21c321fb80295b21c331fb80294b21c331fb80293
b21c331fb80292b21c331fb80291b21c331fb80290b21c331fb8028fb21c
331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8028bb21c321f
b8028ab21c321fb80289b21c321fb80288b21c331fb80287b21c331fb802
86b21c331fb80285b21c331fb80284b21c331fb80283b21c331fb80282b2
1b341fb80281b21b341fb80280b21b341fb8027fb21b341fb8027eb21b34
1fb8027db21b341fb8027cb21b341fb8027bb21b341fb8027ab21b341fb8
0279b21b341fb80278b21b341fb80277b21b341fb80276b21b341fb80275
b21b341fb80274b21b341fb80273b21b341fb80272b21b341fb80271b21b
341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8026db21a351f
b8026cb21a351fb8026bb21a351fb8026ab21a351fb80269b21a351fb802
68b21a351fb80267b21a351fb80266b21a351fb80265b21a351fb80264b2
1a351fb80263b21a351fb80262b21a351fb80261b21a351fb80260b21a35
1fb8025fb21a351fb8025eb21a351fb8025db21a351fb8025cb21a351fb8
025bb21a351fb8025ab21a351fb80259b219371fb80258b219371fb80257
b219371fb80256b219371fb80255b219371fb80254b219371fb80253b219
371fb80252b219371fb80251b219371fb80250b219371fb8024fb219371f
b8024eb219371fb8024db219371fb8024cb219371fb8024bb219371fb802
4ab219371fb80249b219371fb80248b219371fb80247b219371fb80246b2
19371fb80245b219371fb80244b219371fb80243b219371fb80242b21937
1fb80241b219371fb80240b219371fb8023fb219371fb8023eb219371fb8
023db219371fb8023cb219371fb8023bb219371fb8023ab219371fb80239
b218391fb80238b218391fb80237b218391fb80236b218391fb80235b218
391fb80234b218391fb80233b218391fb80232b218391fb80231b218391f
b80230b218391fb80301b2182e1fb8022fb218391fb8022eb218391fb802
2db218391fb8022cb218391fb8022bb218391fb8022ab218391fb80229b2
18391fb80228b218391fb80227b218391fb80226b218391fb80225b2173b
1fb80224b2173b1fb80223b217321fb80222b2173a1fb80221b2173b1fb8
0220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2173b1fb8021c
b2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b1fb80218b217
3b1fb80217b2173b1fb80216b2173b1fb80215b217321fb80214b2173a1f
b80213b2173b1fb80212b2173b1fb80211b2173b1fb80210b2173b1fb802
0fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb2173b1fb8020bb2
173b1fb8020ab2173b1fb80209b217321fb80208b217321fb80207b2173b
1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb80203b2173b1fb8
0202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2173b1fb801fe
b2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b1fb801fab217
3b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb801f6b2173a1f
b801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2b2173b1fb801
f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb2173b1fb801edb2
173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1fb801e9b2173b
1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801e5b216231fb8
01e4b216371fb801e3b216371fb801e2b216381fb801e1b216381fb801e0
b216431fb801dfb216441fb801deb216441fb801ddb216441fb801dcb216
451fb801dbb216461fb801dab216461fb801d9b216461fb801d8b216231f
b801d7b216231fb801d6b216381fb801d5b216431fb801d4b216431fb801
d3b216431fb801d2b216441fb801d1b216461fb801d0b216461fb801cfb2
16461fb801ceb216461fb801cdb216461fb801ccb216461fb801cbb21643
1fb801cab216231fb801c9b216231fb801c8b216371fb801c7b216371fb8
01c6b216381fb801c5b216421fb801c4b216431fb801c3b216441fb801c2
b216451fb801c1b216461fb801c0b216461fb801bfb216461fb801beb216
461fb801bdb216461fb801bcb216461fb801bbb216461fb801bab216371f
b801b9b216381fb801b8b216421fb801b7b216431fb801b6b216431fb801
b5b216431fb801b4b216441fb801b3b216441fb801b2b216441fb801b1b2
16451fb801b0b216451fb801afb216451fb801aeb216461fb801adb21646
1fb801acb216461fb801abb216461fb801aab216461fb801a9b215341fb8
01a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2154e1fb801a4
b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d1fb801a0b215
4e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8019cb215401f
b8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198b2154f1fb801
97b2154f1fb80196b215501fb80195b215521fb80194b215521fb80193b2
15521fb80192b215411fb80191b2154f1fb80190b215501fb8018fb21550
1fb8018eb215511fb8018db215521fb8018cb215521fb8018bb215521fb8
018ab214581fb80189b214591fb80188b2145c1fb80187b2145d1fb80186
b2144a1fb80185b2145b1fb80184b2145c1fb80183b214591fb80182b214
5d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c4e1fc10c4e1f
c00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561fae0b561fad0b
561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b561fa60b561f
a50b561fa40b561fa30b561fa20b561fa10b561fa00b561f9f0b561f9e0a
681f9a0a681f990a681f980a681f970a681f960a681f950a681f940a681f
930a681f920a681f910a681f9009681f8f09681f8e09681f8d09681f8c09
681f410902fc02fa0056001f02fb02fa0068001f017fb213321fb8017eb2
12371fb80174b212371fb80173b211421fb80172b211421fb80171b21142
1fb80170b211421fb8016fb211421fb8016eb211421fb8016db211421fb8
016cb211421fb8016bb211421fb8016ab211421fb8013cb211421fb8013b
b210421fb8013ab210421fb80139b210421fb80138b210421fb80137b210
421fb80136b210421fb80135b210421fb80134b210421fb80133b210421f
b80132b20f451fb80131b20f451fb80130b20f451fb80112b20f451fb801
11b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451fb8010db2
0e481fb8010cb20e481fb8010bb20e481fb8010ab20e481fb80109b20e48
1fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a
1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc
0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe0b561fbd0b56
1fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180b213321fb801
7ab211401fb80179b211421fb80178b211421fb80177b211421fb80176b2
11421fb80175b211421fb80143b211421fb80142b210421fb80141b21042
1fb80140b210421fb8013fb210421fb8013eb210421fb8013db20f451fb8
0115b20f451fb80114b20f451fb80113b20f451fb903030302b2401fa4be
030200b4030200c4030200030300b213321fb8017bb213321fb80153b212
371fb80152b211401fb80151b211401fb80150b211401fb8014fb211401f
b8014eb211401fb8014db211401fb8014cb211401fb8014bb211401fb801
4ab211401fb80149b211401fb80148b211401fb80147b211401fb80146b2
11401fb80145b211401fb80144b211401fb80122b211401fb80121b21042
1fb80120b210421fb8011fb210421fb8011eb210421fb8011db210421fb8
011cb210421fb8011bb210421fb8011ab210421fb80119b210421fb80118
b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc0f451ffb0f45
1ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e481ff40e481ff3
0d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a
1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc8
0c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b56
1fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fdb212371fb801
7db212371fb8017cb212371fb80169b2112e1fb80168b2112e1fb80167b2
11401fb80166b211401fb80165b211401fb80164b211401fb80163b21140
1fb80162b211401fb80161b211401fb80160b211401fb8015fb211401fb8
015eb211401fb8015db211401fb8015cb211401fb8015bb211401fb8015a
b211401fb80159b211401fb80158b211401fb80157b211401fb80156b211
401fb80155b211401fb80154b211401fb8012fb211401fb8012eb210421f
b8012db210421fb8012cb210421fb8012bb210421fb8012ab210421fb801
29b210421fb80128b210421fb80127b210421fb80126b210421fb80125b2
0f451fb80124b20f451fb80123b20f451fb80105b20f451fb80104b20f45
1fb80103b20f451fb80102b20f451fb80101b20e481fb8010040a20e481f
ff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c
4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f
83012e1f8248805581ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b
7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a7948775578ab
77550b77010c764875555475e475f4750314755475647574759475d475e4
7507a475b475c47503b8ffc0401275383b46807590750214757475020075
010fb8ffc04021750b0e467448725573ab725504723472023bf47201e072
01023072015072607202b8ffc0b372242846b8ffc0403572161a46107230
7240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6f
bf6f02406f090d466e486d55df6d0100bc02ff001002ff00c002ffb2030a
6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e675568ab675566
2e645565ab6455632e6255612e60555f2e5d555eab5d555c2e5a555bab5a
55592e58555703251f562e545555ab5455532e515552ab51554f2e4e554e
03251f4d2e4b554cab4b554a2e485549ab4855504801472e46554503361f
001f01001e01001e701e801ef01e040b601d701d02701de01df01d03701c
f01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f191f198f199f
19af19050f198f199f19030c7012801202701180110230114011d011e011
040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0e
cf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f0d1f0d40472f
0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f0c4f0c5f0c03
9f0c01400c262946ef0aff0a02400a242746ef09ff0902ff090100030120
01010001100120010308b8ffc0b301151f46b80100b316010501b80190b1
54532b2b4bb807ff524bb008505bb00188b02553b00188b040515ab00688
b000555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d
00421d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db1
160042592b5e73757373742b732b73742b2b73745e732b5e737475737475
5e73747573015e7374737475757473745e737473002b2b732b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b
732b2b73755f75755e732b2b2b5e7373732b7374752b5e732b2b5e732b2b
73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b185f5e00>
[4877 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 316 4 <00020017fffa04c305140022002600e1b10102435558b90024ffe8b40b0f
014c23b8ffe8401e0b0f014c250c0d23180d0016010e16260b0a23220a00
2004230111232625b8012a401e400b000c0112030c0c271d2423231e0a0d
160023221807121d521255055500183f3f3f1217393811331112392f5f5e
5d331a4ded3201192f5e5d1a18cd32337d87c4c40118c45e5d32337d87c4
c43130002b2b1bb90024ffe8b40b0f014c23b8ffe8b50b0f014c2625b801
2a401e400b000c0112030c0c271d2423231e0a0d160023221807121d5212
55055500183f3f3f1217393811331112392f5f5e5d331a4ded3231302b2b
59251616060623222e02270321070e03232226263637013e0333321e0217
0723032104b10c0616383133391e0c0457fe1a52040d1d352b2e3414060c
018f0610233e333b46271106c201b7016f62242a15050309100d0104fd0e
130b0406172a23047c11150b03030b1613c6fdda>HIBBAA+Calibri,Bold AddT42Char 
2 666 18 <0001004fffeb040c05230039008bb10102435558b21c002bbe02c7000e00
18016100210026ffe8b40b0f014c26b80160b2135304b8015ab73530180b
0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed012fedd4c4
31301bbc0018016100210026ffe8b40b0f014c26b80160b2135304b8015a
b73530180b0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed
31305925140e0623222e02353412363633321e0615140e0223222e022322
0e0215141e0233323e0233321e02040c03060a163f5b754485d69650589e
dd85366455441b0a0603040a0e090f2e4965464d79552c2f577b4d466649
2f0d0a0c0804c4192319121724211652a3f4a2a50100ae5a121d261b121c
261c1e2a1a0c232b233f75a66872a76c3521282008182b00>HIBBAA+Calibri,Bold AddT42Char 
2 1352 100 <0001000cfffa03ea050e00220055b10102435558b10006b80294b3181106
12b8ffe8b40b0f014c12b8015bb4401d510c5500183f3f1a4ded2b32012f
c4fdcd31301bb10612b8ffe8b40b0f014c12b8015bb4401d510c5500183f
3f1a4ded2b3231305901140e02232111140e0223222e02351121222e0235
343e023321321e0203ea050a0f09febc0d1e332626331e0dfebc0a0e0a05
050a0e0a0390090f0a0504a21d29190cfbed0a100a06060a100a04130c19
291d1e2a190b0b192a00>HIBBAA+Calibri,Bold AddT42Char 
2 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>HIBBAA+Calibri,Bold AddT42Char 
HIBBAA+Calibri,Bold /CharStrings get begin
/A 4 def
/C 18 def
/T 100 def
end
HIBBAA+Calibri,Bold /Encoding get
dup 65 /A put
dup 67 /C put
dup 84 /T put
pop
end
%ADOEndSubsetFont
/FFHUYT+Calibri,Bold /HIBBAA+Calibri,Bold findfont ct_VMDictPut
/FFHUYT+Calibri,Bold*1 
[65{/.notdef}rp /A /.notdef /C 16{/.notdef}rp /T 171{/.notdef}rp]
FFHUYT+Calibri,Bold nf
FFHUYT+Calibri,Bold*1 [30.384 0 0 -30.384 0 0 ]msf
278.9 50.2948 mo
(CTA)
[18.4737 15.0399 0 ]xsh
90.316 93.4648 mo
99.7213 93.4648 li
99.7213 84.0595 li
90.316 84.0595 li
cp
.441932 .103243 .851316 .000457771 cmyk
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if

2 0 3 <> PBAAAA+Calibri AddT42Char 
2 7354 258 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>PBAAAA+Calibri AddT42Char 
2 7704 272 <0001005affed032003c900350089b11c00b8ffc0b310014d00b8ffe0b30d
014d00b8ffe8b40b014d0027b8ffe8b310014d27b8fff0b30f014d27b8ff
eeb30c014d27b8ffe8b30b014d27b8ffeab30d014d27b8020b400d2f0e01
0e19e71f400a0d481f24b80102b4134a03eb31b8ffc0b4090d48312cb801
06b1094d003ffdd42bed3ffdd42bed012f5de12b2b2b2b2bc42b2b2b3231
3025140e0623222e0235343e0233321e0615140623222e0223220615141e
0233323e0233321e020320020507193c4b582f61966535417199592b5144
3518090602120d0f273c553a777f21405d3c39563f2b0c070a0703a21119
110d19251d12407bb37585bf7a3b101a22180e131812271f212821b7ae57
83582b242b2308131d00>PBAAAA+Calibri AddT42Char 
2 9156 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>PBAAAA+Calibri AddT42Char 
2 13220 336 <00030035fe93038903c8003e004e005f00d04015122d47100f014d47080c
014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d3fb8ffe0
b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707b8ffe0b3
10014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040340b014d
0058100f014d58201012014c582a25400b12014c250f300703384ada0c53
e81515603803e93c482a2042d9384a5bd9204f003fed3fed12393fed1112
392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b1112173910
cd2b10cd2b2b2b10cd2b2b2b10cd31300114062323161615140e02232226
27060615141617171e0315140e0223222e0235343e023726263534363726
2635343e023332161721321601342623220e0215141633323e0213342627
270e0315141633323e020389130f81231c325d804e37631b12174136eb43
70522e346ba6716d99622c10213120312f32251f24345c814c29471f0110
1111fefe655d30472f17655b31482f17535f51e92029180984764b653e1b
0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e70553125
405934213e383319194c2c3d6026255d424d7a542d090821fef15c672038
492859661f3748fd5e3a3f0208192d29281541431d303e00>PBAAAA+Calibri AddT42Char 
2 14246 349 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>PBAAAA+Calibri AddT42Char 
2 14576 367 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>PBAAAA+Calibri AddT42Char 
2 14710 374 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>PBAAAA+Calibri AddT42Char 
2 15284 393 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>PBAAAA+Calibri AddT42Char 
2 15586 396 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>PBAAAA+Calibri AddT42Char 
2 15828 400 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>PBAAAA+Calibri AddT42Char 
3 510 410 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>PBAAAA+Calibri AddT42Char 
3 2904 455 <00010022fe94037c03bc00240052b9001bfff040350b014d371b01291b01
18180b014d261801260e360e022709011a400b014d3a1a0119380b014d3b
19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b5d2b015d
5d5d2b5d5d2b2103060623222e023713262627012634363633321e021701
33133e023332161614070233780631321a201102067c091003febf081024
1e1e22140905010103f8061122201c241106feb51011050c140e01390412
0a035c15180e0503080f0dfd2e02d6130b05050e1812>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/space 3 def
/a 258 def
/c 272 def
/e 286 def
/g 336 def
/i 349 def
/l 367 def
/n 374 def
/p 393 def
/r 396 def
/s 400 def
/t 410 def
/y 455 def
end
PBAAAA+Calibri /Encoding get
dup 32 /space put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six 2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C 
/D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M 
/N /.notdef /P /.notdef /R /S /T /U 
11{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/.notdef /i 2{/.notdef}rp /l /.notdef /n /.notdef /p 
/.notdef /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
103.73 93.6148 mo
(replacing strategy)
[5.97207 8.60736 8.89813 3.93568 8.19672 7.23845 3.93568 8.88103 8.19652 3.86728 6.6909 5.66418 
5.97206 8.19672 5.6813 8.64159 7.99118 0 ]xsh
245.46 83.9248 mo
250.25 88.7148 li
245.46 93.5148 li
240.66 88.7148 li
cp
.719692 .439979 .027985 3.0518e-5 cmyk
f
245.46 83.9248 mo
250.25 88.7148 li
245.46 93.5148 li
240.66 88.7148 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 8854 282 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>PBAAAA+Calibri AddT42Char 
2 9478 296 <00010025fffa02860578003c0064b2161000b8ffe0b40b014d001bb8fff0
b30d014d1bb8fff0b40f10014c1bb8fff6b30c014d1bb8ffe8b30b014d1b
b801f9b2302a25b8ffd040121011014c250aed36471a26ed3048204c1048
003f3f3fed323fed012f2bc433f12b2b2b2bc42b33c4313001140e022322
2e0223220e02151533321e02151406232311140e0223222e023511232226
35343e02333335343e0233321e0402860405080607151e291b2534200ec9
080b0905120fc908132018182013087f101004080c087f23486d4a234224
0c0803050f13170e05090b091833513a6207111a132420fceb080b080404
080b0803152024131a11075d5e8756290d0f0c131b00>PBAAAA+Calibri AddT42Char 
2 15000 381 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>PBAAAA+Calibri AddT42Char 
3 2616 437 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/d 282 def
/f 296 def
/o 381 def
/u 437 def
end
PBAAAA+Calibri /Encoding get
dup 100 /d put
dup 102 /f put
dup 111 /o put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six 2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C 
/D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M 
/N /.notdef /P /.notdef /R /S /T /U 
11{/.notdef}rp /a /.notdef /c /d /e /f /g 
/.notdef /i 2{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
254.26 93.6148 mo
(regard as one fault)
[5.97206 8.65869 7.99118 8.19672 5.97208 8.9837 3.86728 8.19672 6.86203 3.67902 9.12057 8.93237 
8.67578 3.86728 5.25327 8.19672 8.98367 3.86725 0 ]xsh
397.51 93.5148 mo
407.099 93.5148 li
407.099 83.9255 li
397.51 83.9255 li
cp
.18497 .816068 .688869 .0602731 cmyk
f
1.427 lw
397.51 93.5148 mo
407.099 93.5148 li
407.099 83.9255 li
397.51 83.9255 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 13982 346 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/h 346 def
end
PBAAAA+Calibri /Encoding get
dup 104 /h put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFHUYS+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six 2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C 
/D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M 
/N /.notdef /P /.notdef /R /S /T /U 
11{/.notdef}rp /a /.notdef /c /d /e /f /g 
/h /i 2{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
FFHUYS+Calibri nf
FFHUYS+Calibri*1 [17.112 0 0 -17.112 0 0 ]msf
411.29 93.6148 mo
(distinguish faults)
[8.89813 4.08969 6.62247 5.73264 3.86725 9.12057 7.99118 8.89813 4.08972 6.62244 8.89813 3.86728 
5.25327 8.19672 9.15479 3.93573 5.66418 0 ]xsh
gsave
50.4 541.625 mo
561.6 541.625 li
561.6 6.06482 li
50.4 6.06482 li
cp
eclp
51.415 540.785 mo
560.905 540.785 li
560.905 7.01477 li
51.415 7.01477 li
cp
1 /0 /CSD get_res sepcs
.149 sep
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/FFHUYT+Calibri,Bold*1 uf
/FFHUYT+Calibri,Bold uf
/HIBBAA+Calibri,Bold uf
/FFHUYS+Calibri*1 uf
/FFHUYS+Calibri uf
/PBAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 2909 1322 a(\(c\))g(Caption)h(of)h(sub\014gure)d(3)1024
1530 y Fo(Figure)k(3:)39 b(Caption)30 b(of)f(sub\014gures)h(\(a\),)f
(\(b\))i(and)e(\(c\))-152 1781 y Fq(fault)n(y)d(tuples)f(that)g(ha)n(v)
n(e)g(no)h(more)g(than)e(2)i(parameters.)-77 1868 y(Ghandehari.etc)e
([8])g(de\014nes)f(the)g(suspiciousness)i(of)f(tuple)f(and)-152
1955 y(suspiciousness)h(of)h(the)d(en)n(vironmen)n(t)h(of)h(a)f(tuple.)
33 b(Based)24 b(on)g(this,)-152 2043 y(they)g(rank)h(the)f(p)r(ossible)
i(tuples)e(and)h(generate)g(the)g(test)g(con\014gu-)-152
2130 y(rations.)35 b(Although)23 b(their)i(approac)n(h)f(imp)r(oses)h
(minimal)g(assump-)-152 2217 y(tion,)e(it)f(do)r(es)f(not)h(ensure)f
(that)g(the)g(tuples)g(rank)n(ed)g(in)g(the)g(top)g(are)-152
2304 y(the)k(fault)n(y)h(tuples.)-77 2391 y(Yilmaz)e([17])i(prop)r
(osed)e(a)g(mac)n(hine)g(learning)g(metho)r(d)g(to)g(iden-)-152
2478 y(tify)f(inducing)f(com)n(binations)g(from)h(a)g(com)n(binatorial)
h(testing)e(set.)-152 2566 y(They)28 b(construct)g(a)h(classi\014ed)g
(tree)f(to)g(analyze)h(the)f(co)n(v)n(ering)g(ar-)-152
2653 y(ra)n(ys)g(and)g(detect)g(p)r(oten)n(tial)g(fault)n(y)g(com)n
(binations.)43 b(Beside)29 b(this,)-152 2740 y(F)-6 b(ouc)n(h)58
2721 y(~)48 2740 y(Al)f(')32 b([7])h(and)g(Shaky)n(a)e([15])j(made)f
(some)g(impro)n(v)n(emen)n(ts)f(in)-152 2827 y(iden)n(tifying)23
b(failure-inducing)h(com)n(binations)f(based)h(on)f(Yilmaz's)-152
2914 y(w)n(ork.)-77 3001 y(Our)c(previous)h(w)n(ork)g([14])g(ha)n(v)n
(e)g(prop)r(osed)f(an)h(approac)n(h)f(that)h(u-)-152
3089 y(tilize)e(the)f(tuple)f(relationship)i(tree)f(to)g(isolate)i(the)
d(failure-inducing)-152 3176 y(com)n(binations)28 b(in)g(a)g(failing)i
(test)d(case.)42 b(One)27 b(no)n(v)n(elt)n(y)g(of)i(this)e(ap-)-152
3263 y(proac)n(h)21 b(is)h(that)e(it)i(can)f(iden)n(tify)f(the)h(o)n(v)
n(erlapp)r(ed)f(fault)n(y)h(com)n(bina-)-152 3350 y(tions.)42
b(This)28 b(w)n(ork)g(also)h(alleviates)g(the)e(problem)h(of)g(in)n
(tro)r(ducing)-152 3437 y(newly)21 b(failure-inducing)f(com)n
(binations)h(in)f(additional)h(test)f(cases.)-77 3525
y(Besides)g(w)n(orks)f(that)f(aims)i(at)f(iden)n(tifying)f(the)h
(failure-inducing)-152 3612 y(com)n(binations)36 b(in)f(test)h(cases,)j
(there)c(are)h(some)g(w)n(ork)g(fo)r(cus)g(on)-152 3699
y(w)n(orking)26 b(around)f(the)g(masking)h(e\013ects:)-77
3786 y(With)35 b(ha)n(ving)f(kno)n(wn)h(masking)g(e\013ects)g(in)g
(prior,)j(Cohen)d([4])-152 3873 y(use)23 b(a)g(SA)-6
b(T)23 b(solv)n(er)g(to)g(a)n(v)n(oid)g(these)g(masking)g(e\013ects)g
(in)g(test)g(cases)-152 3960 y(generating)34 b(pro)r(cess.)59
b(Additional)33 b(constrain)n(ts)g(impacts)h(in)f(CT)-152
4048 y(w)n(ere)26 b(studied)e(in)g(w)n(orks)h(lik)n(e)g([1,)h(3,)f(2,)h
(9,)f(16].)35 b(These)26 b(approac)n(hes)-152 4135 y(use)35
b(some)h(rules)f(or)h(to)f(a)n(v)n(oid)g(these)g(in)n(v)l(alidated)f
(test)i(cases)g(to)-152 4222 y(impro)n(v)n(e)26 b(the)f(e\016ciency)g
(when)g(examine)h(the)f(test)g(cases.)-77 4309 y(Dumlu)h(and)h(Ylimaz)g
(in)g([6])h(prop)r(osed)f(a)g(feedbac)n(k-driv)n(en)e(ap-)-152
4396 y(proac)n(h)32 b(to)g(w)n(ork)g(around)g(the)f(masking)h
(e\013ects.)54 b(In)31 b(sp)r(eci\014c,)j(it)-152 4483
y(\014rst)22 b(use)g(CT)-6 b(A)23 b(classify)g(the)f(p)r(ossible)h
(failure-inducing)f(com)n(bina-)-152 4571 y(tions)29
b(and)e(then)g(eliminate)i(them)f(and)f(generate)i(new)f(test)g(cases)
-152 4658 y(to)h(detect)e(p)r(ossible)i(mask)n(ed)f(in)n(teraction)g
(in)g(the)g(next)f(iteration.)-152 4745 y(They)22 b(further)g(extended)
e(their)i(w)n(ork)g(in)g([18],)i(in)e(whic)n(h)g(they)f(pro-)-152
4832 y(p)r(osed)33 b(a)f(m)n(ultiple-class)h(CT)-6 b(A)32
b(approac)n(h)h(to)f(distinguish)g(faults)-152 4919 y(in)g(SUT.)g(In)f
(addition,)j(they)d(empirically)i(studied)e(the)h(impacts)-152
5006 y(on)26 b(b)r(oth)f(ternary-class)h(and)f(m)n(ultiple-class)h(CT)
-6 b(A)25 b(approac)n(hes.)-77 5094 y(Our)17 b(w)n(ork)h(di\013ers)g
(from)h(these)e(ones)i(mainly)e(in)h(the)f(fact)i(that)e(w)n(e)-152
5181 y(formally)24 b(studied)d(the)h(masking)h(e\013ects)f(on)h(F)n(CI)
f(approac)n(hes)g(and)-152 5268 y(further)27 b(prop)r(osed)g(a)h
(divide-and-conquer)c(strategy)j(to)h(alleviate)-152
5355 y(this)e(impact.)2040 1781 y Fr(7.)99 b(CONCLUSIONS)2115
1889 y Fq(Masking)37 b(e\013ects)h(of)f(m)n(ultiple)g(faults)h(in)f
(SUT)g(can)g(bias)g(the)2040 1976 y(result)30 b(of)g(traditional)g
(failure-inducing)f(com)n(binations)g(iden)n(tify-)2040
2063 y(ing)e(approac)n(hes.)37 b(In)26 b(this)h(pap)r(er,)f(w)n(e)h
(formalized)h(the)f(pro)r(cess)g(of)2040 2150 y(iden)n(tifying)e
(failure-inducing)f(com)n(binations)h(under)f(the)g(circum-)2040
2238 y(stance)k(that)f(masking)h(e\013ects)f(exist)h(in)f(SUT)h(and)f
(try)f(to)i(under-)2040 2325 y(stand)e(ho)n(w)h(do)g(this)g(impacts)g
(brough)n(t)e(b)n(y)h(masking)h(e\013ect.)38 b(F)-6 b(ur-)2040
2412 y(thermore,)27 b(w)n(e)g(ha)n(v)n(e)f(presen)n(ted)g(a)h(divide)f
(and)h(conquer)e(strategy)2040 2499 y(to)c(assist)h(traditional)g(F)n
(CI)f(approac)n(hes)g(to)g(alleviate)h(this)f(impact.)2115
2586 y(In)39 b(the)h(empirically)g(studies,)k(w)n(e)d(extended)d(three)
i(F)n(CI)g(ap-)2040 2674 y(proac)n(hes)33 b(with)g(our)f(strategy)-6
b(.)56 b(The)33 b(comparison)g(b)r(et)n(w)n(een)g(this)2040
2761 y(three)22 b(traditional)h(approac)n(hes)f(with)g(their)g(v)l
(ariation)g(is)h(conduct-)2040 2848 y(ed)33 b(on)g(on)h(sev)n(eral)f
(op)r(en-source)g(soft)n(w)n(are.)60 b(The)33 b(results)h(sho)n(ws)2040
2935 y(that)23 b(our)h(strategy)g(do)g(assist)h(traditional)f(F)n(CI)g
(approac)n(hes)g(get)g(a)2040 3022 y(b)r(etter)h(p)r(erformance)i(when)
e(facing)i(masking)e(e\013ects)h(in)g(SUT.)2115 3109
y(As)c(a)g(future)g(w)n(ork,)h(w)n(e)f(need)g(to)g(do)g(more)g
(empirical)i(studies)d(to)2040 3197 y(mak)n(e)26 b(our)g(conclusion)g
(more)g(general.)36 b(Our)26 b(curren)n(t)f(exp)r(erimen-)2040
3284 y(tal)f(sub)t(jects)h(are)f(sev)n(eral)g(middle-sized)g(soft)n(w)n
(are,)i(w)n(e)f(w)n(ould)e(lik)n(e)2040 3371 y(to)35
b(extend)e(our)i(approac)n(h)f(in)n(to)h(more)g(complicated)g(and)f
(large-)2040 3458 y(scaled)27 b(testing)f(scenarios.)37
b(Another)25 b(promising)i(w)n(ork)f(in)g(the)f(fu-)2040
3545 y(ture)h(is)h(to)f(com)n(bine)g(white-b)r(o)n(x)f(testing)i(tec)n
(hnique)e(to)h(mak)n(e)g(the)2040 3632 y(F)n(CI)37 b(approac)n(hes)g
(get)h(more)f(accurate)h(results)f(when)g(handling)2040
3720 y(masking)c(e\013ects.)55 b(W)-6 b(e)33 b(b)r(eliev)n(e)f(that)g
(\014guring)h(out)f(the)g(faulting)2040 3807 y(lev)n(els)26
b(of)h(di\013eren)n(t)e(bugs)g(through)g(white-b)r(o)n(x)g(testing)h
(tec)n(hnique)2040 3894 y(is)35 b(helpful)f(to)g(reduce)g(misjudgemen)n
(ts)h(in)f(the)g(failure-inducing)2040 3981 y(com)n(binations)26
b(iden)n(tifying)f(pro)r(cess.)2040 4189 y Fr(8.)99 b(REFERENCES)2078
4307 y Fq([1])39 b(R.)25 b(C.)h(Bryce)g(and)f(C.)h(J.)h(Colb)r(ourn.)f
(Prioritized)2197 4394 y(in)n(teraction)f(testing)h(for)h(pair-wise)f
(co)n(v)n(erage)g(with)g(seeding)2197 4481 y(and)f(constrain)n(ts.)h
Fn(Information)h(and)h(Softwar)l(e)g(T)-6 b(e)l(chnolo)l(gy)p
Fq(,)2197 4568 y(48\(10\):960{970,)29 b(2006.)2078 4664
y([2])39 b(A.)25 b(Calv)l(agna)i(and)e(A.)g(Gargan)n(tini.)i(A)e
(logic-based)2197 4751 y(approac)n(h)g(to)h(com)n(binatorial)g(testing)
g(with)g(constrain)n(ts.)g(In)2197 4838 y Fn(T)-6 b(ests)29
b(and)e(pr)l(o)l(ofs)p Fq(,)g(pages)f(66{83.)i(Springer,)d(2008.)2078
4933 y([3])39 b(B.)26 b(Chen,)f(J.)i(Y)-6 b(an,)25 b(and)g(J.)h(Zhang.)
g(Com)n(binatorial)h(testing)2197 5021 y(with)e(shielding)h
(parameters.)h(In)e Fn(Softwar)l(e)j(Engine)l(ering)2197
5108 y(Confer)l(enc)l(e)g(\(APSEC\),)g(2010)g(17th)g(Asia)f(Paci\014c)p
Fq(,)g(pages)2197 5195 y(280{289.)h(IEEE,)e(2010.)2078
5290 y([4])39 b(M.)26 b(B.)g(Cohen,)g(M.)g(B.)g(Dwy)n(er,)g(and)f(J.)h
(Shi.)g(Constructing)2197 5378 y(in)n(teraction)f(test)h(suites)g(for)g
(highly-con\014gurable)f(systems)p eop end
%%Page: 11 11
TeXDict begin 11 10 bop 5 -69 a Fq(in)25 b(the)g(presence)h(of)g
(constrain)n(ts:)35 b(A)25 b(greedy)g(approac)n(h.)5
19 y Fn(Softwar)l(e)j(Engine)l(ering,)g(IEEE)f(T)-6 b(r)l(ansactions)29
b(on)p Fq(,)5 106 y(34\(5\):633{650,)g(2008.)-113 201
y([5])38 b(C.)26 b(J.)h(Colb)r(ourn)e(and)g(D.)h(W.)g(McClary)-6
b(.)26 b(Lo)r(cating)h(and)5 288 y(detecting)e(arra)n(ys)h(for)h(in)n
(teraction)e(faults.)i Fn(Journal)h(of)5 376 y(c)l(ombinatorial)g
(optimization)p Fq(,)e(15\(1\):17{48,)i(2008.)-113 471
y([6])38 b(E.)26 b(Dumlu,)f(C.)h(Yilmaz,)h(M.)f(B.)g(Cohen,)g(and)f(A.)
g(P)n(orter.)5 558 y(F)-6 b(eedbac)n(k)24 b(driv)n(en)h(adaptiv)n(e)g
(com)n(binatorial)i(testing.)f(In)5 645 y Fn(Pr)l(o)l(c)l(e)l(e)l
(dings)j(of)f(the)g(2011)g(International)g(Symp)l(osium)g(on)5
733 y(Softwar)l(e)g(T)-6 b(esting)29 b(and)f(A)n(nalysis)p
Fq(,)d(pages)i(243{253.)h(A)n(CM,)5 820 y(2011.)-113
915 y([7])38 b(S.)25 b(F)-6 b(ouc)n(h)n(\023)-36 b(e,)26
b(M.)g(B.)g(Cohen,)g(and)f(A.)g(P)n(orter.)i(Incremen)n(tal)5
1002 y(co)n(v)n(ering)f(arra)n(y)f(failure)i(c)n(haracterization)g(in)e
(large)5 1089 y(con\014guration)g(spaces.)i(In)e Fn(Pr)l(o)l(c)l(e)l(e)
l(dings)k(of)e(the)i(eighte)l(enth)5 1177 y(international)f(symp)l
(osium)g(on)f(Softwar)l(e)i(testing)g(and)5 1264 y(analysis)p
Fq(,)d(pages)g(177{188.)i(A)n(CM,)e(2009.)-113 1359 y([8])38
b(L.)26 b(S.)f(G.)h(Ghandehari,)g(Y.)f(Lei,)h(T.)h(Xie,)f(R.)f(Kuhn,)f
(and)5 1446 y(R.)h(Kac)n(k)n(er.)h(Iden)n(tifying)e(failure-inducing)i
(com)n(binations)5 1534 y(in)f(a)h(com)n(binatorial)h(test)f(set.)g(In)
e Fn(Softwar)l(e)29 b(T)-6 b(esting,)5 1621 y(V)g(eri\014c)l(ation)28
b(and)g(V)-6 b(alidation)27 b(\(ICST\),)g(2012)h(IEEE)f(Fifth)5
1708 y(International)h(Confer)l(enc)l(e)h(on)p Fq(,)d(pages)g(370{379.)
i(IEEE,)5 1795 y(2012.)-113 1891 y([9])38 b(M.)26 b(Grindal,)g(J.)h
(O\013utt,)d(and)h(J.)h(Mellin.)h(Handling)5 1978 y(constrain)n(ts)f
(in)f(the)g(input)g(space)h(when)f(using)h(com)n(bination)5
2065 y(strategies)h(for)f(soft)n(w)n(are)h(testing.)g(2006.)-152
2160 y([10])39 b(C.)26 b(Mart)-9 b(\023)-29 b(\020nez,)27
b(L.)e(Moura,)i(D.)e(P)n(anario,)i(and)e(B.)i(Stev)n(ens.)5
2248 y(Algorithms)f(to)g(lo)r(cate)g(errors)h(using)e(co)n(v)n(ering)h
(arra)n(ys.)g(In)5 2335 y Fn(LA)-6 b(TIN)27 b(2008:)35
b(The)l(or)l(etic)l(al)29 b(Informatics)p Fq(,)c(pages)i(504{519.)5
2422 y(Springer,)e(2008.)-152 2517 y([11])39 b(C.)26
b(Mart)-9 b(\023)-29 b(\020nez,)27 b(L.)e(Moura,)i(D.)e(P)n(anario,)i
(and)e(B.)i(Stev)n(ens.)5 2605 y(Lo)r(cating)f(errors)h(using)e(elas,)i
(co)n(v)n(ering)f(arra)n(ys,)g(and)5 2692 y(adaptiv)n(e)f(testing)h
(algorithms.)h Fn(SIAM)g(Journal)h(on)5 2779 y(Discr)l(ete)h
(Mathematics)p Fq(,)e(23\(4\):1776{1799,)i(2009.)-152
2874 y([12])39 b(C.)26 b(Nie)g(and)f(H.)g(Leung.)h(The)f(minimal)i
(failure-causing)5 2962 y(sc)n(hema)f(of)g(com)n(binatorial)h(testing.)
f Fn(A)n(CM)h(T)-6 b(r)l(ansactions)5 3049 y(on)28 b(Softwar)l(e)g
(Engine)l(ering)g(and)g(Metho)l(dolo)l(gy)h(\(TOSEM\))p
Fq(,)5 3136 y(20\(4\):15,)e(2011.)-152 3231 y([13])39
b(C.)26 b(Nie)g(and)f(H.)g(Leung.)h(A)f(surv)n(ey)f(of)j(com)n
(binatorial)5 3319 y(testing.)f Fn(A)n(CM)h(Computing)h(Surveys)h
(\(CSUR\))p Fq(,)d(43\(2\):11,)5 3406 y(2011.)-152 3501
y([14])39 b(X.)25 b(Niu,)h(C.)g(Nie,)g(Y.)f(Lei,)h(and)f(A.)h(T.)g
(Chan.)g(Iden)n(tifying)5 3588 y(failure-inducing)g(com)n(binations)f
(using)h(tuple)f(relationship.)5 3676 y(In)g Fn(Softwar)l(e)j(T)-6
b(esting,)28 b(V)-6 b(eri\014c)l(ation)28 b(and)g(V)-6
b(alidation)5 3763 y(Workshops)29 b(\(ICSTW\),)d(2013)i(IEEE)f(Sixth)h
(International)5 3850 y(Confer)l(enc)l(e)h(on)p Fq(,)d(pages)g
(271{280.)i(IEEE,)e(2013.)-152 3945 y([15])39 b(K.)25
b(Shaky)n(a,)g(T.)h(Xie,)g(N.)g(Li,)g(Y.)f(Lei,)h(R.)g(Kac)n(k)n(er,)f
(and)5 4033 y(R.)g(Kuhn.)g(Isolating)h(failure-inducing)g(com)n
(binations)g(in)5 4120 y(com)n(binatorial)h(testing)e(using)h(test)g
(augmen)n(tation)f(and)5 4207 y(classi\014cation.)i(In)e
Fn(Softwar)l(e)j(T)-6 b(esting,)28 b(V)-6 b(eri\014c)l(ation)29
b(and)5 4294 y(V)-6 b(alidation)27 b(\(ICST\),)g(2012)h(IEEE)f(Fifth)g
(International)5 4381 y(Confer)l(enc)l(e)i(on)p Fq(,)d(pages)g
(620{623.)i(IEEE,)e(2012.)-152 4477 y([16])39 b(C.)26
b(Yilmaz.)h(T)-6 b(est)25 b(case-a)n(w)n(are)i(com)n(binatorial)g(in)n
(teraction)5 4564 y(testing.)f Fn(Softwar)l(e)i(Engine)l(ering,)g(IEEE)
f(T)-6 b(r)l(ansactions)29 b(on)p Fq(,)5 4651 y(39\(5\):684{706,)g
(2013.)-152 4747 y([17])39 b(C.)26 b(Yilmaz,)h(M.)f(B.)g(Cohen,)g(and)f
(A.)g(A.)h(P)n(orter.)g(Co)n(v)n(ering)5 4834 y(arra)n(ys)g(for)g
(e\016cien)n(t)g(fault)g(c)n(haracterization)g(in)g(complex)5
4921 y(con\014guration)f(spaces.)i Fn(Softwar)l(e)h(Engine)l(ering,)g
(IEEE)5 5008 y(T)-6 b(r)l(ansactions)29 b(on)p Fq(,)d(32\(1\):20{34,)j
(2006.)-152 5104 y([18])39 b(C.)26 b(Yilmaz,)h(E.)f(Dumlu,)f(M.)h
(Cohen,)g(and)f(A.)g(P)n(orter.)5 5191 y(Reducing)g(masking)g
(e\013ects)h(in)g(com)n(binatorial)g(in)n(teraction)5
5278 y(testing:)35 b(A)25 b(feedbac)n(k)g(driv)n(en)g(adaptiv)n(e)g
(approac)n(h.)g(2013.)-152 5373 y([19])39 b(A.)25 b(Zeller)i(and)e(R.)g
(Hildebrandt.)g(Simplifying)h(and)2197 -69 y(isolating)h
(failure-inducing)e(input.)g Fn(Softwar)l(e)k(Engine)l(ering,)2197
19 y(IEEE)e(T)-6 b(r)l(ansactions)29 b(on)p Fq(,)d(28\(2\):183{200,)j
(2002.)2040 114 y([20])39 b(Z.)25 b(Zhang)h(and)f(J.)h(Zhang.)g
(Characterizing)h(failure-causing)2197 201 y(parameter)f(in)n
(teractions)g(b)n(y)e(adaptiv)n(e)h(testing.)h(In)2197
288 y Fn(Pr)l(o)l(c)l(e)l(e)l(dings)j(of)e(the)i(2011)f(International)g
(Symp)l(osium)f(on)2197 376 y(Softwar)l(e)h(T)-6 b(esting)28
b(and)g(A)n(nalysis)p Fq(,)e(pages)g(331{341.)j(A)n(CM,)2197
463 y(2011.)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
